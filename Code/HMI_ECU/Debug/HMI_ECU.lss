
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000329e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c2  00800060  0000329e  00003332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00800122  00800122  000033f4  2**0
                  ALLOC
  3 .stab         000030a8  00000000  00000000  000033f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000134a  00000000  00000000  0000649c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000077e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007926  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007a96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000096df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a5ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b378  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b4d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b765  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 32       	cpi	r26, 0x22	; 34
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e2       	ldi	r26, 0x22	; 34
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 34       	cpi	r26, 0x43	; 67
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 29 0b 	call	0x1652	; 0x1652 <main>
      8a:	0c 94 4d 19 	jmp	0x329a	; 0x329a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e0       	ldi	r26, 0x0D	; 13
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ed 18 	jmp	0x31da	; 0x31da <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 dd 18 	jmp	0x31ba	; 0x31ba <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 dd 18 	jmp	0x31ba	; 0x31ba <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e0       	ldi	r24, 0x0D	; 13
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ed 18 	jmp	0x31da	; 0x31da <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 dd 18 	jmp	0x31ba	; 0x31ba <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 dd 18 	jmp	0x31ba	; 0x31ba <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 dd 18 	jmp	0x31ba	; 0x31ba <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e1 18 	jmp	0x31c2	; 0x31c2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <set_pass>:
 * 3Sec , 15Sec and one minute */
Timer1_ConfigType Sec = {0 , 7813 , Prescaler1024 , Compare };
/*
 * Function for setting password
 * as  the user will enter it two times and see if the two times are equal*/
void set_pass(void){
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c7 54       	subi	r28, 0x47	; 71
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
     b60:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"  Enter ur Pass");
     b64:	20 e6       	ldi	r18, 0x60	; 96
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	a9 01       	movw	r20, r18
     b6e:	0e 94 95 18 	call	0x312a	; 0x312a <LCD_displayStringRowColumn>
     b72:	fe 01       	movw	r30, r28
     b74:	ed 5b       	subi	r30, 0xBD	; 189
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	aa ef       	ldi	r26, 0xFA	; 250
     b7e:	b4 e4       	ldi	r27, 0x44	; 68
     b80:	80 83       	st	Z, r24
     b82:	91 83       	std	Z+1, r25	; 0x01
     b84:	a2 83       	std	Z+2, r26	; 0x02
     b86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b88:	8e 01       	movw	r16, r28
     b8a:	01 5c       	subi	r16, 0xC1	; 193
     b8c:	1f 4f       	sbci	r17, 0xFF	; 255
     b8e:	fe 01       	movw	r30, r28
     b90:	ed 5b       	subi	r30, 0xBD	; 189
     b92:	ff 4f       	sbci	r31, 0xFF	; 255
     b94:	60 81       	ld	r22, Z
     b96:	71 81       	ldd	r23, Z+1	; 0x01
     b98:	82 81       	ldd	r24, Z+2	; 0x02
     b9a:	93 81       	ldd	r25, Z+3	; 0x03
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	4a ef       	ldi	r20, 0xFA	; 250
     ba2:	54 e4       	ldi	r21, 0x44	; 68
     ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba8:	dc 01       	movw	r26, r24
     baa:	cb 01       	movw	r24, r22
     bac:	f8 01       	movw	r30, r16
     bae:	80 83       	st	Z, r24
     bb0:	91 83       	std	Z+1, r25	; 0x01
     bb2:	a2 83       	std	Z+2, r26	; 0x02
     bb4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bb6:	fe 01       	movw	r30, r28
     bb8:	ff 96       	adiw	r30, 0x3f	; 63
     bba:	60 81       	ld	r22, Z
     bbc:	71 81       	ldd	r23, Z+1	; 0x01
     bbe:	82 81       	ldd	r24, Z+2	; 0x02
     bc0:	93 81       	ldd	r25, Z+3	; 0x03
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 e8       	ldi	r20, 0x80	; 128
     bc8:	5f e3       	ldi	r21, 0x3F	; 63
     bca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bce:	88 23       	and	r24, r24
     bd0:	2c f4       	brge	.+10     	; 0xbdc <set_pass+0x96>
		__ticks = 1;
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	9e af       	std	Y+62, r25	; 0x3e
     bd8:	8d af       	std	Y+61, r24	; 0x3d
     bda:	46 c0       	rjmp	.+140    	; 0xc68 <set_pass+0x122>
	else if (__tmp > 65535)
     bdc:	fe 01       	movw	r30, r28
     bde:	ff 96       	adiw	r30, 0x3f	; 63
     be0:	60 81       	ld	r22, Z
     be2:	71 81       	ldd	r23, Z+1	; 0x01
     be4:	82 81       	ldd	r24, Z+2	; 0x02
     be6:	93 81       	ldd	r25, Z+3	; 0x03
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	3f ef       	ldi	r19, 0xFF	; 255
     bec:	4f e7       	ldi	r20, 0x7F	; 127
     bee:	57 e4       	ldi	r21, 0x47	; 71
     bf0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bf4:	18 16       	cp	r1, r24
     bf6:	64 f5       	brge	.+88     	; 0xc50 <set_pass+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf8:	fe 01       	movw	r30, r28
     bfa:	ed 5b       	subi	r30, 0xBD	; 189
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	60 81       	ld	r22, Z
     c00:	71 81       	ldd	r23, Z+1	; 0x01
     c02:	82 81       	ldd	r24, Z+2	; 0x02
     c04:	93 81       	ldd	r25, Z+3	; 0x03
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	40 e2       	ldi	r20, 0x20	; 32
     c0c:	51 e4       	ldi	r21, 0x41	; 65
     c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c12:	dc 01       	movw	r26, r24
     c14:	cb 01       	movw	r24, r22
     c16:	bc 01       	movw	r22, r24
     c18:	cd 01       	movw	r24, r26
     c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c1e:	dc 01       	movw	r26, r24
     c20:	cb 01       	movw	r24, r22
     c22:	9e af       	std	Y+62, r25	; 0x3e
     c24:	8d af       	std	Y+61, r24	; 0x3d
     c26:	0f c0       	rjmp	.+30     	; 0xc46 <set_pass+0x100>
     c28:	88 ec       	ldi	r24, 0xC8	; 200
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	9c af       	std	Y+60, r25	; 0x3c
     c2e:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c30:	8b ad       	ldd	r24, Y+59	; 0x3b
     c32:	9c ad       	ldd	r25, Y+60	; 0x3c
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	f1 f7       	brne	.-4      	; 0xc34 <set_pass+0xee>
     c38:	9c af       	std	Y+60, r25	; 0x3c
     c3a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c3c:	8d ad       	ldd	r24, Y+61	; 0x3d
     c3e:	9e ad       	ldd	r25, Y+62	; 0x3e
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	9e af       	std	Y+62, r25	; 0x3e
     c44:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c46:	8d ad       	ldd	r24, Y+61	; 0x3d
     c48:	9e ad       	ldd	r25, Y+62	; 0x3e
     c4a:	00 97       	sbiw	r24, 0x00	; 0
     c4c:	69 f7       	brne	.-38     	; 0xc28 <set_pass+0xe2>
     c4e:	16 c0       	rjmp	.+44     	; 0xc7c <set_pass+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c50:	fe 01       	movw	r30, r28
     c52:	ff 96       	adiw	r30, 0x3f	; 63
     c54:	60 81       	ld	r22, Z
     c56:	71 81       	ldd	r23, Z+1	; 0x01
     c58:	82 81       	ldd	r24, Z+2	; 0x02
     c5a:	93 81       	ldd	r25, Z+3	; 0x03
     c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c60:	dc 01       	movw	r26, r24
     c62:	cb 01       	movw	r24, r22
     c64:	9e af       	std	Y+62, r25	; 0x3e
     c66:	8d af       	std	Y+61, r24	; 0x3d
     c68:	8d ad       	ldd	r24, Y+61	; 0x3d
     c6a:	9e ad       	ldd	r25, Y+62	; 0x3e
     c6c:	9a af       	std	Y+58, r25	; 0x3a
     c6e:	89 af       	std	Y+57, r24	; 0x39
     c70:	89 ad       	ldd	r24, Y+57	; 0x39
     c72:	9a ad       	ldd	r25, Y+58	; 0x3a
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	f1 f7       	brne	.-4      	; 0xc74 <set_pass+0x12e>
     c78:	9a af       	std	Y+58, r25	; 0x3a
     c7a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2000);
	LCD_clearScreen();
     c7c:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_clearScreen>
	UART_sendByte(UART_setPass);
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <UART_sendByte>
	do{
	Password_Set_State = TRUE;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	80 93 27 01 	sts	0x0127, r24
	LCD_displayStringRowColumn(0,0,"Plz Enter Pass:");
     c8c:	20 e7       	ldi	r18, 0x70	; 112
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	a9 01       	movw	r20, r18
     c96:	0e 94 95 18 	call	0x312a	; 0x312a <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	0e 94 51 18 	call	0x30a2	; 0x30a2 <LCD_moveCursor>
	for(i=0 ; i<Size ; i++){
     ca2:	10 92 2a 01 	sts	0x012A, r1
     ca6:	9e c0       	rjmp	.+316    	; 0xde4 <set_pass+0x29e>
		*(passwordOne+i) = KEYPAD_getPressedKey();
     ca8:	80 91 2a 01 	lds	r24, 0x012A
     cac:	88 2f       	mov	r24, r24
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	8c 01       	movw	r16, r24
     cb6:	05 5d       	subi	r16, 0xD5	; 213
     cb8:	1e 4f       	sbci	r17, 0xFE	; 254
     cba:	0e 94 ac 12 	call	0x2558	; 0x2558 <KEYPAD_getPressedKey>
     cbe:	88 2f       	mov	r24, r24
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	f8 01       	movw	r30, r16
     cc4:	91 83       	std	Z+1, r25	; 0x01
     cc6:	80 83       	st	Z, r24

		if((*(passwordOne+i) <= 9) && (*(passwordOne+i) >= 0))
     cc8:	80 91 2a 01 	lds	r24, 0x012A
     ccc:	88 2f       	mov	r24, r24
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	fc 01       	movw	r30, r24
     cd6:	e5 5d       	subi	r30, 0xD5	; 213
     cd8:	fe 4f       	sbci	r31, 0xFE	; 254
     cda:	80 81       	ld	r24, Z
     cdc:	91 81       	ldd	r25, Z+1	; 0x01
     cde:	8a 30       	cpi	r24, 0x0A	; 10
     ce0:	91 05       	cpc	r25, r1
     ce2:	20 f4       	brcc	.+8      	; 0xcec <set_pass+0x1a6>
		{
			LCD_displayCharacter('*');   /* display the pressed keypad switch */
     ce4:	8a e2       	ldi	r24, 0x2A	; 42
     ce6:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <LCD_displayCharacter>
     cea:	05 c0       	rjmp	.+10     	; 0xcf6 <set_pass+0x1b0>
		}
		else
		{
			i--;
     cec:	80 91 2a 01 	lds	r24, 0x012A
     cf0:	81 50       	subi	r24, 0x01	; 1
     cf2:	80 93 2a 01 	sts	0x012A, r24
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	aa ef       	ldi	r26, 0xFA	; 250
     cfc:	b3 e4       	ldi	r27, 0x43	; 67
     cfe:	8d ab       	std	Y+53, r24	; 0x35
     d00:	9e ab       	std	Y+54, r25	; 0x36
     d02:	af ab       	std	Y+55, r26	; 0x37
     d04:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d06:	6d a9       	ldd	r22, Y+53	; 0x35
     d08:	7e a9       	ldd	r23, Y+54	; 0x36
     d0a:	8f a9       	ldd	r24, Y+55	; 0x37
     d0c:	98 ad       	ldd	r25, Y+56	; 0x38
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	4a ef       	ldi	r20, 0xFA	; 250
     d14:	54 e4       	ldi	r21, 0x44	; 68
     d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d1a:	dc 01       	movw	r26, r24
     d1c:	cb 01       	movw	r24, r22
     d1e:	89 ab       	std	Y+49, r24	; 0x31
     d20:	9a ab       	std	Y+50, r25	; 0x32
     d22:	ab ab       	std	Y+51, r26	; 0x33
     d24:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d26:	69 a9       	ldd	r22, Y+49	; 0x31
     d28:	7a a9       	ldd	r23, Y+50	; 0x32
     d2a:	8b a9       	ldd	r24, Y+51	; 0x33
     d2c:	9c a9       	ldd	r25, Y+52	; 0x34
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	40 e8       	ldi	r20, 0x80	; 128
     d34:	5f e3       	ldi	r21, 0x3F	; 63
     d36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d3a:	88 23       	and	r24, r24
     d3c:	2c f4       	brge	.+10     	; 0xd48 <set_pass+0x202>
		__ticks = 1;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	98 ab       	std	Y+48, r25	; 0x30
     d44:	8f a7       	std	Y+47, r24	; 0x2f
     d46:	3f c0       	rjmp	.+126    	; 0xdc6 <set_pass+0x280>
	else if (__tmp > 65535)
     d48:	69 a9       	ldd	r22, Y+49	; 0x31
     d4a:	7a a9       	ldd	r23, Y+50	; 0x32
     d4c:	8b a9       	ldd	r24, Y+51	; 0x33
     d4e:	9c a9       	ldd	r25, Y+52	; 0x34
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	3f ef       	ldi	r19, 0xFF	; 255
     d54:	4f e7       	ldi	r20, 0x7F	; 127
     d56:	57 e4       	ldi	r21, 0x47	; 71
     d58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d5c:	18 16       	cp	r1, r24
     d5e:	4c f5       	brge	.+82     	; 0xdb2 <set_pass+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d60:	6d a9       	ldd	r22, Y+53	; 0x35
     d62:	7e a9       	ldd	r23, Y+54	; 0x36
     d64:	8f a9       	ldd	r24, Y+55	; 0x37
     d66:	98 ad       	ldd	r25, Y+56	; 0x38
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e2       	ldi	r20, 0x20	; 32
     d6e:	51 e4       	ldi	r21, 0x41	; 65
     d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d74:	dc 01       	movw	r26, r24
     d76:	cb 01       	movw	r24, r22
     d78:	bc 01       	movw	r22, r24
     d7a:	cd 01       	movw	r24, r26
     d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	98 ab       	std	Y+48, r25	; 0x30
     d86:	8f a7       	std	Y+47, r24	; 0x2f
     d88:	0f c0       	rjmp	.+30     	; 0xda8 <set_pass+0x262>
     d8a:	88 ec       	ldi	r24, 0xC8	; 200
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9e a7       	std	Y+46, r25	; 0x2e
     d90:	8d a7       	std	Y+45, r24	; 0x2d
     d92:	8d a5       	ldd	r24, Y+45	; 0x2d
     d94:	9e a5       	ldd	r25, Y+46	; 0x2e
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	f1 f7       	brne	.-4      	; 0xd96 <set_pass+0x250>
     d9a:	9e a7       	std	Y+46, r25	; 0x2e
     d9c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d9e:	8f a5       	ldd	r24, Y+47	; 0x2f
     da0:	98 a9       	ldd	r25, Y+48	; 0x30
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	98 ab       	std	Y+48, r25	; 0x30
     da6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da8:	8f a5       	ldd	r24, Y+47	; 0x2f
     daa:	98 a9       	ldd	r25, Y+48	; 0x30
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	69 f7       	brne	.-38     	; 0xd8a <set_pass+0x244>
     db0:	14 c0       	rjmp	.+40     	; 0xdda <set_pass+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     db2:	69 a9       	ldd	r22, Y+49	; 0x31
     db4:	7a a9       	ldd	r23, Y+50	; 0x32
     db6:	8b a9       	ldd	r24, Y+51	; 0x33
     db8:	9c a9       	ldd	r25, Y+52	; 0x34
     dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	98 ab       	std	Y+48, r25	; 0x30
     dc4:	8f a7       	std	Y+47, r24	; 0x2f
     dc6:	8f a5       	ldd	r24, Y+47	; 0x2f
     dc8:	98 a9       	ldd	r25, Y+48	; 0x30
     dca:	9c a7       	std	Y+44, r25	; 0x2c
     dcc:	8b a7       	std	Y+43, r24	; 0x2b
     dce:	8b a5       	ldd	r24, Y+43	; 0x2b
     dd0:	9c a5       	ldd	r25, Y+44	; 0x2c
     dd2:	01 97       	sbiw	r24, 0x01	; 1
     dd4:	f1 f7       	brne	.-4      	; 0xdd2 <set_pass+0x28c>
     dd6:	9c a7       	std	Y+44, r25	; 0x2c
     dd8:	8b a7       	std	Y+43, r24	; 0x2b
	UART_sendByte(UART_setPass);
	do{
	Password_Set_State = TRUE;
	LCD_displayStringRowColumn(0,0,"Plz Enter Pass:");
	LCD_moveCursor(1,0);
	for(i=0 ; i<Size ; i++){
     dda:	80 91 2a 01 	lds	r24, 0x012A
     dde:	8f 5f       	subi	r24, 0xFF	; 255
     de0:	80 93 2a 01 	sts	0x012A, r24
     de4:	80 91 2a 01 	lds	r24, 0x012A
     de8:	85 30       	cpi	r24, 0x05	; 5
     dea:	08 f4       	brcc	.+2      	; 0xdee <set_pass+0x2a8>
     dec:	5d cf       	rjmp	.-326    	; 0xca8 <set_pass+0x162>
		}

		_delay_ms(500); /* Press time */
		}

	while(KEYPAD_getPressedKey() != '='){};
     dee:	0e 94 ac 12 	call	0x2558	; 0x2558 <KEYPAD_getPressedKey>
     df2:	8d 33       	cpi	r24, 0x3D	; 61
     df4:	e1 f7       	brne	.-8      	; 0xdee <set_pass+0x2a8>

	LCD_clearScreen();
     df6:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_clearScreen>
	LCD_displayString("   Processing");
     dfa:	80 e8       	ldi	r24, 0x80	; 128
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 1e 18 	call	0x303c	; 0x303c <LCD_displayString>
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	aa ef       	ldi	r26, 0xFA	; 250
     e08:	b3 e4       	ldi	r27, 0x43	; 67
     e0a:	8f a3       	std	Y+39, r24	; 0x27
     e0c:	98 a7       	std	Y+40, r25	; 0x28
     e0e:	a9 a7       	std	Y+41, r26	; 0x29
     e10:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e12:	6f a1       	ldd	r22, Y+39	; 0x27
     e14:	78 a5       	ldd	r23, Y+40	; 0x28
     e16:	89 a5       	ldd	r24, Y+41	; 0x29
     e18:	9a a5       	ldd	r25, Y+42	; 0x2a
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	4a ef       	ldi	r20, 0xFA	; 250
     e20:	54 e4       	ldi	r21, 0x44	; 68
     e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	8b a3       	std	Y+35, r24	; 0x23
     e2c:	9c a3       	std	Y+36, r25	; 0x24
     e2e:	ad a3       	std	Y+37, r26	; 0x25
     e30:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e32:	6b a1       	ldd	r22, Y+35	; 0x23
     e34:	7c a1       	ldd	r23, Y+36	; 0x24
     e36:	8d a1       	ldd	r24, Y+37	; 0x25
     e38:	9e a1       	ldd	r25, Y+38	; 0x26
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	40 e8       	ldi	r20, 0x80	; 128
     e40:	5f e3       	ldi	r21, 0x3F	; 63
     e42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e46:	88 23       	and	r24, r24
     e48:	2c f4       	brge	.+10     	; 0xe54 <set_pass+0x30e>
		__ticks = 1;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	9a a3       	std	Y+34, r25	; 0x22
     e50:	89 a3       	std	Y+33, r24	; 0x21
     e52:	3f c0       	rjmp	.+126    	; 0xed2 <set_pass+0x38c>
	else if (__tmp > 65535)
     e54:	6b a1       	ldd	r22, Y+35	; 0x23
     e56:	7c a1       	ldd	r23, Y+36	; 0x24
     e58:	8d a1       	ldd	r24, Y+37	; 0x25
     e5a:	9e a1       	ldd	r25, Y+38	; 0x26
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	3f ef       	ldi	r19, 0xFF	; 255
     e60:	4f e7       	ldi	r20, 0x7F	; 127
     e62:	57 e4       	ldi	r21, 0x47	; 71
     e64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e68:	18 16       	cp	r1, r24
     e6a:	4c f5       	brge	.+82     	; 0xebe <set_pass+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6c:	6f a1       	ldd	r22, Y+39	; 0x27
     e6e:	78 a5       	ldd	r23, Y+40	; 0x28
     e70:	89 a5       	ldd	r24, Y+41	; 0x29
     e72:	9a a5       	ldd	r25, Y+42	; 0x2a
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	40 e2       	ldi	r20, 0x20	; 32
     e7a:	51 e4       	ldi	r21, 0x41	; 65
     e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e80:	dc 01       	movw	r26, r24
     e82:	cb 01       	movw	r24, r22
     e84:	bc 01       	movw	r22, r24
     e86:	cd 01       	movw	r24, r26
     e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	9a a3       	std	Y+34, r25	; 0x22
     e92:	89 a3       	std	Y+33, r24	; 0x21
     e94:	0f c0       	rjmp	.+30     	; 0xeb4 <set_pass+0x36e>
     e96:	88 ec       	ldi	r24, 0xC8	; 200
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	98 a3       	std	Y+32, r25	; 0x20
     e9c:	8f 8f       	std	Y+31, r24	; 0x1f
     e9e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ea0:	98 a1       	ldd	r25, Y+32	; 0x20
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	f1 f7       	brne	.-4      	; 0xea2 <set_pass+0x35c>
     ea6:	98 a3       	std	Y+32, r25	; 0x20
     ea8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eaa:	89 a1       	ldd	r24, Y+33	; 0x21
     eac:	9a a1       	ldd	r25, Y+34	; 0x22
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	9a a3       	std	Y+34, r25	; 0x22
     eb2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb4:	89 a1       	ldd	r24, Y+33	; 0x21
     eb6:	9a a1       	ldd	r25, Y+34	; 0x22
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	69 f7       	brne	.-38     	; 0xe96 <set_pass+0x350>
     ebc:	14 c0       	rjmp	.+40     	; 0xee6 <set_pass+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebe:	6b a1       	ldd	r22, Y+35	; 0x23
     ec0:	7c a1       	ldd	r23, Y+36	; 0x24
     ec2:	8d a1       	ldd	r24, Y+37	; 0x25
     ec4:	9e a1       	ldd	r25, Y+38	; 0x26
     ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	9a a3       	std	Y+34, r25	; 0x22
     ed0:	89 a3       	std	Y+33, r24	; 0x21
     ed2:	89 a1       	ldd	r24, Y+33	; 0x21
     ed4:	9a a1       	ldd	r25, Y+34	; 0x22
     ed6:	9e 8f       	std	Y+30, r25	; 0x1e
     ed8:	8d 8f       	std	Y+29, r24	; 0x1d
     eda:	8d 8d       	ldd	r24, Y+29	; 0x1d
     edc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <set_pass+0x398>
     ee2:	9e 8f       	std	Y+30, r25	; 0x1e
     ee4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);

	LCD_displayStringRowColumn(0,0,"Plz Enter Pass:");
     ee6:	20 e7       	ldi	r18, 0x70	; 112
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	a9 01       	movw	r20, r18
     ef0:	0e 94 95 18 	call	0x312a	; 0x312a <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Again:");
     ef4:	2e e8       	ldi	r18, 0x8E	; 142
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	a9 01       	movw	r20, r18
     efe:	0e 94 95 18 	call	0x312a	; 0x312a <LCD_displayStringRowColumn>
	LCD_moveCursor(1,7);
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	67 e0       	ldi	r22, 0x07	; 7
     f06:	0e 94 51 18 	call	0x30a2	; 0x30a2 <LCD_moveCursor>

	for(i=0 ; i<Size ; i++){
     f0a:	10 92 2a 01 	sts	0x012A, r1
     f0e:	9e c0       	rjmp	.+316    	; 0x104c <set_pass+0x506>
		*(passwordTwo+i) = KEYPAD_getPressedKey();
     f10:	80 91 2a 01 	lds	r24, 0x012A
     f14:	88 2f       	mov	r24, r24
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	8c 01       	movw	r16, r24
     f1e:	0b 5c       	subi	r16, 0xCB	; 203
     f20:	1e 4f       	sbci	r17, 0xFE	; 254
     f22:	0e 94 ac 12 	call	0x2558	; 0x2558 <KEYPAD_getPressedKey>
     f26:	88 2f       	mov	r24, r24
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	f8 01       	movw	r30, r16
     f2c:	91 83       	std	Z+1, r25	; 0x01
     f2e:	80 83       	st	Z, r24

		if((*(passwordTwo+i) <= 9) && (*(passwordTwo+i) >= 0))
     f30:	80 91 2a 01 	lds	r24, 0x012A
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	fc 01       	movw	r30, r24
     f3e:	eb 5c       	subi	r30, 0xCB	; 203
     f40:	fe 4f       	sbci	r31, 0xFE	; 254
     f42:	80 81       	ld	r24, Z
     f44:	91 81       	ldd	r25, Z+1	; 0x01
     f46:	8a 30       	cpi	r24, 0x0A	; 10
     f48:	91 05       	cpc	r25, r1
     f4a:	20 f4       	brcc	.+8      	; 0xf54 <set_pass+0x40e>
		{
			LCD_displayCharacter('*');   /* display the pressed keypad switch */
     f4c:	8a e2       	ldi	r24, 0x2A	; 42
     f4e:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <LCD_displayCharacter>
     f52:	05 c0       	rjmp	.+10     	; 0xf5e <set_pass+0x418>
		}
		else
		{
			i--;
     f54:	80 91 2a 01 	lds	r24, 0x012A
     f58:	81 50       	subi	r24, 0x01	; 1
     f5a:	80 93 2a 01 	sts	0x012A, r24
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	aa ef       	ldi	r26, 0xFA	; 250
     f64:	b3 e4       	ldi	r27, 0x43	; 67
     f66:	89 8f       	std	Y+25, r24	; 0x19
     f68:	9a 8f       	std	Y+26, r25	; 0x1a
     f6a:	ab 8f       	std	Y+27, r26	; 0x1b
     f6c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f6e:	69 8d       	ldd	r22, Y+25	; 0x19
     f70:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f72:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f74:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	4a ef       	ldi	r20, 0xFA	; 250
     f7c:	54 e4       	ldi	r21, 0x44	; 68
     f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	8d 8b       	std	Y+21, r24	; 0x15
     f88:	9e 8b       	std	Y+22, r25	; 0x16
     f8a:	af 8b       	std	Y+23, r26	; 0x17
     f8c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f8e:	6d 89       	ldd	r22, Y+21	; 0x15
     f90:	7e 89       	ldd	r23, Y+22	; 0x16
     f92:	8f 89       	ldd	r24, Y+23	; 0x17
     f94:	98 8d       	ldd	r25, Y+24	; 0x18
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	40 e8       	ldi	r20, 0x80	; 128
     f9c:	5f e3       	ldi	r21, 0x3F	; 63
     f9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fa2:	88 23       	and	r24, r24
     fa4:	2c f4       	brge	.+10     	; 0xfb0 <set_pass+0x46a>
		__ticks = 1;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	9c 8b       	std	Y+20, r25	; 0x14
     fac:	8b 8b       	std	Y+19, r24	; 0x13
     fae:	3f c0       	rjmp	.+126    	; 0x102e <set_pass+0x4e8>
	else if (__tmp > 65535)
     fb0:	6d 89       	ldd	r22, Y+21	; 0x15
     fb2:	7e 89       	ldd	r23, Y+22	; 0x16
     fb4:	8f 89       	ldd	r24, Y+23	; 0x17
     fb6:	98 8d       	ldd	r25, Y+24	; 0x18
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	3f ef       	ldi	r19, 0xFF	; 255
     fbc:	4f e7       	ldi	r20, 0x7F	; 127
     fbe:	57 e4       	ldi	r21, 0x47	; 71
     fc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fc4:	18 16       	cp	r1, r24
     fc6:	4c f5       	brge	.+82     	; 0x101a <set_pass+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fc8:	69 8d       	ldd	r22, Y+25	; 0x19
     fca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	40 e2       	ldi	r20, 0x20	; 32
     fd6:	51 e4       	ldi	r21, 0x41	; 65
     fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fdc:	dc 01       	movw	r26, r24
     fde:	cb 01       	movw	r24, r22
     fe0:	bc 01       	movw	r22, r24
     fe2:	cd 01       	movw	r24, r26
     fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	9c 8b       	std	Y+20, r25	; 0x14
     fee:	8b 8b       	std	Y+19, r24	; 0x13
     ff0:	0f c0       	rjmp	.+30     	; 0x1010 <set_pass+0x4ca>
     ff2:	88 ec       	ldi	r24, 0xC8	; 200
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	9a 8b       	std	Y+18, r25	; 0x12
     ff8:	89 8b       	std	Y+17, r24	; 0x11
     ffa:	89 89       	ldd	r24, Y+17	; 0x11
     ffc:	9a 89       	ldd	r25, Y+18	; 0x12
     ffe:	01 97       	sbiw	r24, 0x01	; 1
    1000:	f1 f7       	brne	.-4      	; 0xffe <set_pass+0x4b8>
    1002:	9a 8b       	std	Y+18, r25	; 0x12
    1004:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1006:	8b 89       	ldd	r24, Y+19	; 0x13
    1008:	9c 89       	ldd	r25, Y+20	; 0x14
    100a:	01 97       	sbiw	r24, 0x01	; 1
    100c:	9c 8b       	std	Y+20, r25	; 0x14
    100e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1010:	8b 89       	ldd	r24, Y+19	; 0x13
    1012:	9c 89       	ldd	r25, Y+20	; 0x14
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	69 f7       	brne	.-38     	; 0xff2 <set_pass+0x4ac>
    1018:	14 c0       	rjmp	.+40     	; 0x1042 <set_pass+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    101a:	6d 89       	ldd	r22, Y+21	; 0x15
    101c:	7e 89       	ldd	r23, Y+22	; 0x16
    101e:	8f 89       	ldd	r24, Y+23	; 0x17
    1020:	98 8d       	ldd	r25, Y+24	; 0x18
    1022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	9c 8b       	std	Y+20, r25	; 0x14
    102c:	8b 8b       	std	Y+19, r24	; 0x13
    102e:	8b 89       	ldd	r24, Y+19	; 0x13
    1030:	9c 89       	ldd	r25, Y+20	; 0x14
    1032:	98 8b       	std	Y+16, r25	; 0x10
    1034:	8f 87       	std	Y+15, r24	; 0x0f
    1036:	8f 85       	ldd	r24, Y+15	; 0x0f
    1038:	98 89       	ldd	r25, Y+16	; 0x10
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	f1 f7       	brne	.-4      	; 0x103a <set_pass+0x4f4>
    103e:	98 8b       	std	Y+16, r25	; 0x10
    1040:	8f 87       	std	Y+15, r24	; 0x0f

	LCD_displayStringRowColumn(0,0,"Plz Enter Pass:");
	LCD_displayStringRowColumn(1,0,"Again:");
	LCD_moveCursor(1,7);

	for(i=0 ; i<Size ; i++){
    1042:	80 91 2a 01 	lds	r24, 0x012A
    1046:	8f 5f       	subi	r24, 0xFF	; 255
    1048:	80 93 2a 01 	sts	0x012A, r24
    104c:	80 91 2a 01 	lds	r24, 0x012A
    1050:	85 30       	cpi	r24, 0x05	; 5
    1052:	08 f4       	brcc	.+2      	; 0x1056 <set_pass+0x510>
    1054:	5d cf       	rjmp	.-326    	; 0xf10 <set_pass+0x3ca>
		}

		_delay_ms(500); /* Press time */
	}

	while(KEYPAD_getPressedKey() != '='){};
    1056:	0e 94 ac 12 	call	0x2558	; 0x2558 <KEYPAD_getPressedKey>
    105a:	8d 33       	cpi	r24, 0x3D	; 61
    105c:	e1 f7       	brne	.-8      	; 0x1056 <set_pass+0x510>

	for(i=0 ; i<Size ; i++){
    105e:	10 92 2a 01 	sts	0x012A, r1
    1062:	20 c0       	rjmp	.+64     	; 0x10a4 <set_pass+0x55e>
		if(*(passwordTwo+i) != *(passwordOne+i))
    1064:	80 91 2a 01 	lds	r24, 0x012A
    1068:	88 2f       	mov	r24, r24
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	fc 01       	movw	r30, r24
    1072:	eb 5c       	subi	r30, 0xCB	; 203
    1074:	fe 4f       	sbci	r31, 0xFE	; 254
    1076:	20 81       	ld	r18, Z
    1078:	31 81       	ldd	r19, Z+1	; 0x01
    107a:	80 91 2a 01 	lds	r24, 0x012A
    107e:	88 2f       	mov	r24, r24
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	fc 01       	movw	r30, r24
    1088:	e5 5d       	subi	r30, 0xD5	; 213
    108a:	fe 4f       	sbci	r31, 0xFE	; 254
    108c:	80 81       	ld	r24, Z
    108e:	91 81       	ldd	r25, Z+1	; 0x01
    1090:	28 17       	cp	r18, r24
    1092:	39 07       	cpc	r19, r25
    1094:	11 f0       	breq	.+4      	; 0x109a <set_pass+0x554>
			Password_Set_State=FALSE;
    1096:	10 92 27 01 	sts	0x0127, r1
		_delay_ms(500); /* Press time */
	}

	while(KEYPAD_getPressedKey() != '='){};

	for(i=0 ; i<Size ; i++){
    109a:	80 91 2a 01 	lds	r24, 0x012A
    109e:	8f 5f       	subi	r24, 0xFF	; 255
    10a0:	80 93 2a 01 	sts	0x012A, r24
    10a4:	80 91 2a 01 	lds	r24, 0x012A
    10a8:	85 30       	cpi	r24, 0x05	; 5
    10aa:	e0 f2       	brcs	.-72     	; 0x1064 <set_pass+0x51e>
		if(*(passwordTwo+i) != *(passwordOne+i))
			Password_Set_State=FALSE;
	}

	if(Password_Set_State == TRUE){
    10ac:	80 91 27 01 	lds	r24, 0x0127
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	09 f0       	breq	.+2      	; 0x10b6 <set_pass+0x570>
    10b4:	a0 c0       	rjmp	.+320    	; 0x11f6 <set_pass+0x6b0>
		LCD_clearScreen();
    10b6:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Completed");
    10ba:	25 e9       	ldi	r18, 0x95	; 149
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	a9 01       	movw	r20, r18
    10c4:	0e 94 95 18 	call	0x312a	; 0x312a <LCD_displayStringRowColumn>
		for(uint8 i = 0 ; i < Size ; i++)
    10c8:	fe 01       	movw	r30, r28
    10ca:	e9 5b       	subi	r30, 0xB9	; 185
    10cc:	ff 4f       	sbci	r31, 0xFF	; 255
    10ce:	10 82       	st	Z, r1
    10d0:	8a c0       	rjmp	.+276    	; 0x11e6 <set_pass+0x6a0>
		{
			UART_sendByte(passwordOne[i]);
    10d2:	fe 01       	movw	r30, r28
    10d4:	e9 5b       	subi	r30, 0xB9	; 185
    10d6:	ff 4f       	sbci	r31, 0xFF	; 255
    10d8:	80 81       	ld	r24, Z
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	fc 01       	movw	r30, r24
    10e4:	e5 5d       	subi	r30, 0xD5	; 213
    10e6:	fe 4f       	sbci	r31, 0xFE	; 254
    10e8:	80 81       	ld	r24, Z
    10ea:	91 81       	ldd	r25, Z+1	; 0x01
    10ec:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <UART_sendByte>
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	a8 e4       	ldi	r26, 0x48	; 72
    10f6:	b2 e4       	ldi	r27, 0x42	; 66
    10f8:	8b 87       	std	Y+11, r24	; 0x0b
    10fa:	9c 87       	std	Y+12, r25	; 0x0c
    10fc:	ad 87       	std	Y+13, r26	; 0x0d
    10fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1100:	6b 85       	ldd	r22, Y+11	; 0x0b
    1102:	7c 85       	ldd	r23, Y+12	; 0x0c
    1104:	8d 85       	ldd	r24, Y+13	; 0x0d
    1106:	9e 85       	ldd	r25, Y+14	; 0x0e
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	4a ef       	ldi	r20, 0xFA	; 250
    110e:	54 e4       	ldi	r21, 0x44	; 68
    1110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	8f 83       	std	Y+7, r24	; 0x07
    111a:	98 87       	std	Y+8, r25	; 0x08
    111c:	a9 87       	std	Y+9, r26	; 0x09
    111e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1120:	6f 81       	ldd	r22, Y+7	; 0x07
    1122:	78 85       	ldd	r23, Y+8	; 0x08
    1124:	89 85       	ldd	r24, Y+9	; 0x09
    1126:	9a 85       	ldd	r25, Y+10	; 0x0a
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	40 e8       	ldi	r20, 0x80	; 128
    112e:	5f e3       	ldi	r21, 0x3F	; 63
    1130:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1134:	88 23       	and	r24, r24
    1136:	2c f4       	brge	.+10     	; 0x1142 <set_pass+0x5fc>
		__ticks = 1;
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	9e 83       	std	Y+6, r25	; 0x06
    113e:	8d 83       	std	Y+5, r24	; 0x05
    1140:	3f c0       	rjmp	.+126    	; 0x11c0 <set_pass+0x67a>
	else if (__tmp > 65535)
    1142:	6f 81       	ldd	r22, Y+7	; 0x07
    1144:	78 85       	ldd	r23, Y+8	; 0x08
    1146:	89 85       	ldd	r24, Y+9	; 0x09
    1148:	9a 85       	ldd	r25, Y+10	; 0x0a
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	3f ef       	ldi	r19, 0xFF	; 255
    114e:	4f e7       	ldi	r20, 0x7F	; 127
    1150:	57 e4       	ldi	r21, 0x47	; 71
    1152:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1156:	18 16       	cp	r1, r24
    1158:	4c f5       	brge	.+82     	; 0x11ac <set_pass+0x666>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    115a:	6b 85       	ldd	r22, Y+11	; 0x0b
    115c:	7c 85       	ldd	r23, Y+12	; 0x0c
    115e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1160:	9e 85       	ldd	r25, Y+14	; 0x0e
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	40 e2       	ldi	r20, 0x20	; 32
    1168:	51 e4       	ldi	r21, 0x41	; 65
    116a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	bc 01       	movw	r22, r24
    1174:	cd 01       	movw	r24, r26
    1176:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	9e 83       	std	Y+6, r25	; 0x06
    1180:	8d 83       	std	Y+5, r24	; 0x05
    1182:	0f c0       	rjmp	.+30     	; 0x11a2 <set_pass+0x65c>
    1184:	88 ec       	ldi	r24, 0xC8	; 200
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	9c 83       	std	Y+4, r25	; 0x04
    118a:	8b 83       	std	Y+3, r24	; 0x03
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	9c 81       	ldd	r25, Y+4	; 0x04
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <set_pass+0x64a>
    1194:	9c 83       	std	Y+4, r25	; 0x04
    1196:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
    119a:	9e 81       	ldd	r25, Y+6	; 0x06
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	9e 83       	std	Y+6, r25	; 0x06
    11a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11a2:	8d 81       	ldd	r24, Y+5	; 0x05
    11a4:	9e 81       	ldd	r25, Y+6	; 0x06
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	69 f7       	brne	.-38     	; 0x1184 <set_pass+0x63e>
    11aa:	14 c0       	rjmp	.+40     	; 0x11d4 <set_pass+0x68e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ac:	6f 81       	ldd	r22, Y+7	; 0x07
    11ae:	78 85       	ldd	r23, Y+8	; 0x08
    11b0:	89 85       	ldd	r24, Y+9	; 0x09
    11b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
    11bc:	9e 83       	std	Y+6, r25	; 0x06
    11be:	8d 83       	std	Y+5, r24	; 0x05
    11c0:	8d 81       	ldd	r24, Y+5	; 0x05
    11c2:	9e 81       	ldd	r25, Y+6	; 0x06
    11c4:	9a 83       	std	Y+2, r25	; 0x02
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	9a 81       	ldd	r25, Y+2	; 0x02
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	f1 f7       	brne	.-4      	; 0x11cc <set_pass+0x686>
    11d0:	9a 83       	std	Y+2, r25	; 0x02
    11d2:	89 83       	std	Y+1, r24	; 0x01
	}

	if(Password_Set_State == TRUE){
		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"Completed");
		for(uint8 i = 0 ; i < Size ; i++)
    11d4:	de 01       	movw	r26, r28
    11d6:	a9 5b       	subi	r26, 0xB9	; 185
    11d8:	bf 4f       	sbci	r27, 0xFF	; 255
    11da:	fe 01       	movw	r30, r28
    11dc:	e9 5b       	subi	r30, 0xB9	; 185
    11de:	ff 4f       	sbci	r31, 0xFF	; 255
    11e0:	80 81       	ld	r24, Z
    11e2:	8f 5f       	subi	r24, 0xFF	; 255
    11e4:	8c 93       	st	X, r24
    11e6:	fe 01       	movw	r30, r28
    11e8:	e9 5b       	subi	r30, 0xB9	; 185
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	80 81       	ld	r24, Z
    11ee:	85 30       	cpi	r24, 0x05	; 5
    11f0:	08 f4       	brcc	.+2      	; 0x11f4 <set_pass+0x6ae>
    11f2:	6f cf       	rjmp	.-290    	; 0x10d2 <set_pass+0x58c>
    11f4:	0d c0       	rjmp	.+26     	; 0x1210 <set_pass+0x6ca>
			UART_sendByte(passwordOne[i]);
			_delay_ms(50);

		}
	}
	else if(Password_Set_State == FALSE){
    11f6:	80 91 27 01 	lds	r24, 0x0127
    11fa:	88 23       	and	r24, r24
    11fc:	49 f4       	brne	.+18     	; 0x1210 <set_pass+0x6ca>
		LCD_clearScreen();
    11fe:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Try Again");
    1202:	2f e9       	ldi	r18, 0x9F	; 159
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	a9 01       	movw	r20, r18
    120c:	0e 94 95 18 	call	0x312a	; 0x312a <LCD_displayStringRowColumn>

	}
	LCD_clearScreen();
    1210:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_clearScreen>
} while(Password_Set_State == FALSE);
    1214:	80 91 27 01 	lds	r24, 0x0127
    1218:	88 23       	and	r24, r24
    121a:	09 f4       	brne	.+2      	; 0x121e <set_pass+0x6d8>
    121c:	34 cd       	rjmp	.-1432   	; 0xc86 <set_pass+0x140>
}
    121e:	c9 5b       	subi	r28, 0xB9	; 185
    1220:	df 4f       	sbci	r29, 0xFF	; 255
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	08 95       	ret

00001236 <CheckPass>:
/*
 * Function used to check if the entered password
 * is the same as the stored in the EEPROM
 * and if it is unmatched three times it will enable the buzzer for error*/
uint8 CheckPass(){
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	2f 97       	sbiw	r28, 0x0f	; 15
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
	do{
		Password_Set_State = TRUE;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	80 93 27 01 	sts	0x0127, r24
		LCD_clearScreen();
    1254:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Plz Enter Pass:");
    1258:	20 e7       	ldi	r18, 0x70	; 112
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	60 e0       	ldi	r22, 0x00	; 0
    1260:	a9 01       	movw	r20, r18
    1262:	0e 94 95 18 	call	0x312a	; 0x312a <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"Again:");
    1266:	2e e8       	ldi	r18, 0x8E	; 142
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	a9 01       	movw	r20, r18
    1270:	0e 94 95 18 	call	0x312a	; 0x312a <LCD_displayStringRowColumn>
		for(i=0 ; i<Size ; i++){
    1274:	10 92 2a 01 	sts	0x012A, r1
    1278:	ae c0       	rjmp	.+348    	; 0x13d6 <CheckPass+0x1a0>
		*(passwordTwo+i) = KEYPAD_getPressedKey();
    127a:	80 91 2a 01 	lds	r24, 0x012A
    127e:	88 2f       	mov	r24, r24
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	8c 01       	movw	r16, r24
    1288:	0b 5c       	subi	r16, 0xCB	; 203
    128a:	1e 4f       	sbci	r17, 0xFE	; 254
    128c:	0e 94 ac 12 	call	0x2558	; 0x2558 <KEYPAD_getPressedKey>
    1290:	88 2f       	mov	r24, r24
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	f8 01       	movw	r30, r16
    1296:	91 83       	std	Z+1, r25	; 0x01
    1298:	80 83       	st	Z, r24

		if((*(passwordTwo+i) <= 9) && (*(passwordTwo+i) >= 0))
    129a:	80 91 2a 01 	lds	r24, 0x012A
    129e:	88 2f       	mov	r24, r24
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	fc 01       	movw	r30, r24
    12a8:	eb 5c       	subi	r30, 0xCB	; 203
    12aa:	fe 4f       	sbci	r31, 0xFE	; 254
    12ac:	80 81       	ld	r24, Z
    12ae:	91 81       	ldd	r25, Z+1	; 0x01
    12b0:	8a 30       	cpi	r24, 0x0A	; 10
    12b2:	91 05       	cpc	r25, r1
    12b4:	a0 f4       	brcc	.+40     	; 0x12de <CheckPass+0xa8>
		{
			*(passwordTwo+i)=KEYPAD_getPressedKey();
    12b6:	80 91 2a 01 	lds	r24, 0x012A
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	8c 01       	movw	r16, r24
    12c4:	0b 5c       	subi	r16, 0xCB	; 203
    12c6:	1e 4f       	sbci	r17, 0xFE	; 254
    12c8:	0e 94 ac 12 	call	0x2558	; 0x2558 <KEYPAD_getPressedKey>
    12cc:	88 2f       	mov	r24, r24
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	f8 01       	movw	r30, r16
    12d2:	91 83       	std	Z+1, r25	; 0x01
    12d4:	80 83       	st	Z, r24
			LCD_displayCharacter('*');   /* display the pressed keypad switch */
    12d6:	8a e2       	ldi	r24, 0x2A	; 42
    12d8:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <LCD_displayCharacter>
    12dc:	05 c0       	rjmp	.+10     	; 0x12e8 <CheckPass+0xb2>
		}
		else
		{
			i--;
    12de:	80 91 2a 01 	lds	r24, 0x012A
    12e2:	81 50       	subi	r24, 0x01	; 1
    12e4:	80 93 2a 01 	sts	0x012A, r24
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	aa ef       	ldi	r26, 0xFA	; 250
    12ee:	b3 e4       	ldi	r27, 0x43	; 67
    12f0:	8b 87       	std	Y+11, r24	; 0x0b
    12f2:	9c 87       	std	Y+12, r25	; 0x0c
    12f4:	ad 87       	std	Y+13, r26	; 0x0d
    12f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    12fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	4a ef       	ldi	r20, 0xFA	; 250
    1306:	54 e4       	ldi	r21, 0x44	; 68
    1308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	8f 83       	std	Y+7, r24	; 0x07
    1312:	98 87       	std	Y+8, r25	; 0x08
    1314:	a9 87       	std	Y+9, r26	; 0x09
    1316:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1318:	6f 81       	ldd	r22, Y+7	; 0x07
    131a:	78 85       	ldd	r23, Y+8	; 0x08
    131c:	89 85       	ldd	r24, Y+9	; 0x09
    131e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 e8       	ldi	r20, 0x80	; 128
    1326:	5f e3       	ldi	r21, 0x3F	; 63
    1328:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    132c:	88 23       	and	r24, r24
    132e:	2c f4       	brge	.+10     	; 0x133a <CheckPass+0x104>
		__ticks = 1;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	9e 83       	std	Y+6, r25	; 0x06
    1336:	8d 83       	std	Y+5, r24	; 0x05
    1338:	3f c0       	rjmp	.+126    	; 0x13b8 <CheckPass+0x182>
	else if (__tmp > 65535)
    133a:	6f 81       	ldd	r22, Y+7	; 0x07
    133c:	78 85       	ldd	r23, Y+8	; 0x08
    133e:	89 85       	ldd	r24, Y+9	; 0x09
    1340:	9a 85       	ldd	r25, Y+10	; 0x0a
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	3f ef       	ldi	r19, 0xFF	; 255
    1346:	4f e7       	ldi	r20, 0x7F	; 127
    1348:	57 e4       	ldi	r21, 0x47	; 71
    134a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    134e:	18 16       	cp	r1, r24
    1350:	4c f5       	brge	.+82     	; 0x13a4 <CheckPass+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1352:	6b 85       	ldd	r22, Y+11	; 0x0b
    1354:	7c 85       	ldd	r23, Y+12	; 0x0c
    1356:	8d 85       	ldd	r24, Y+13	; 0x0d
    1358:	9e 85       	ldd	r25, Y+14	; 0x0e
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	40 e2       	ldi	r20, 0x20	; 32
    1360:	51 e4       	ldi	r21, 0x41	; 65
    1362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	bc 01       	movw	r22, r24
    136c:	cd 01       	movw	r24, r26
    136e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	9e 83       	std	Y+6, r25	; 0x06
    1378:	8d 83       	std	Y+5, r24	; 0x05
    137a:	0f c0       	rjmp	.+30     	; 0x139a <CheckPass+0x164>
    137c:	88 ec       	ldi	r24, 0xC8	; 200
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	9c 83       	std	Y+4, r25	; 0x04
    1382:	8b 83       	std	Y+3, r24	; 0x03
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <CheckPass+0x152>
    138c:	9c 83       	std	Y+4, r25	; 0x04
    138e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	9e 83       	std	Y+6, r25	; 0x06
    1398:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139a:	8d 81       	ldd	r24, Y+5	; 0x05
    139c:	9e 81       	ldd	r25, Y+6	; 0x06
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	69 f7       	brne	.-38     	; 0x137c <CheckPass+0x146>
    13a2:	14 c0       	rjmp	.+40     	; 0x13cc <CheckPass+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a4:	6f 81       	ldd	r22, Y+7	; 0x07
    13a6:	78 85       	ldd	r23, Y+8	; 0x08
    13a8:	89 85       	ldd	r24, Y+9	; 0x09
    13aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	9e 83       	std	Y+6, r25	; 0x06
    13b6:	8d 83       	std	Y+5, r24	; 0x05
    13b8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ba:	9e 81       	ldd	r25, Y+6	; 0x06
    13bc:	9a 83       	std	Y+2, r25	; 0x02
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	9a 81       	ldd	r25, Y+2	; 0x02
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	f1 f7       	brne	.-4      	; 0x13c4 <CheckPass+0x18e>
    13c8:	9a 83       	std	Y+2, r25	; 0x02
    13ca:	89 83       	std	Y+1, r24	; 0x01
	do{
		Password_Set_State = TRUE;
		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"Plz Enter Pass:");
		LCD_displayStringRowColumn(1,0,"Again:");
		for(i=0 ; i<Size ; i++){
    13cc:	80 91 2a 01 	lds	r24, 0x012A
    13d0:	8f 5f       	subi	r24, 0xFF	; 255
    13d2:	80 93 2a 01 	sts	0x012A, r24
    13d6:	80 91 2a 01 	lds	r24, 0x012A
    13da:	85 30       	cpi	r24, 0x05	; 5
    13dc:	08 f4       	brcc	.+2      	; 0x13e0 <CheckPass+0x1aa>
    13de:	4d cf       	rjmp	.-358    	; 0x127a <CheckPass+0x44>
		{
			i--;
		}
		_delay_ms(500);
		}
	while(KEYPAD_getPressedKey() != '='){};
    13e0:	0e 94 ac 12 	call	0x2558	; 0x2558 <KEYPAD_getPressedKey>
    13e4:	8d 33       	cpi	r24, 0x3D	; 61
    13e6:	e1 f7       	brne	.-8      	; 0x13e0 <CheckPass+0x1aa>

	UART_sendByte(UART_check); /*to let the UART know that what action it has to do*/
    13e8:	80 e1       	ldi	r24, 0x10	; 16
    13ea:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <UART_sendByte>
	for(i = 0 ; i < Size	; i++)
    13ee:	10 92 2a 01 	sts	0x012A, r1
    13f2:	16 c0       	rjmp	.+44     	; 0x1420 <CheckPass+0x1ea>
		{
			UART_sendByte(*(passwordTwo+i));
    13f4:	80 91 2a 01 	lds	r24, 0x012A
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	fc 01       	movw	r30, r24
    1402:	eb 5c       	subi	r30, 0xCB	; 203
    1404:	fe 4f       	sbci	r31, 0xFE	; 254
    1406:	80 81       	ld	r24, Z
    1408:	91 81       	ldd	r25, Z+1	; 0x01
    140a:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <UART_sendByte>
			while(UART_recieveByte() != (MC_Ready));
    140e:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <UART_recieveByte>
    1412:	89 39       	cpi	r24, 0x99	; 153
    1414:	e1 f7       	brne	.-8      	; 0x140e <CheckPass+0x1d8>
		_delay_ms(500);
		}
	while(KEYPAD_getPressedKey() != '='){};

	UART_sendByte(UART_check); /*to let the UART know that what action it has to do*/
	for(i = 0 ; i < Size	; i++)
    1416:	80 91 2a 01 	lds	r24, 0x012A
    141a:	8f 5f       	subi	r24, 0xFF	; 255
    141c:	80 93 2a 01 	sts	0x012A, r24
    1420:	80 91 2a 01 	lds	r24, 0x012A
    1424:	85 30       	cpi	r24, 0x05	; 5
    1426:	30 f3       	brcs	.-52     	; 0x13f4 <CheckPass+0x1be>
		{
			UART_sendByte(*(passwordTwo+i));
			while(UART_recieveByte() != (MC_Ready));
		}

	if(UART_recieveByte()==UART_matchPass){
    1428:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <UART_recieveByte>
    142c:	82 30       	cpi	r24, 0x02	; 2
    142e:	61 f4       	brne	.+24     	; 0x1448 <CheckPass+0x212>
		LCD_clearScreen();
    1430:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"	Matched");
    1434:	29 ea       	ldi	r18, 0xA9	; 169
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	a9 01       	movw	r20, r18
    143e:	0e 94 95 18 	call	0x312a	; 0x312a <LCD_displayStringRowColumn>
		return UART_matchPass;
    1442:	f2 e0       	ldi	r31, 0x02	; 2
    1444:	ff 87       	std	Y+15, r31	; 0x0f
    1446:	19 c0       	rjmp	.+50     	; 0x147a <CheckPass+0x244>
	}
	else{
		LCD_clearScreen();
    1448:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"  Try again");
    144c:	22 eb       	ldi	r18, 0xB2	; 178
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	a9 01       	movw	r20, r18
    1456:	0e 94 95 18 	call	0x312a	; 0x312a <LCD_displayStringRowColumn>
		trial -- ;
    145a:	80 91 15 01 	lds	r24, 0x0115
    145e:	81 50       	subi	r24, 0x01	; 1
    1460:	80 93 15 01 	sts	0x0115, r24
		PassStateCheck = UART_missMatchPass;
    1464:	84 e0       	ldi	r24, 0x04	; 4
    1466:	80 93 40 01 	sts	0x0140, r24
	}
	}while((trial > 0));
    146a:	80 91 15 01 	lds	r24, 0x0115
    146e:	88 23       	and	r24, r24
    1470:	09 f0       	breq	.+2      	; 0x1474 <CheckPass+0x23e>
    1472:	ed ce       	rjmp	.-550    	; 0x124e <CheckPass+0x18>
	return PassStateCheck;
    1474:	80 91 40 01 	lds	r24, 0x0140
    1478:	8f 87       	std	Y+15, r24	; 0x0f
    147a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    147c:	2f 96       	adiw	r28, 0x0f	; 15
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	08 95       	ret

00001492 <mainOptions>:
void mainOptions(){
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    149a:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"+ : Open Door");
    149e:	2e eb       	ldi	r18, 0xBE	; 190
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	a9 01       	movw	r20, r18
    14a8:	0e 94 95 18 	call	0x312a	; 0x312a <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"- : Change pass");
    14ac:	2c ec       	ldi	r18, 0xCC	; 204
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	a9 01       	movw	r20, r18
    14b6:	0e 94 95 18 	call	0x312a	; 0x312a <LCD_displayStringRowColumn>

}
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <Timer1_3Sec>:
void Timer1_3Sec(){
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    14c8:	80 91 3f 01 	lds	r24, 0x013F
    14cc:	8f 5f       	subi	r24, 0xFF	; 255
    14ce:	80 93 3f 01 	sts	0x013F, r24
	if(g_tick==3){
    14d2:	80 91 3f 01 	lds	r24, 0x013F
    14d6:	83 30       	cpi	r24, 0x03	; 3
    14d8:	91 f4       	brne	.+36     	; 0x14fe <Timer1_3Sec+0x3e>
		g_tick =0 ;
    14da:	10 92 3f 01 	sts	0x013F, r1
		LCD_clearScreen();
    14de:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"    Motor Held");
    14e2:	2c ed       	ldi	r18, 0xDC	; 220
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	a9 01       	movw	r20, r18
    14ec:	0e 94 95 18 	call	0x312a	; 0x312a <LCD_displayStringRowColumn>
		UART_sendByte(MC_Ready);
    14f0:	89 e9       	ldi	r24, 0x99	; 153
    14f2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <UART_sendByte>
		TIMER1_COMP_setCallBack(Timer1_15Sec);
    14f6:	82 e8       	ldi	r24, 0x82	; 130
    14f8:	9a e0       	ldi	r25, 0x0A	; 10
    14fa:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <TIMER1_COMP_setCallBack>

	}
}
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <Timer1_15Sec>:
void Timer1_15Sec(){
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    150c:	80 91 3f 01 	lds	r24, 0x013F
    1510:	8f 5f       	subi	r24, 0xFF	; 255
    1512:	80 93 3f 01 	sts	0x013F, r24
	if(g_tick==15){
    1516:	80 91 3f 01 	lds	r24, 0x013F
    151a:	8f 30       	cpi	r24, 0x0F	; 15
    151c:	29 f5       	brne	.+74     	; 0x1568 <Timer1_15Sec+0x64>
		g_tick =0 ;
    151e:	10 92 3f 01 	sts	0x013F, r1
		LCD_clearScreen();
    1522:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_clearScreen>
		if(Motor_State == FALSE){
    1526:	80 91 29 01 	lds	r24, 0x0129
    152a:	88 23       	and	r24, r24
    152c:	91 f4       	brne	.+36     	; 0x1552 <Timer1_15Sec+0x4e>
			LCD_displayStringRowColumn(0,0,"    Opening");
    152e:	2b ee       	ldi	r18, 0xEB	; 235
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	a9 01       	movw	r20, r18
    1538:	0e 94 95 18 	call	0x312a	; 0x312a <LCD_displayStringRowColumn>
			UART_sendByte(MC_Ready);
    153c:	89 e9       	ldi	r24, 0x99	; 153
    153e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <UART_sendByte>
			TIMER1_COMP_setCallBack(Timer1_3Sec);
    1542:	80 e6       	ldi	r24, 0x60	; 96
    1544:	9a e0       	ldi	r25, 0x0A	; 10
    1546:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <TIMER1_COMP_setCallBack>
			Motor_State = TRUE;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	80 93 29 01 	sts	0x0129, r24
    1550:	0b c0       	rjmp	.+22     	; 0x1568 <Timer1_15Sec+0x64>
		}
		else if(Motor_State == TRUE){
    1552:	80 91 29 01 	lds	r24, 0x0129
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	39 f4       	brne	.+14     	; 0x1568 <Timer1_15Sec+0x64>
				Motor_State = FALSE;
    155a:	10 92 29 01 	sts	0x0129, r1
				motorFlag = 1;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	80 93 26 01 	sts	0x0126, r24
				Timer1_deInit();
    1564:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <Timer1_deInit>
		}
	}
}
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <oneMinute>:
/*Function mainly made to be used in alarm*/
void oneMinute(){
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
	g_tick ++;
    1576:	80 91 3f 01 	lds	r24, 0x013F
    157a:	8f 5f       	subi	r24, 0xFF	; 255
    157c:	80 93 3f 01 	sts	0x013F, r24
	if(g_tick == 60){
    1580:	80 91 3f 01 	lds	r24, 0x013F
    1584:	8c 33       	cpi	r24, 0x3C	; 60
    1586:	39 f4       	brne	.+14     	; 0x1596 <oneMinute+0x28>
		g_tick = 0;
    1588:	10 92 3f 01 	sts	0x013F, r1
		buzzerFlag = 1;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	80 93 28 01 	sts	0x0128, r24
		Timer1_deInit();
    1592:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <Timer1_deInit>
	}
}
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <errorAlarm>:
void errorAlarm(){
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    15a4:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "	ERROR");
    15a8:	27 ef       	ldi	r18, 0xF7	; 247
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	60 e0       	ldi	r22, 0x00	; 0
    15b0:	a9 01       	movw	r20, r18
    15b2:	0e 94 95 18 	call	0x312a	; 0x312a <LCD_displayStringRowColumn>
	UART_sendByte(UART_Buzzer);
    15b6:	80 e2       	ldi	r24, 0x20	; 32
    15b8:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <UART_sendByte>
	buzzerFlag = 0 ;
    15bc:	10 92 28 01 	sts	0x0128, r1
	g_tick = 0;
    15c0:	10 92 3f 01 	sts	0x013F, r1
	TIMER1_COMP_setCallBack(oneMinute);
    15c4:	87 eb       	ldi	r24, 0xB7	; 183
    15c6:	9a e0       	ldi	r25, 0x0A	; 10
    15c8:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <TIMER1_COMP_setCallBack>
	while(buzzerFlag != 1);
    15cc:	80 91 28 01 	lds	r24, 0x0128
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	e1 f7       	brne	.-8      	; 0x15cc <errorAlarm+0x30>
}
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <changePassOption>:

void changePassOption(){
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	0f 92       	push	r0
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
	uint8 pass = CheckPass();
    15e4:	0e 94 1b 09 	call	0x1236	; 0x1236 <CheckPass>
    15e8:	89 83       	std	Y+1, r24	; 0x01
	if(pass== UART_matchPass){
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	82 30       	cpi	r24, 0x02	; 2
    15ee:	19 f4       	brne	.+6      	; 0x15f6 <changePassOption+0x1c>
		set_pass();
    15f0:	0e 94 a3 05 	call	0xb46	; 0xb46 <set_pass>
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <changePassOption+0x20>
	}
	else {
		errorAlarm();
    15f6:	0e 94 ce 0a 	call	0x159c	; 0x159c <errorAlarm>
	}
}
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <openDoorOption>:

void openDoorOption(){
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	0f 92       	push	r0
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
	uint8 pass = CheckPass();
    160c:	0e 94 1b 09 	call	0x1236	; 0x1236 <CheckPass>
    1610:	89 83       	std	Y+1, r24	; 0x01
	if(pass== UART_matchPass){
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	82 30       	cpi	r24, 0x02	; 2
    1616:	b9 f4       	brne	.+46     	; 0x1646 <openDoorOption+0x44>
		g_tick=0;
    1618:	10 92 3f 01 	sts	0x013F, r1
		motorFlag = 0 ;
    161c:	10 92 26 01 	sts	0x0126, r1
		UART_sendByte(UART_Motor);
    1620:	82 e1       	ldi	r24, 0x12	; 18
    1622:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <UART_sendByte>
		TIMER1_COMP_setCallBack(Timer1_15Sec);
    1626:	82 e8       	ldi	r24, 0x82	; 130
    1628:	9a e0       	ldi	r25, 0x0A	; 10
    162a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <TIMER1_COMP_setCallBack>
		LCD_displayStringRowColumn(0, 0, "Door Unlocking");
    162e:	2e ef       	ldi	r18, 0xFE	; 254
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	a9 01       	movw	r20, r18
    1638:	0e 94 95 18 	call	0x312a	; 0x312a <LCD_displayStringRowColumn>
		while(motorFlag!=1){};
    163c:	80 91 26 01 	lds	r24, 0x0126
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	e1 f7       	brne	.-8      	; 0x163c <openDoorOption+0x3a>
    1644:	02 c0       	rjmp	.+4      	; 0x164a <openDoorOption+0x48>
	}
	else errorAlarm();
    1646:	0e 94 ce 0a 	call	0x159c	; 0x159c <errorAlarm>
}
    164a:	0f 90       	pop	r0
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	08 95       	ret

00001652 <main>:
#include"HMI_MainFunc.h"
#include "USART.h"

USART_Config uartIntialization = {Disabled,Size8,Asynchronous,oneBit,BaudRate9600};

int main(void){
    1652:	df 93       	push	r29
    1654:	cf 93       	push	r28
    1656:	00 d0       	rcall	.+0      	; 0x1658 <main+0x6>
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
	uint8 key ;
	SREG|=(1<<7);
    165c:	af e5       	ldi	r26, 0x5F	; 95
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	ef e5       	ldi	r30, 0x5F	; 95
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	80 68       	ori	r24, 0x80	; 128
    1668:	8c 93       	st	X, r24
	UART_init(&uartIntialization);
    166a:	8c e1       	ldi	r24, 0x1C	; 28
    166c:	91 e0       	ldi	r25, 0x01	; 1
    166e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <UART_init>
	LCD_init();
    1672:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_init>
	UART_sendByte(MC_Ready);
    1676:	89 e9       	ldi	r24, 0x99	; 153
    1678:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <UART_sendByte>
	key = (UART_recieveByte());
    167c:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <UART_recieveByte>
    1680:	8a 83       	std	Y+2, r24	; 0x02
	if( key != UART_setPass){
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	11 f0       	breq	.+4      	; 0x168c <main+0x3a>
		set_pass();
    1688:	0e 94 a3 05 	call	0xb46	; 0xb46 <set_pass>
	};
	while(1){
		uint8 option;
		mainOptions();
    168c:	0e 94 49 0a 	call	0x1492	; 0x1492 <mainOptions>
		do{
			option = KEYPAD_getPressedKey();
    1690:	0e 94 ac 12 	call	0x2558	; 0x2558 <KEYPAD_getPressedKey>
    1694:	89 83       	std	Y+1, r24	; 0x01
		}while(option != '-' && option != '+');
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	8d 32       	cpi	r24, 0x2D	; 45
    169a:	19 f0       	breq	.+6      	; 0x16a2 <main+0x50>
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	8b 32       	cpi	r24, 0x2B	; 43
    16a0:	b9 f7       	brne	.-18     	; 0x1690 <main+0x3e>
		if (option == '-'){
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	8d 32       	cpi	r24, 0x2D	; 45
    16a6:	19 f4       	brne	.+6      	; 0x16ae <main+0x5c>
			openDoorOption();
    16a8:	0e 94 01 0b 	call	0x1602	; 0x1602 <openDoorOption>
    16ac:	ef cf       	rjmp	.-34     	; 0x168c <main+0x3a>
		}
		else if (option == '+'){
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	8b 32       	cpi	r24, 0x2B	; 43
    16b2:	61 f7       	brne	.-40     	; 0x168c <main+0x3a>
			changePassOption();
    16b4:	0e 94 ed 0a 	call	0x15da	; 0x15da <changePassOption>
    16b8:	e9 cf       	rjmp	.-46     	; 0x168c <main+0x3a>

000016ba <__vector_7>:
static volatile void (*g_callBackPtr2)(void) = NULL_PTR;
/*******************************************************************************
 *                             	    ISR		   		                           *
 *******************************************************************************/
ISR(TIMER1_COMPA_vect)
{
    16ba:	1f 92       	push	r1
    16bc:	0f 92       	push	r0
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	0f 92       	push	r0
    16c2:	11 24       	eor	r1, r1
    16c4:	2f 93       	push	r18
    16c6:	3f 93       	push	r19
    16c8:	4f 93       	push	r20
    16ca:	5f 93       	push	r21
    16cc:	6f 93       	push	r22
    16ce:	7f 93       	push	r23
    16d0:	8f 93       	push	r24
    16d2:	9f 93       	push	r25
    16d4:	af 93       	push	r26
    16d6:	bf 93       	push	r27
    16d8:	ef 93       	push	r30
    16da:	ff 93       	push	r31
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    16e4:	80 91 22 01 	lds	r24, 0x0122
    16e8:	90 91 23 01 	lds	r25, 0x0123
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	29 f0       	breq	.+10     	; 0x16fa <__vector_7+0x40>
	{
		(*g_callBackPtr1)();
    16f0:	e0 91 22 01 	lds	r30, 0x0122
    16f4:	f0 91 23 01 	lds	r31, 0x0123
    16f8:	09 95       	icall
	}
}
    16fa:	cf 91       	pop	r28
    16fc:	df 91       	pop	r29
    16fe:	ff 91       	pop	r31
    1700:	ef 91       	pop	r30
    1702:	bf 91       	pop	r27
    1704:	af 91       	pop	r26
    1706:	9f 91       	pop	r25
    1708:	8f 91       	pop	r24
    170a:	7f 91       	pop	r23
    170c:	6f 91       	pop	r22
    170e:	5f 91       	pop	r21
    1710:	4f 91       	pop	r20
    1712:	3f 91       	pop	r19
    1714:	2f 91       	pop	r18
    1716:	0f 90       	pop	r0
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	0f 90       	pop	r0
    171c:	1f 90       	pop	r1
    171e:	18 95       	reti

00001720 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1720:	1f 92       	push	r1
    1722:	0f 92       	push	r0
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	0f 92       	push	r0
    1728:	11 24       	eor	r1, r1
    172a:	2f 93       	push	r18
    172c:	3f 93       	push	r19
    172e:	4f 93       	push	r20
    1730:	5f 93       	push	r21
    1732:	6f 93       	push	r22
    1734:	7f 93       	push	r23
    1736:	8f 93       	push	r24
    1738:	9f 93       	push	r25
    173a:	af 93       	push	r26
    173c:	bf 93       	push	r27
    173e:	ef 93       	push	r30
    1740:	ff 93       	push	r31
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    174a:	80 91 24 01 	lds	r24, 0x0124
    174e:	90 91 25 01 	lds	r25, 0x0125
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	29 f0       	breq	.+10     	; 0x1760 <__vector_9+0x40>
	{
		(*g_callBackPtr2)();
    1756:	e0 91 24 01 	lds	r30, 0x0124
    175a:	f0 91 25 01 	lds	r31, 0x0125
    175e:	09 95       	icall
	}
}
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	ff 91       	pop	r31
    1766:	ef 91       	pop	r30
    1768:	bf 91       	pop	r27
    176a:	af 91       	pop	r26
    176c:	9f 91       	pop	r25
    176e:	8f 91       	pop	r24
    1770:	7f 91       	pop	r23
    1772:	6f 91       	pop	r22
    1774:	5f 91       	pop	r21
    1776:	4f 91       	pop	r20
    1778:	3f 91       	pop	r19
    177a:	2f 91       	pop	r18
    177c:	0f 90       	pop	r0
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	0f 90       	pop	r0
    1782:	1f 90       	pop	r1
    1784:	18 95       	reti

00001786 <Timer1_init>:
/*******************************************************************************
 *                               Functions		                               *
 *******************************************************************************/

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	00 d0       	rcall	.+0      	; 0x178c <Timer1_init+0x6>
    178c:	00 d0       	rcall	.+0      	; 0x178e <Timer1_init+0x8>
    178e:	00 d0       	rcall	.+0      	; 0x1790 <Timer1_init+0xa>
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	9a 83       	std	Y+2, r25	; 0x02
    1796:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TCCR1A,FOC1A);
    1798:	af e4       	ldi	r26, 0x4F	; 79
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	ef e4       	ldi	r30, 0x4F	; 79
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	88 60       	ori	r24, 0x08	; 8
    17a4:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B);
    17a6:	af e4       	ldi	r26, 0x4F	; 79
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	ef e4       	ldi	r30, 0x4F	; 79
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	84 60       	ori	r24, 0x04	; 4
    17b2:	8c 93       	st	X, r24
	TCNT1 = Config_Ptr->initial_value;
    17b4:	ac e4       	ldi	r26, 0x4C	; 76
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ba:	fa 81       	ldd	r31, Y+2	; 0x02
    17bc:	80 81       	ld	r24, Z
    17be:	91 81       	ldd	r25, Z+1	; 0x01
    17c0:	11 96       	adiw	r26, 0x01	; 1
    17c2:	9c 93       	st	X, r25
    17c4:	8e 93       	st	-X, r24
	switch(Config_Ptr->mode){
    17c6:	e9 81       	ldd	r30, Y+1	; 0x01
    17c8:	fa 81       	ldd	r31, Y+2	; 0x02
    17ca:	85 81       	ldd	r24, Z+5	; 0x05
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	3e 83       	std	Y+6, r19	; 0x06
    17d2:	2d 83       	std	Y+5, r18	; 0x05
    17d4:	8d 81       	ldd	r24, Y+5	; 0x05
    17d6:	9e 81       	ldd	r25, Y+6	; 0x06
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	61 f1       	breq	.+88     	; 0x1834 <Timer1_init+0xae>
    17dc:	2d 81       	ldd	r18, Y+5	; 0x05
    17de:	3e 81       	ldd	r19, Y+6	; 0x06
    17e0:	21 30       	cpi	r18, 0x01	; 1
    17e2:	31 05       	cpc	r19, r1
    17e4:	09 f0       	breq	.+2      	; 0x17e8 <Timer1_init+0x62>
    17e6:	42 c0       	rjmp	.+132    	; 0x186c <Timer1_init+0xe6>
	case(Compare):
			CLEAR_BIT(TCCR1A,WGM10);
    17e8:	af e4       	ldi	r26, 0x4F	; 79
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	ef e4       	ldi	r30, 0x4F	; 79
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	8e 7f       	andi	r24, 0xFE	; 254
    17f4:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM11);
    17f6:	af e4       	ldi	r26, 0x4F	; 79
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	ef e4       	ldi	r30, 0x4F	; 79
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	8d 7f       	andi	r24, 0xFD	; 253
    1802:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM12);
    1804:	ae e4       	ldi	r26, 0x4E	; 78
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	ee e4       	ldi	r30, 0x4E	; 78
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	88 60       	ori	r24, 0x08	; 8
    1810:	8c 93       	st	X, r24
			OCR1A = Config_Ptr->compare_value;
    1812:	aa e4       	ldi	r26, 0x4A	; 74
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e9 81       	ldd	r30, Y+1	; 0x01
    1818:	fa 81       	ldd	r31, Y+2	; 0x02
    181a:	82 81       	ldd	r24, Z+2	; 0x02
    181c:	93 81       	ldd	r25, Z+3	; 0x03
    181e:	11 96       	adiw	r26, 0x01	; 1
    1820:	9c 93       	st	X, r25
    1822:	8e 93       	st	-X, r24
			SET_BIT(TIMSK,OCIE1A);
    1824:	a9 e5       	ldi	r26, 0x59	; 89
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e9 e5       	ldi	r30, 0x59	; 89
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	80 61       	ori	r24, 0x10	; 16
    1830:	8c 93       	st	X, r24
    1832:	1c c0       	rjmp	.+56     	; 0x186c <Timer1_init+0xe6>
			break;
	case(Normal):
			CLEAR_BIT(TCCR1A,WGM10);
    1834:	af e4       	ldi	r26, 0x4F	; 79
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	ef e4       	ldi	r30, 0x4F	; 79
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	8e 7f       	andi	r24, 0xFE	; 254
    1840:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM11);
    1842:	af e4       	ldi	r26, 0x4F	; 79
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	ef e4       	ldi	r30, 0x4F	; 79
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	8d 7f       	andi	r24, 0xFD	; 253
    184e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM12);
    1850:	ae e4       	ldi	r26, 0x4E	; 78
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	ee e4       	ldi	r30, 0x4E	; 78
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	87 7f       	andi	r24, 0xF7	; 247
    185c:	8c 93       	st	X, r24
			SET_BIT(TIMSK,TOIE1);
    185e:	a9 e5       	ldi	r26, 0x59	; 89
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e9 e5       	ldi	r30, 0x59	; 89
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	84 60       	ori	r24, 0x04	; 4
    186a:	8c 93       	st	X, r24
			break;
	}
	switch(Config_Ptr->prescaler){
    186c:	e9 81       	ldd	r30, Y+1	; 0x01
    186e:	fa 81       	ldd	r31, Y+2	; 0x02
    1870:	84 81       	ldd	r24, Z+4	; 0x04
    1872:	28 2f       	mov	r18, r24
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	3c 83       	std	Y+4, r19	; 0x04
    1878:	2b 83       	std	Y+3, r18	; 0x03
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	9c 81       	ldd	r25, Y+4	; 0x04
    187e:	82 30       	cpi	r24, 0x02	; 2
    1880:	91 05       	cpc	r25, r1
    1882:	09 f4       	brne	.+2      	; 0x1886 <Timer1_init+0x100>
    1884:	48 c0       	rjmp	.+144    	; 0x1916 <Timer1_init+0x190>
    1886:	2b 81       	ldd	r18, Y+3	; 0x03
    1888:	3c 81       	ldd	r19, Y+4	; 0x04
    188a:	23 30       	cpi	r18, 0x03	; 3
    188c:	31 05       	cpc	r19, r1
    188e:	54 f4       	brge	.+20     	; 0x18a4 <Timer1_init+0x11e>
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	99 f0       	breq	.+38     	; 0x18be <Timer1_init+0x138>
    1898:	2b 81       	ldd	r18, Y+3	; 0x03
    189a:	3c 81       	ldd	r19, Y+4	; 0x04
    189c:	21 30       	cpi	r18, 0x01	; 1
    189e:	31 05       	cpc	r19, r1
    18a0:	21 f1       	breq	.+72     	; 0x18ea <Timer1_init+0x164>
    18a2:	7a c0       	rjmp	.+244    	; 0x1998 <Timer1_init+0x212>
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	9c 81       	ldd	r25, Y+4	; 0x04
    18a8:	83 30       	cpi	r24, 0x03	; 3
    18aa:	91 05       	cpc	r25, r1
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <Timer1_init+0x12a>
    18ae:	49 c0       	rjmp	.+146    	; 0x1942 <Timer1_init+0x1bc>
    18b0:	2b 81       	ldd	r18, Y+3	; 0x03
    18b2:	3c 81       	ldd	r19, Y+4	; 0x04
    18b4:	24 30       	cpi	r18, 0x04	; 4
    18b6:	31 05       	cpc	r19, r1
    18b8:	09 f4       	brne	.+2      	; 0x18bc <Timer1_init+0x136>
    18ba:	59 c0       	rjmp	.+178    	; 0x196e <Timer1_init+0x1e8>
    18bc:	6d c0       	rjmp	.+218    	; 0x1998 <Timer1_init+0x212>
	case(Prescaler1):
		SET_BIT(TCCR1B,CS10);
    18be:	ae e4       	ldi	r26, 0x4E	; 78
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	ee e4       	ldi	r30, 0x4E	; 78
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	81 60       	ori	r24, 0x01	; 1
    18ca:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS11);
    18cc:	ae e4       	ldi	r26, 0x4E	; 78
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	ee e4       	ldi	r30, 0x4E	; 78
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	8d 7f       	andi	r24, 0xFD	; 253
    18d8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS12);
    18da:	ae e4       	ldi	r26, 0x4E	; 78
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	ee e4       	ldi	r30, 0x4E	; 78
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	8b 7f       	andi	r24, 0xFB	; 251
    18e6:	8c 93       	st	X, r24
    18e8:	57 c0       	rjmp	.+174    	; 0x1998 <Timer1_init+0x212>
		break;
	case(Prescaler8):
		CLEAR_BIT(TCCR1B,CS10);
    18ea:	ae e4       	ldi	r26, 0x4E	; 78
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	ee e4       	ldi	r30, 0x4E	; 78
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	8e 7f       	andi	r24, 0xFE	; 254
    18f6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS11);
    18f8:	ae e4       	ldi	r26, 0x4E	; 78
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	ee e4       	ldi	r30, 0x4E	; 78
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	82 60       	ori	r24, 0x02	; 2
    1904:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS12);
    1906:	ae e4       	ldi	r26, 0x4E	; 78
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	ee e4       	ldi	r30, 0x4E	; 78
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	8b 7f       	andi	r24, 0xFB	; 251
    1912:	8c 93       	st	X, r24
    1914:	41 c0       	rjmp	.+130    	; 0x1998 <Timer1_init+0x212>
		break;
	case(Prescaler64):
		SET_BIT(TCCR1B,CS10);
    1916:	ae e4       	ldi	r26, 0x4E	; 78
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	ee e4       	ldi	r30, 0x4E	; 78
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	81 60       	ori	r24, 0x01	; 1
    1922:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS11);
    1924:	ae e4       	ldi	r26, 0x4E	; 78
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	ee e4       	ldi	r30, 0x4E	; 78
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	82 60       	ori	r24, 0x02	; 2
    1930:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS12);
    1932:	ae e4       	ldi	r26, 0x4E	; 78
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	ee e4       	ldi	r30, 0x4E	; 78
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	8b 7f       	andi	r24, 0xFB	; 251
    193e:	8c 93       	st	X, r24
    1940:	2b c0       	rjmp	.+86     	; 0x1998 <Timer1_init+0x212>
		break;
	case(Prescaler256):
		CLEAR_BIT(TCCR1B,CS10);
    1942:	ae e4       	ldi	r26, 0x4E	; 78
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	ee e4       	ldi	r30, 0x4E	; 78
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	8e 7f       	andi	r24, 0xFE	; 254
    194e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS11);
    1950:	ae e4       	ldi	r26, 0x4E	; 78
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	ee e4       	ldi	r30, 0x4E	; 78
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	8d 7f       	andi	r24, 0xFD	; 253
    195c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS12);
    195e:	ae e4       	ldi	r26, 0x4E	; 78
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	ee e4       	ldi	r30, 0x4E	; 78
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	84 60       	ori	r24, 0x04	; 4
    196a:	8c 93       	st	X, r24
    196c:	15 c0       	rjmp	.+42     	; 0x1998 <Timer1_init+0x212>
		break;
	case(Prescaler1024):
		SET_BIT(TCCR1B,CS10);
    196e:	ae e4       	ldi	r26, 0x4E	; 78
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	ee e4       	ldi	r30, 0x4E	; 78
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	81 60       	ori	r24, 0x01	; 1
    197a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS11);
    197c:	ae e4       	ldi	r26, 0x4E	; 78
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	ee e4       	ldi	r30, 0x4E	; 78
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	8d 7f       	andi	r24, 0xFD	; 253
    1988:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS12);
    198a:	ae e4       	ldi	r26, 0x4E	; 78
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	ee e4       	ldi	r30, 0x4E	; 78
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	84 60       	ori	r24, 0x04	; 4
    1996:	8c 93       	st	X, r24
		break;
	}
}
    1998:	26 96       	adiw	r28, 0x06	; 6
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <Timer1_deInit>:
void Timer1_deInit(void){
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR1B,CS10);
    19b2:	ae e4       	ldi	r26, 0x4E	; 78
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	ee e4       	ldi	r30, 0x4E	; 78
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	8e 7f       	andi	r24, 0xFE	; 254
    19be:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS11);
    19c0:	ae e4       	ldi	r26, 0x4E	; 78
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	ee e4       	ldi	r30, 0x4E	; 78
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	8d 7f       	andi	r24, 0xFD	; 253
    19cc:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS12);
    19ce:	ae e4       	ldi	r26, 0x4E	; 78
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	ee e4       	ldi	r30, 0x4E	; 78
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	8b 7f       	andi	r24, 0xFB	; 251
    19da:	8c 93       	st	X, r24
}
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <TIMER1_COMP_setCallBack>:
void TIMER1_COMP_setCallBack( void(*a_ptr)(void) )
{
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <TIMER1_COMP_setCallBack+0x6>
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	9a 83       	std	Y+2, r25	; 0x02
    19ee:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr1 = a_ptr;
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	9a 81       	ldd	r25, Y+2	; 0x02
    19f4:	90 93 23 01 	sts	0x0123, r25
    19f8:	80 93 22 01 	sts	0x0122, r24
}
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <TIMER1_OVF_setCallBack>:

void TIMER1_OVF_setCallBack( void(*a_ptr)(void) )
{
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <TIMER1_OVF_setCallBack+0x6>
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	9a 83       	std	Y+2, r25	; 0x02
    1a12:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr2 = a_ptr;
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	90 93 25 01 	sts	0x0125, r25
    1a1c:	80 93 24 01 	sts	0x0124, r24
}
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const USART_Config * Config_Ptr)
{
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	2e 97       	sbiw	r28, 0x0e	; 14
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	f8 94       	cli
    1a38:	de bf       	out	0x3e, r29	; 62
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	cd bf       	out	0x3d, r28	; 61
    1a3e:	9c 83       	std	Y+4, r25	; 0x04
    1a40:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1a42:	1a 82       	std	Y+2, r1	; 0x02
    1a44:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	SET_BIT(UCSRA,U2X);
    1a46:	ab e2       	ldi	r26, 0x2B	; 43
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	eb e2       	ldi	r30, 0x2B	; 43
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	82 60       	ori	r24, 0x02	; 2
    1a52:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	SET_BIT(UCSRB,RXEN);
    1a54:	aa e2       	ldi	r26, 0x2A	; 42
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	ea e2       	ldi	r30, 0x2A	; 42
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	80 61       	ori	r24, 0x10	; 16
    1a60:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    1a62:	aa e2       	ldi	r26, 0x2A	; 42
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	ea e2       	ldi	r30, 0x2A	; 42
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	88 60       	ori	r24, 0x08	; 8
    1a6e:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	SET_BIT(UCSRB,URSEL);
    1a70:	aa e2       	ldi	r26, 0x2A	; 42
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	ea e2       	ldi	r30, 0x2A	; 42
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	80 68       	ori	r24, 0x80	; 128
    1a7c:	8c 93       	st	X, r24

	switch(Config_Ptr->parity){
    1a7e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a80:	fc 81       	ldd	r31, Y+4	; 0x04
    1a82:	80 81       	ld	r24, Z
    1a84:	28 2f       	mov	r18, r24
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	3e 87       	std	Y+14, r19	; 0x0e
    1a8a:	2d 87       	std	Y+13, r18	; 0x0d
    1a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a90:	81 30       	cpi	r24, 0x01	; 1
    1a92:	91 05       	cpc	r25, r1
    1a94:	c1 f0       	breq	.+48     	; 0x1ac6 <UART_init+0x9c>
    1a96:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a98:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a9a:	22 30       	cpi	r18, 0x02	; 2
    1a9c:	31 05       	cpc	r19, r1
    1a9e:	11 f1       	breq	.+68     	; 0x1ae4 <UART_init+0xba>
    1aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	61 f5       	brne	.+88     	; 0x1b00 <UART_init+0xd6>
	case (Disabled) :
		CLEAR_BIT(UCSRC,UPM0);
    1aa8:	a0 e4       	ldi	r26, 0x40	; 64
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e0 e4       	ldi	r30, 0x40	; 64
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	8f 7e       	andi	r24, 0xEF	; 239
    1ab4:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UPM1);
    1ab6:	a0 e4       	ldi	r26, 0x40	; 64
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e0 e4       	ldi	r30, 0x40	; 64
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	8f 7d       	andi	r24, 0xDF	; 223
    1ac2:	8c 93       	st	X, r24
    1ac4:	1d c0       	rjmp	.+58     	; 0x1b00 <UART_init+0xd6>
		break;
	case (Enabled_oddParity):
		SET_BIT(UCSRC,UPM0);
    1ac6:	a0 e4       	ldi	r26, 0x40	; 64
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e0 e4       	ldi	r30, 0x40	; 64
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	80 61       	ori	r24, 0x10	; 16
    1ad2:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UPM1);
    1ad4:	a0 e4       	ldi	r26, 0x40	; 64
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e0 e4       	ldi	r30, 0x40	; 64
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	8f 7d       	andi	r24, 0xDF	; 223
    1ae0:	8c 93       	st	X, r24
    1ae2:	0e c0       	rjmp	.+28     	; 0x1b00 <UART_init+0xd6>
		break;
	case (Enabled_evenParity):
		CLEAR_BIT(UCSRC,UPM0);
    1ae4:	a0 e4       	ldi	r26, 0x40	; 64
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e0 e4       	ldi	r30, 0x40	; 64
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	8f 7e       	andi	r24, 0xEF	; 239
    1af0:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UPM1);
    1af2:	a0 e4       	ldi	r26, 0x40	; 64
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e0 e4       	ldi	r30, 0x40	; 64
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	80 62       	ori	r24, 0x20	; 32
    1afe:	8c 93       	st	X, r24
		break;
	}
	switch(Config_Ptr->stop){
    1b00:	eb 81       	ldd	r30, Y+3	; 0x03
    1b02:	fc 81       	ldd	r31, Y+4	; 0x04
    1b04:	83 81       	ldd	r24, Z+3	; 0x03
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	3c 87       	std	Y+12, r19	; 0x0c
    1b0c:	2b 87       	std	Y+11, r18	; 0x0b
    1b0e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b10:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	31 f0       	breq	.+12     	; 0x1b22 <UART_init+0xf8>
    1b16:	2b 85       	ldd	r18, Y+11	; 0x0b
    1b18:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b1a:	21 30       	cpi	r18, 0x01	; 1
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	49 f0       	breq	.+18     	; 0x1b32 <UART_init+0x108>
    1b20:	0f c0       	rjmp	.+30     	; 0x1b40 <UART_init+0x116>
		case (oneBit) :
			CLEAR_BIT(UCSRC,USBS);
    1b22:	a0 e4       	ldi	r26, 0x40	; 64
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e0 e4       	ldi	r30, 0x40	; 64
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	87 7f       	andi	r24, 0xF7	; 247
    1b2e:	8c 93       	st	X, r24
    1b30:	07 c0       	rjmp	.+14     	; 0x1b40 <UART_init+0x116>
			break;
		case (twoBit):
			SET_BIT(UCSRC,USBS);
    1b32:	a0 e4       	ldi	r26, 0x40	; 64
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e0 e4       	ldi	r30, 0x40	; 64
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	88 60       	ori	r24, 0x08	; 8
    1b3e:	8c 93       	st	X, r24
			break;
		}
	switch(Config_Ptr->ch){
    1b40:	eb 81       	ldd	r30, Y+3	; 0x03
    1b42:	fc 81       	ldd	r31, Y+4	; 0x04
    1b44:	81 81       	ldd	r24, Z+1	; 0x01
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	3a 87       	std	Y+10, r19	; 0x0a
    1b4c:	29 87       	std	Y+9, r18	; 0x09
    1b4e:	89 85       	ldd	r24, Y+9	; 0x09
    1b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b52:	82 30       	cpi	r24, 0x02	; 2
    1b54:	91 05       	cpc	r25, r1
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <UART_init+0x130>
    1b58:	48 c0       	rjmp	.+144    	; 0x1bea <UART_init+0x1c0>
    1b5a:	29 85       	ldd	r18, Y+9	; 0x09
    1b5c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b5e:	23 30       	cpi	r18, 0x03	; 3
    1b60:	31 05       	cpc	r19, r1
    1b62:	54 f4       	brge	.+20     	; 0x1b78 <UART_init+0x14e>
    1b64:	89 85       	ldd	r24, Y+9	; 0x09
    1b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	99 f0       	breq	.+38     	; 0x1b92 <UART_init+0x168>
    1b6c:	29 85       	ldd	r18, Y+9	; 0x09
    1b6e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b70:	21 30       	cpi	r18, 0x01	; 1
    1b72:	31 05       	cpc	r19, r1
    1b74:	21 f1       	breq	.+72     	; 0x1bbe <UART_init+0x194>
    1b76:	7a c0       	rjmp	.+244    	; 0x1c6c <UART_init+0x242>
    1b78:	89 85       	ldd	r24, Y+9	; 0x09
    1b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7c:	83 30       	cpi	r24, 0x03	; 3
    1b7e:	91 05       	cpc	r25, r1
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <UART_init+0x15a>
    1b82:	49 c0       	rjmp	.+146    	; 0x1c16 <UART_init+0x1ec>
    1b84:	29 85       	ldd	r18, Y+9	; 0x09
    1b86:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b88:	24 30       	cpi	r18, 0x04	; 4
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <UART_init+0x166>
    1b8e:	59 c0       	rjmp	.+178    	; 0x1c42 <UART_init+0x218>
    1b90:	6d c0       	rjmp	.+218    	; 0x1c6c <UART_init+0x242>
		case(Size5) :
			CLEAR_BIT(UCSRC,UCSZ0);
    1b92:	a0 e4       	ldi	r26, 0x40	; 64
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	e0 e4       	ldi	r30, 0x40	; 64
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	8d 7f       	andi	r24, 0xFD	; 253
    1b9e:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC,UCSZ1);
    1ba0:	a0 e4       	ldi	r26, 0x40	; 64
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e0 e4       	ldi	r30, 0x40	; 64
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	8b 7f       	andi	r24, 0xFB	; 251
    1bac:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC,UCSZ2);
    1bae:	a0 e4       	ldi	r26, 0x40	; 64
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	e0 e4       	ldi	r30, 0x40	; 64
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	8b 7f       	andi	r24, 0xFB	; 251
    1bba:	8c 93       	st	X, r24
    1bbc:	57 c0       	rjmp	.+174    	; 0x1c6c <UART_init+0x242>
			break;
		case(Size6) :
			SET_BIT(UCSRC,UCSZ0);
    1bbe:	a0 e4       	ldi	r26, 0x40	; 64
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e0 e4       	ldi	r30, 0x40	; 64
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	82 60       	ori	r24, 0x02	; 2
    1bca:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC,UCSZ1);
    1bcc:	a0 e4       	ldi	r26, 0x40	; 64
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e0 e4       	ldi	r30, 0x40	; 64
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	8b 7f       	andi	r24, 0xFB	; 251
    1bd8:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC,UCSZ2);
    1bda:	a0 e4       	ldi	r26, 0x40	; 64
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e0 e4       	ldi	r30, 0x40	; 64
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	8b 7f       	andi	r24, 0xFB	; 251
    1be6:	8c 93       	st	X, r24
    1be8:	41 c0       	rjmp	.+130    	; 0x1c6c <UART_init+0x242>
			break;
		case(Size7) :
			CLEAR_BIT(UCSRC,UCSZ0);
    1bea:	a0 e4       	ldi	r26, 0x40	; 64
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e0 e4       	ldi	r30, 0x40	; 64
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	8d 7f       	andi	r24, 0xFD	; 253
    1bf6:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ1);
    1bf8:	a0 e4       	ldi	r26, 0x40	; 64
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	e0 e4       	ldi	r30, 0x40	; 64
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	84 60       	ori	r24, 0x04	; 4
    1c04:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC,UCSZ2);
    1c06:	a0 e4       	ldi	r26, 0x40	; 64
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e0 e4       	ldi	r30, 0x40	; 64
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	8b 7f       	andi	r24, 0xFB	; 251
    1c12:	8c 93       	st	X, r24
    1c14:	2b c0       	rjmp	.+86     	; 0x1c6c <UART_init+0x242>
			break;
		case(Size8) :
			SET_BIT(UCSRC,UCSZ0);
    1c16:	a0 e4       	ldi	r26, 0x40	; 64
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e0 e4       	ldi	r30, 0x40	; 64
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	82 60       	ori	r24, 0x02	; 2
    1c22:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ1);
    1c24:	a0 e4       	ldi	r26, 0x40	; 64
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e0 e4       	ldi	r30, 0x40	; 64
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	84 60       	ori	r24, 0x04	; 4
    1c30:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC,UCSZ2);
    1c32:	a0 e4       	ldi	r26, 0x40	; 64
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e0 e4       	ldi	r30, 0x40	; 64
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	8b 7f       	andi	r24, 0xFB	; 251
    1c3e:	8c 93       	st	X, r24
    1c40:	15 c0       	rjmp	.+42     	; 0x1c6c <UART_init+0x242>
			break;
		case(Size9) :
			SET_BIT(UCSRC,UCSZ0);
    1c42:	a0 e4       	ldi	r26, 0x40	; 64
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e0 e4       	ldi	r30, 0x40	; 64
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	82 60       	ori	r24, 0x02	; 2
    1c4e:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ1);
    1c50:	a0 e4       	ldi	r26, 0x40	; 64
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e0 e4       	ldi	r30, 0x40	; 64
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	84 60       	ori	r24, 0x04	; 4
    1c5c:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ2);
    1c5e:	a0 e4       	ldi	r26, 0x40	; 64
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e0 e4       	ldi	r30, 0x40	; 64
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	84 60       	ori	r24, 0x04	; 4
    1c6a:	8c 93       	st	X, r24
			break;
	}
	switch(Config_Ptr->mode){
    1c6c:	eb 81       	ldd	r30, Y+3	; 0x03
    1c6e:	fc 81       	ldd	r31, Y+4	; 0x04
    1c70:	82 81       	ldd	r24, Z+2	; 0x02
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	38 87       	std	Y+8, r19	; 0x08
    1c78:	2f 83       	std	Y+7, r18	; 0x07
    1c7a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c7c:	98 85       	ldd	r25, Y+8	; 0x08
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	31 f0       	breq	.+12     	; 0x1c8e <UART_init+0x264>
    1c82:	2f 81       	ldd	r18, Y+7	; 0x07
    1c84:	38 85       	ldd	r19, Y+8	; 0x08
    1c86:	21 30       	cpi	r18, 0x01	; 1
    1c88:	31 05       	cpc	r19, r1
    1c8a:	49 f0       	breq	.+18     	; 0x1c9e <UART_init+0x274>
    1c8c:	0f c0       	rjmp	.+30     	; 0x1cac <UART_init+0x282>
		case(Synchronous):
			SET_BIT(UCSRC,UMSEL);
    1c8e:	a0 e4       	ldi	r26, 0x40	; 64
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e0 e4       	ldi	r30, 0x40	; 64
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	80 64       	ori	r24, 0x40	; 64
    1c9a:	8c 93       	st	X, r24
    1c9c:	07 c0       	rjmp	.+14     	; 0x1cac <UART_init+0x282>
			break;
		case(Asynchronous):
			CLEAR_BIT(UCSRC,UMSEL);
    1c9e:	a0 e4       	ldi	r26, 0x40	; 64
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e0 e4       	ldi	r30, 0x40	; 64
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	8f 7b       	andi	r24, 0xBF	; 191
    1caa:	8c 93       	st	X, r24
			break;
	}
	switch(Config_Ptr->rate){
    1cac:	eb 81       	ldd	r30, Y+3	; 0x03
    1cae:	fc 81       	ldd	r31, Y+4	; 0x04
    1cb0:	84 81       	ldd	r24, Z+4	; 0x04
    1cb2:	95 81       	ldd	r25, Z+5	; 0x05
    1cb4:	9e 83       	std	Y+6, r25	; 0x06
    1cb6:	8d 83       	std	Y+5, r24	; 0x05
    1cb8:	2d 81       	ldd	r18, Y+5	; 0x05
    1cba:	3e 81       	ldd	r19, Y+6	; 0x06
    1cbc:	85 e2       	ldi	r24, 0x25	; 37
    1cbe:	20 38       	cpi	r18, 0x80	; 128
    1cc0:	38 07       	cpc	r19, r24
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <UART_init+0x29c>
    1cc4:	41 c0       	rjmp	.+130    	; 0x1d48 <UART_init+0x31e>
    1cc6:	2d 81       	ldd	r18, Y+5	; 0x05
    1cc8:	3e 81       	ldd	r19, Y+6	; 0x06
    1cca:	85 e2       	ldi	r24, 0x25	; 37
    1ccc:	21 38       	cpi	r18, 0x81	; 129
    1cce:	38 07       	cpc	r19, r24
    1cd0:	68 f4       	brcc	.+26     	; 0x1cec <UART_init+0x2c2>
    1cd2:	2d 81       	ldd	r18, Y+5	; 0x05
    1cd4:	3e 81       	ldd	r19, Y+6	; 0x06
    1cd6:	89 e0       	ldi	r24, 0x09	; 9
    1cd8:	20 36       	cpi	r18, 0x60	; 96
    1cda:	38 07       	cpc	r19, r24
    1cdc:	a9 f0       	breq	.+42     	; 0x1d08 <UART_init+0x2de>
    1cde:	2d 81       	ldd	r18, Y+5	; 0x05
    1ce0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ce2:	82 e1       	ldi	r24, 0x12	; 18
    1ce4:	20 3c       	cpi	r18, 0xC0	; 192
    1ce6:	38 07       	cpc	r19, r24
    1ce8:	f9 f0       	breq	.+62     	; 0x1d28 <UART_init+0x2fe>
    1cea:	5d c0       	rjmp	.+186    	; 0x1da6 <UART_init+0x37c>
    1cec:	2d 81       	ldd	r18, Y+5	; 0x05
    1cee:	3e 81       	ldd	r19, Y+6	; 0x06
    1cf0:	88 e3       	ldi	r24, 0x38	; 56
    1cf2:	20 34       	cpi	r18, 0x40	; 64
    1cf4:	38 07       	cpc	r19, r24
    1cf6:	c1 f1       	breq	.+112    	; 0x1d68 <UART_init+0x33e>
    1cf8:	2d 81       	ldd	r18, Y+5	; 0x05
    1cfa:	3e 81       	ldd	r19, Y+6	; 0x06
    1cfc:	8b e4       	ldi	r24, 0x4B	; 75
    1cfe:	20 30       	cpi	r18, 0x00	; 0
    1d00:	38 07       	cpc	r19, r24
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <UART_init+0x2dc>
    1d04:	41 c0       	rjmp	.+130    	; 0x1d88 <UART_init+0x35e>
    1d06:	4f c0       	rjmp	.+158    	; 0x1da6 <UART_init+0x37c>
	case(BaudRate2400):
			ubrr_value = (uint16)(((F_CPU / (BaudRate2400 * 8UL))) - 1);
    1d08:	8f e9       	ldi	r24, 0x9F	; 159
    1d0a:	91 e0       	ldi	r25, 0x01	; 1
    1d0c:	9a 83       	std	Y+2, r25	; 0x02
    1d0e:	89 83       	std	Y+1, r24	; 0x01
			UBRRH = ubrr_value>>8;
    1d10:	e0 e4       	ldi	r30, 0x40	; 64
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	9a 81       	ldd	r25, Y+2	; 0x02
    1d18:	89 2f       	mov	r24, r25
    1d1a:	99 27       	eor	r25, r25
    1d1c:	80 83       	st	Z, r24
			UBRRL = ubrr_value;
    1d1e:	e9 e2       	ldi	r30, 0x29	; 41
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	80 83       	st	Z, r24
    1d26:	3f c0       	rjmp	.+126    	; 0x1da6 <UART_init+0x37c>
			break;
	case(BaudRate4800):
			ubrr_value = (uint16)(((F_CPU / (BaudRate4800 * 8UL))) - 1);
    1d28:	8f ec       	ldi	r24, 0xCF	; 207
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	9a 83       	std	Y+2, r25	; 0x02
    1d2e:	89 83       	std	Y+1, r24	; 0x01
			UBRRH = ubrr_value>>8;
    1d30:	e0 e4       	ldi	r30, 0x40	; 64
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	89 2f       	mov	r24, r25
    1d3a:	99 27       	eor	r25, r25
    1d3c:	80 83       	st	Z, r24
			UBRRL = ubrr_value;
    1d3e:	e9 e2       	ldi	r30, 0x29	; 41
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	80 83       	st	Z, r24
    1d46:	2f c0       	rjmp	.+94     	; 0x1da6 <UART_init+0x37c>
			break;
	case(BaudRate9600):
			ubrr_value = (uint16)(((F_CPU / (BaudRate9600 * 8UL))) - 1);
    1d48:	87 e6       	ldi	r24, 0x67	; 103
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
    1d4e:	89 83       	std	Y+1, r24	; 0x01
			UBRRH = ubrr_value>>8;
    1d50:	e0 e4       	ldi	r30, 0x40	; 64
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	9a 81       	ldd	r25, Y+2	; 0x02
    1d58:	89 2f       	mov	r24, r25
    1d5a:	99 27       	eor	r25, r25
    1d5c:	80 83       	st	Z, r24
			UBRRL = ubrr_value;
    1d5e:	e9 e2       	ldi	r30, 0x29	; 41
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	80 83       	st	Z, r24
    1d66:	1f c0       	rjmp	.+62     	; 0x1da6 <UART_init+0x37c>
			break;
	case(BaudRate14400):
			ubrr_value = (uint16)(((F_CPU / (BaudRate9600 * 8UL))) - 1);
    1d68:	87 e6       	ldi	r24, 0x67	; 103
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	9a 83       	std	Y+2, r25	; 0x02
    1d6e:	89 83       	std	Y+1, r24	; 0x01
			UBRRH = ubrr_value>>8;
    1d70:	e0 e4       	ldi	r30, 0x40	; 64
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	9a 81       	ldd	r25, Y+2	; 0x02
    1d78:	89 2f       	mov	r24, r25
    1d7a:	99 27       	eor	r25, r25
    1d7c:	80 83       	st	Z, r24
			UBRRL = ubrr_value;
    1d7e:	e9 e2       	ldi	r30, 0x29	; 41
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	80 83       	st	Z, r24
    1d86:	0f c0       	rjmp	.+30     	; 0x1da6 <UART_init+0x37c>
			break;
	case(BaudRate19200):
			ubrr_value = (uint16)(((F_CPU / (BaudRate19200 * 8UL))) - 1);
    1d88:	83 e3       	ldi	r24, 0x33	; 51
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	89 83       	std	Y+1, r24	; 0x01
			UBRRH = ubrr_value>>8;
    1d90:	e0 e4       	ldi	r30, 0x40	; 64
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	9a 81       	ldd	r25, Y+2	; 0x02
    1d98:	89 2f       	mov	r24, r25
    1d9a:	99 27       	eor	r25, r25
    1d9c:	80 83       	st	Z, r24
			UBRRL = ubrr_value;
    1d9e:	e9 e2       	ldi	r30, 0x29	; 41
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	80 83       	st	Z, r24
			break;
	}

}
    1da6:	2e 96       	adiw	r28, 0x0e	; 14
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	0f 92       	push	r0
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1dc4:	eb e2       	ldi	r30, 0x2B	; 43
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	88 2f       	mov	r24, r24
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	80 72       	andi	r24, 0x20	; 32
    1dd0:	90 70       	andi	r25, 0x00	; 0
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	b9 f3       	breq	.-18     	; 0x1dc4 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1dd6:	ec e2       	ldi	r30, 0x2C	; 44
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1dde:	0f 90       	pop	r0
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret

00001de6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1dee:	eb e2       	ldi	r30, 0x2B	; 43
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	88 23       	and	r24, r24
    1df6:	dc f7       	brge	.-10     	; 0x1dee <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    1df8:	ec e2       	ldi	r30, 0x2C	; 44
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
}
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <UART_sendString+0x6>
    1e0a:	0f 92       	push	r0
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	9b 83       	std	Y+3, r25	; 0x03
    1e12:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e14:	19 82       	std	Y+1, r1	; 0x01
    1e16:	0e c0       	rjmp	.+28     	; 0x1e34 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	9b 81       	ldd	r25, Y+3	; 0x03
    1e22:	fc 01       	movw	r30, r24
    1e24:	e2 0f       	add	r30, r18
    1e26:	f3 1f       	adc	r31, r19
    1e28:	80 81       	ld	r24, Z
    1e2a:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <UART_sendByte>
		i++;
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	8f 5f       	subi	r24, 0xFF	; 255
    1e32:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3e:	fc 01       	movw	r30, r24
    1e40:	e2 0f       	add	r30, r18
    1e42:	f3 1f       	adc	r31, r19
    1e44:	80 81       	ld	r24, Z
    1e46:	88 23       	and	r24, r24
    1e48:	39 f7       	brne	.-50     	; 0x1e18 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	08 95       	ret

00001e56 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1e56:	0f 93       	push	r16
    1e58:	1f 93       	push	r17
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <UART_receiveString+0xa>
    1e60:	0f 92       	push	r0
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	9b 83       	std	Y+3, r25	; 0x03
    1e68:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e6a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	9b 81       	ldd	r25, Y+3	; 0x03
    1e76:	8c 01       	movw	r16, r24
    1e78:	02 0f       	add	r16, r18
    1e7a:	13 1f       	adc	r17, r19
    1e7c:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <UART_recieveByte>
    1e80:	f8 01       	movw	r30, r16
    1e82:	80 83       	st	Z, r24
    1e84:	0f c0       	rjmp	.+30     	; 0x1ea4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	8f 5f       	subi	r24, 0xFF	; 255
    1e8a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	9b 81       	ldd	r25, Y+3	; 0x03
    1e96:	8c 01       	movw	r16, r24
    1e98:	02 0f       	add	r16, r18
    1e9a:	13 1f       	adc	r17, r19
    1e9c:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <UART_recieveByte>
    1ea0:	f8 01       	movw	r30, r16
    1ea2:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	9b 81       	ldd	r25, Y+3	; 0x03
    1eae:	fc 01       	movw	r30, r24
    1eb0:	e2 0f       	add	r30, r18
    1eb2:	f3 1f       	adc	r31, r19
    1eb4:	80 81       	ld	r24, Z
    1eb6:	83 32       	cpi	r24, 0x23	; 35
    1eb8:	31 f7       	brne	.-52     	; 0x1e86 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	e2 0f       	add	r30, r18
    1ec8:	f3 1f       	adc	r31, r19
    1eca:	10 82       	st	Z, r1
}
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	cf 91       	pop	r28
    1ed4:	df 91       	pop	r29
    1ed6:	1f 91       	pop	r17
    1ed8:	0f 91       	pop	r16
    1eda:	08 95       	ret

00001edc <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <GPIO_setupPinDirection+0x6>
    1ee2:	00 d0       	rcall	.+0      	; 0x1ee4 <GPIO_setupPinDirection+0x8>
    1ee4:	0f 92       	push	r0
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	89 83       	std	Y+1, r24	; 0x01
    1eec:	6a 83       	std	Y+2, r22	; 0x02
    1eee:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	88 30       	cpi	r24, 0x08	; 8
    1ef4:	08 f0       	brcs	.+2      	; 0x1ef8 <GPIO_setupPinDirection+0x1c>
    1ef6:	d5 c0       	rjmp	.+426    	; 0x20a2 <GPIO_setupPinDirection+0x1c6>
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
    1efa:	84 30       	cpi	r24, 0x04	; 4
    1efc:	08 f0       	brcs	.+2      	; 0x1f00 <GPIO_setupPinDirection+0x24>
    1efe:	d1 c0       	rjmp	.+418    	; 0x20a2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	28 2f       	mov	r18, r24
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	3d 83       	std	Y+5, r19	; 0x05
    1f08:	2c 83       	std	Y+4, r18	; 0x04
    1f0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f0e:	81 30       	cpi	r24, 0x01	; 1
    1f10:	91 05       	cpc	r25, r1
    1f12:	09 f4       	brne	.+2      	; 0x1f16 <GPIO_setupPinDirection+0x3a>
    1f14:	43 c0       	rjmp	.+134    	; 0x1f9c <GPIO_setupPinDirection+0xc0>
    1f16:	2c 81       	ldd	r18, Y+4	; 0x04
    1f18:	3d 81       	ldd	r19, Y+5	; 0x05
    1f1a:	22 30       	cpi	r18, 0x02	; 2
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	2c f4       	brge	.+10     	; 0x1f2a <GPIO_setupPinDirection+0x4e>
    1f20:	8c 81       	ldd	r24, Y+4	; 0x04
    1f22:	9d 81       	ldd	r25, Y+5	; 0x05
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	71 f0       	breq	.+28     	; 0x1f44 <GPIO_setupPinDirection+0x68>
    1f28:	bc c0       	rjmp	.+376    	; 0x20a2 <GPIO_setupPinDirection+0x1c6>
    1f2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f2e:	22 30       	cpi	r18, 0x02	; 2
    1f30:	31 05       	cpc	r19, r1
    1f32:	09 f4       	brne	.+2      	; 0x1f36 <GPIO_setupPinDirection+0x5a>
    1f34:	5f c0       	rjmp	.+190    	; 0x1ff4 <GPIO_setupPinDirection+0x118>
    1f36:	8c 81       	ldd	r24, Y+4	; 0x04
    1f38:	9d 81       	ldd	r25, Y+5	; 0x05
    1f3a:	83 30       	cpi	r24, 0x03	; 3
    1f3c:	91 05       	cpc	r25, r1
    1f3e:	09 f4       	brne	.+2      	; 0x1f42 <GPIO_setupPinDirection+0x66>
    1f40:	85 c0       	rjmp	.+266    	; 0x204c <GPIO_setupPinDirection+0x170>
    1f42:	af c0       	rjmp	.+350    	; 0x20a2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	81 30       	cpi	r24, 0x01	; 1
    1f48:	a1 f4       	brne	.+40     	; 0x1f72 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1f4a:	aa e3       	ldi	r26, 0x3A	; 58
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	ea e3       	ldi	r30, 0x3A	; 58
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	48 2f       	mov	r20, r24
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	28 2f       	mov	r18, r24
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	02 2e       	mov	r0, r18
    1f62:	02 c0       	rjmp	.+4      	; 0x1f68 <GPIO_setupPinDirection+0x8c>
    1f64:	88 0f       	add	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	0a 94       	dec	r0
    1f6a:	e2 f7       	brpl	.-8      	; 0x1f64 <GPIO_setupPinDirection+0x88>
    1f6c:	84 2b       	or	r24, r20
    1f6e:	8c 93       	st	X, r24
    1f70:	98 c0       	rjmp	.+304    	; 0x20a2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1f72:	aa e3       	ldi	r26, 0x3A	; 58
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	ea e3       	ldi	r30, 0x3A	; 58
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	48 2f       	mov	r20, r24
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	02 2e       	mov	r0, r18
    1f8a:	02 c0       	rjmp	.+4      	; 0x1f90 <GPIO_setupPinDirection+0xb4>
    1f8c:	88 0f       	add	r24, r24
    1f8e:	99 1f       	adc	r25, r25
    1f90:	0a 94       	dec	r0
    1f92:	e2 f7       	brpl	.-8      	; 0x1f8c <GPIO_setupPinDirection+0xb0>
    1f94:	80 95       	com	r24
    1f96:	84 23       	and	r24, r20
    1f98:	8c 93       	st	X, r24
    1f9a:	83 c0       	rjmp	.+262    	; 0x20a2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	81 30       	cpi	r24, 0x01	; 1
    1fa0:	a1 f4       	brne	.+40     	; 0x1fca <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1fa2:	a7 e3       	ldi	r26, 0x37	; 55
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	e7 e3       	ldi	r30, 0x37	; 55
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	48 2f       	mov	r20, r24
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	28 2f       	mov	r18, r24
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	02 2e       	mov	r0, r18
    1fba:	02 c0       	rjmp	.+4      	; 0x1fc0 <GPIO_setupPinDirection+0xe4>
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	0a 94       	dec	r0
    1fc2:	e2 f7       	brpl	.-8      	; 0x1fbc <GPIO_setupPinDirection+0xe0>
    1fc4:	84 2b       	or	r24, r20
    1fc6:	8c 93       	st	X, r24
    1fc8:	6c c0       	rjmp	.+216    	; 0x20a2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1fca:	a7 e3       	ldi	r26, 0x37	; 55
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	e7 e3       	ldi	r30, 0x37	; 55
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	48 2f       	mov	r20, r24
    1fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd8:	28 2f       	mov	r18, r24
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	02 2e       	mov	r0, r18
    1fe2:	02 c0       	rjmp	.+4      	; 0x1fe8 <GPIO_setupPinDirection+0x10c>
    1fe4:	88 0f       	add	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	0a 94       	dec	r0
    1fea:	e2 f7       	brpl	.-8      	; 0x1fe4 <GPIO_setupPinDirection+0x108>
    1fec:	80 95       	com	r24
    1fee:	84 23       	and	r24, r20
    1ff0:	8c 93       	st	X, r24
    1ff2:	57 c0       	rjmp	.+174    	; 0x20a2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	81 30       	cpi	r24, 0x01	; 1
    1ff8:	a1 f4       	brne	.+40     	; 0x2022 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1ffa:	a4 e3       	ldi	r26, 0x34	; 52
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	e4 e3       	ldi	r30, 0x34	; 52
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	48 2f       	mov	r20, r24
    2006:	8a 81       	ldd	r24, Y+2	; 0x02
    2008:	28 2f       	mov	r18, r24
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	02 2e       	mov	r0, r18
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <GPIO_setupPinDirection+0x13c>
    2014:	88 0f       	add	r24, r24
    2016:	99 1f       	adc	r25, r25
    2018:	0a 94       	dec	r0
    201a:	e2 f7       	brpl	.-8      	; 0x2014 <GPIO_setupPinDirection+0x138>
    201c:	84 2b       	or	r24, r20
    201e:	8c 93       	st	X, r24
    2020:	40 c0       	rjmp	.+128    	; 0x20a2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2022:	a4 e3       	ldi	r26, 0x34	; 52
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	e4 e3       	ldi	r30, 0x34	; 52
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	48 2f       	mov	r20, r24
    202e:	8a 81       	ldd	r24, Y+2	; 0x02
    2030:	28 2f       	mov	r18, r24
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	02 2e       	mov	r0, r18
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <GPIO_setupPinDirection+0x164>
    203c:	88 0f       	add	r24, r24
    203e:	99 1f       	adc	r25, r25
    2040:	0a 94       	dec	r0
    2042:	e2 f7       	brpl	.-8      	; 0x203c <GPIO_setupPinDirection+0x160>
    2044:	80 95       	com	r24
    2046:	84 23       	and	r24, r20
    2048:	8c 93       	st	X, r24
    204a:	2b c0       	rjmp	.+86     	; 0x20a2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	81 30       	cpi	r24, 0x01	; 1
    2050:	a1 f4       	brne	.+40     	; 0x207a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2052:	a1 e3       	ldi	r26, 0x31	; 49
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e1 e3       	ldi	r30, 0x31	; 49
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	48 2f       	mov	r20, r24
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	28 2f       	mov	r18, r24
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	02 2e       	mov	r0, r18
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <GPIO_setupPinDirection+0x194>
    206c:	88 0f       	add	r24, r24
    206e:	99 1f       	adc	r25, r25
    2070:	0a 94       	dec	r0
    2072:	e2 f7       	brpl	.-8      	; 0x206c <GPIO_setupPinDirection+0x190>
    2074:	84 2b       	or	r24, r20
    2076:	8c 93       	st	X, r24
    2078:	14 c0       	rjmp	.+40     	; 0x20a2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    207a:	a1 e3       	ldi	r26, 0x31	; 49
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	e1 e3       	ldi	r30, 0x31	; 49
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	48 2f       	mov	r20, r24
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	28 2f       	mov	r18, r24
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	02 2e       	mov	r0, r18
    2092:	02 c0       	rjmp	.+4      	; 0x2098 <GPIO_setupPinDirection+0x1bc>
    2094:	88 0f       	add	r24, r24
    2096:	99 1f       	adc	r25, r25
    2098:	0a 94       	dec	r0
    209a:	e2 f7       	brpl	.-8      	; 0x2094 <GPIO_setupPinDirection+0x1b8>
    209c:	80 95       	com	r24
    209e:	84 23       	and	r24, r20
    20a0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	cf 91       	pop	r28
    20ae:	df 91       	pop	r29
    20b0:	08 95       	ret

000020b2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	00 d0       	rcall	.+0      	; 0x20b8 <GPIO_writePin+0x6>
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <GPIO_writePin+0x8>
    20ba:	0f 92       	push	r0
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	89 83       	std	Y+1, r24	; 0x01
    20c2:	6a 83       	std	Y+2, r22	; 0x02
    20c4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	88 30       	cpi	r24, 0x08	; 8
    20ca:	08 f0       	brcs	.+2      	; 0x20ce <GPIO_writePin+0x1c>
    20cc:	d5 c0       	rjmp	.+426    	; 0x2278 <GPIO_writePin+0x1c6>
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	84 30       	cpi	r24, 0x04	; 4
    20d2:	08 f0       	brcs	.+2      	; 0x20d6 <GPIO_writePin+0x24>
    20d4:	d1 c0       	rjmp	.+418    	; 0x2278 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	28 2f       	mov	r18, r24
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	3d 83       	std	Y+5, r19	; 0x05
    20de:	2c 83       	std	Y+4, r18	; 0x04
    20e0:	8c 81       	ldd	r24, Y+4	; 0x04
    20e2:	9d 81       	ldd	r25, Y+5	; 0x05
    20e4:	81 30       	cpi	r24, 0x01	; 1
    20e6:	91 05       	cpc	r25, r1
    20e8:	09 f4       	brne	.+2      	; 0x20ec <GPIO_writePin+0x3a>
    20ea:	43 c0       	rjmp	.+134    	; 0x2172 <GPIO_writePin+0xc0>
    20ec:	2c 81       	ldd	r18, Y+4	; 0x04
    20ee:	3d 81       	ldd	r19, Y+5	; 0x05
    20f0:	22 30       	cpi	r18, 0x02	; 2
    20f2:	31 05       	cpc	r19, r1
    20f4:	2c f4       	brge	.+10     	; 0x2100 <GPIO_writePin+0x4e>
    20f6:	8c 81       	ldd	r24, Y+4	; 0x04
    20f8:	9d 81       	ldd	r25, Y+5	; 0x05
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	71 f0       	breq	.+28     	; 0x211a <GPIO_writePin+0x68>
    20fe:	bc c0       	rjmp	.+376    	; 0x2278 <GPIO_writePin+0x1c6>
    2100:	2c 81       	ldd	r18, Y+4	; 0x04
    2102:	3d 81       	ldd	r19, Y+5	; 0x05
    2104:	22 30       	cpi	r18, 0x02	; 2
    2106:	31 05       	cpc	r19, r1
    2108:	09 f4       	brne	.+2      	; 0x210c <GPIO_writePin+0x5a>
    210a:	5f c0       	rjmp	.+190    	; 0x21ca <GPIO_writePin+0x118>
    210c:	8c 81       	ldd	r24, Y+4	; 0x04
    210e:	9d 81       	ldd	r25, Y+5	; 0x05
    2110:	83 30       	cpi	r24, 0x03	; 3
    2112:	91 05       	cpc	r25, r1
    2114:	09 f4       	brne	.+2      	; 0x2118 <GPIO_writePin+0x66>
    2116:	85 c0       	rjmp	.+266    	; 0x2222 <GPIO_writePin+0x170>
    2118:	af c0       	rjmp	.+350    	; 0x2278 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    211a:	8b 81       	ldd	r24, Y+3	; 0x03
    211c:	81 30       	cpi	r24, 0x01	; 1
    211e:	a1 f4       	brne	.+40     	; 0x2148 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2120:	ab e3       	ldi	r26, 0x3B	; 59
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	eb e3       	ldi	r30, 0x3B	; 59
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	48 2f       	mov	r20, r24
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	28 2f       	mov	r18, r24
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	02 2e       	mov	r0, r18
    2138:	02 c0       	rjmp	.+4      	; 0x213e <GPIO_writePin+0x8c>
    213a:	88 0f       	add	r24, r24
    213c:	99 1f       	adc	r25, r25
    213e:	0a 94       	dec	r0
    2140:	e2 f7       	brpl	.-8      	; 0x213a <GPIO_writePin+0x88>
    2142:	84 2b       	or	r24, r20
    2144:	8c 93       	st	X, r24
    2146:	98 c0       	rjmp	.+304    	; 0x2278 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2148:	ab e3       	ldi	r26, 0x3B	; 59
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	eb e3       	ldi	r30, 0x3B	; 59
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	48 2f       	mov	r20, r24
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	02 2e       	mov	r0, r18
    2160:	02 c0       	rjmp	.+4      	; 0x2166 <GPIO_writePin+0xb4>
    2162:	88 0f       	add	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	0a 94       	dec	r0
    2168:	e2 f7       	brpl	.-8      	; 0x2162 <GPIO_writePin+0xb0>
    216a:	80 95       	com	r24
    216c:	84 23       	and	r24, r20
    216e:	8c 93       	st	X, r24
    2170:	83 c0       	rjmp	.+262    	; 0x2278 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	81 30       	cpi	r24, 0x01	; 1
    2176:	a1 f4       	brne	.+40     	; 0x21a0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2178:	a8 e3       	ldi	r26, 0x38	; 56
    217a:	b0 e0       	ldi	r27, 0x00	; 0
    217c:	e8 e3       	ldi	r30, 0x38	; 56
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	80 81       	ld	r24, Z
    2182:	48 2f       	mov	r20, r24
    2184:	8a 81       	ldd	r24, Y+2	; 0x02
    2186:	28 2f       	mov	r18, r24
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	02 2e       	mov	r0, r18
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <GPIO_writePin+0xe4>
    2192:	88 0f       	add	r24, r24
    2194:	99 1f       	adc	r25, r25
    2196:	0a 94       	dec	r0
    2198:	e2 f7       	brpl	.-8      	; 0x2192 <GPIO_writePin+0xe0>
    219a:	84 2b       	or	r24, r20
    219c:	8c 93       	st	X, r24
    219e:	6c c0       	rjmp	.+216    	; 0x2278 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    21a0:	a8 e3       	ldi	r26, 0x38	; 56
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e8 e3       	ldi	r30, 0x38	; 56
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	48 2f       	mov	r20, r24
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	28 2f       	mov	r18, r24
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	02 2e       	mov	r0, r18
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <GPIO_writePin+0x10c>
    21ba:	88 0f       	add	r24, r24
    21bc:	99 1f       	adc	r25, r25
    21be:	0a 94       	dec	r0
    21c0:	e2 f7       	brpl	.-8      	; 0x21ba <GPIO_writePin+0x108>
    21c2:	80 95       	com	r24
    21c4:	84 23       	and	r24, r20
    21c6:	8c 93       	st	X, r24
    21c8:	57 c0       	rjmp	.+174    	; 0x2278 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	81 30       	cpi	r24, 0x01	; 1
    21ce:	a1 f4       	brne	.+40     	; 0x21f8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    21d0:	a5 e3       	ldi	r26, 0x35	; 53
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e5 e3       	ldi	r30, 0x35	; 53
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	48 2f       	mov	r20, r24
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	28 2f       	mov	r18, r24
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	02 2e       	mov	r0, r18
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <GPIO_writePin+0x13c>
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	0a 94       	dec	r0
    21f0:	e2 f7       	brpl	.-8      	; 0x21ea <GPIO_writePin+0x138>
    21f2:	84 2b       	or	r24, r20
    21f4:	8c 93       	st	X, r24
    21f6:	40 c0       	rjmp	.+128    	; 0x2278 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    21f8:	a5 e3       	ldi	r26, 0x35	; 53
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e5 e3       	ldi	r30, 0x35	; 53
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	48 2f       	mov	r20, r24
    2204:	8a 81       	ldd	r24, Y+2	; 0x02
    2206:	28 2f       	mov	r18, r24
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	02 2e       	mov	r0, r18
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <GPIO_writePin+0x164>
    2212:	88 0f       	add	r24, r24
    2214:	99 1f       	adc	r25, r25
    2216:	0a 94       	dec	r0
    2218:	e2 f7       	brpl	.-8      	; 0x2212 <GPIO_writePin+0x160>
    221a:	80 95       	com	r24
    221c:	84 23       	and	r24, r20
    221e:	8c 93       	st	X, r24
    2220:	2b c0       	rjmp	.+86     	; 0x2278 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	81 30       	cpi	r24, 0x01	; 1
    2226:	a1 f4       	brne	.+40     	; 0x2250 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2228:	a2 e3       	ldi	r26, 0x32	; 50
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	e2 e3       	ldi	r30, 0x32	; 50
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	48 2f       	mov	r20, r24
    2234:	8a 81       	ldd	r24, Y+2	; 0x02
    2236:	28 2f       	mov	r18, r24
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	02 2e       	mov	r0, r18
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <GPIO_writePin+0x194>
    2242:	88 0f       	add	r24, r24
    2244:	99 1f       	adc	r25, r25
    2246:	0a 94       	dec	r0
    2248:	e2 f7       	brpl	.-8      	; 0x2242 <GPIO_writePin+0x190>
    224a:	84 2b       	or	r24, r20
    224c:	8c 93       	st	X, r24
    224e:	14 c0       	rjmp	.+40     	; 0x2278 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2250:	a2 e3       	ldi	r26, 0x32	; 50
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e2 e3       	ldi	r30, 0x32	; 50
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	48 2f       	mov	r20, r24
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	02 2e       	mov	r0, r18
    2268:	02 c0       	rjmp	.+4      	; 0x226e <GPIO_writePin+0x1bc>
    226a:	88 0f       	add	r24, r24
    226c:	99 1f       	adc	r25, r25
    226e:	0a 94       	dec	r0
    2270:	e2 f7       	brpl	.-8      	; 0x226a <GPIO_writePin+0x1b8>
    2272:	80 95       	com	r24
    2274:	84 23       	and	r24, r20
    2276:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	00 d0       	rcall	.+0      	; 0x228e <GPIO_readPin+0x6>
    228e:	00 d0       	rcall	.+0      	; 0x2290 <GPIO_readPin+0x8>
    2290:	0f 92       	push	r0
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	8a 83       	std	Y+2, r24	; 0x02
    2298:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    229a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	88 30       	cpi	r24, 0x08	; 8
    22a0:	08 f0       	brcs	.+2      	; 0x22a4 <GPIO_readPin+0x1c>
    22a2:	84 c0       	rjmp	.+264    	; 0x23ac <GPIO_readPin+0x124>
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	84 30       	cpi	r24, 0x04	; 4
    22a8:	08 f0       	brcs	.+2      	; 0x22ac <GPIO_readPin+0x24>
    22aa:	80 c0       	rjmp	.+256    	; 0x23ac <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    22ac:	8a 81       	ldd	r24, Y+2	; 0x02
    22ae:	28 2f       	mov	r18, r24
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	3d 83       	std	Y+5, r19	; 0x05
    22b4:	2c 83       	std	Y+4, r18	; 0x04
    22b6:	4c 81       	ldd	r20, Y+4	; 0x04
    22b8:	5d 81       	ldd	r21, Y+5	; 0x05
    22ba:	41 30       	cpi	r20, 0x01	; 1
    22bc:	51 05       	cpc	r21, r1
    22be:	79 f1       	breq	.+94     	; 0x231e <GPIO_readPin+0x96>
    22c0:	8c 81       	ldd	r24, Y+4	; 0x04
    22c2:	9d 81       	ldd	r25, Y+5	; 0x05
    22c4:	82 30       	cpi	r24, 0x02	; 2
    22c6:	91 05       	cpc	r25, r1
    22c8:	34 f4       	brge	.+12     	; 0x22d6 <GPIO_readPin+0x4e>
    22ca:	2c 81       	ldd	r18, Y+4	; 0x04
    22cc:	3d 81       	ldd	r19, Y+5	; 0x05
    22ce:	21 15       	cp	r18, r1
    22d0:	31 05       	cpc	r19, r1
    22d2:	69 f0       	breq	.+26     	; 0x22ee <GPIO_readPin+0x66>
    22d4:	6b c0       	rjmp	.+214    	; 0x23ac <GPIO_readPin+0x124>
    22d6:	4c 81       	ldd	r20, Y+4	; 0x04
    22d8:	5d 81       	ldd	r21, Y+5	; 0x05
    22da:	42 30       	cpi	r20, 0x02	; 2
    22dc:	51 05       	cpc	r21, r1
    22de:	b9 f1       	breq	.+110    	; 0x234e <GPIO_readPin+0xc6>
    22e0:	8c 81       	ldd	r24, Y+4	; 0x04
    22e2:	9d 81       	ldd	r25, Y+5	; 0x05
    22e4:	83 30       	cpi	r24, 0x03	; 3
    22e6:	91 05       	cpc	r25, r1
    22e8:	09 f4       	brne	.+2      	; 0x22ec <GPIO_readPin+0x64>
    22ea:	49 c0       	rjmp	.+146    	; 0x237e <GPIO_readPin+0xf6>
    22ec:	5f c0       	rjmp	.+190    	; 0x23ac <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    22ee:	e9 e3       	ldi	r30, 0x39	; 57
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	28 2f       	mov	r18, r24
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	88 2f       	mov	r24, r24
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	a9 01       	movw	r20, r18
    2300:	02 c0       	rjmp	.+4      	; 0x2306 <GPIO_readPin+0x7e>
    2302:	55 95       	asr	r21
    2304:	47 95       	ror	r20
    2306:	8a 95       	dec	r24
    2308:	e2 f7       	brpl	.-8      	; 0x2302 <GPIO_readPin+0x7a>
    230a:	ca 01       	movw	r24, r20
    230c:	81 70       	andi	r24, 0x01	; 1
    230e:	90 70       	andi	r25, 0x00	; 0
    2310:	88 23       	and	r24, r24
    2312:	19 f0       	breq	.+6      	; 0x231a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	89 83       	std	Y+1, r24	; 0x01
    2318:	49 c0       	rjmp	.+146    	; 0x23ac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    231a:	19 82       	std	Y+1, r1	; 0x01
    231c:	47 c0       	rjmp	.+142    	; 0x23ac <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    231e:	e6 e3       	ldi	r30, 0x36	; 54
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	28 2f       	mov	r18, r24
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	88 2f       	mov	r24, r24
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	a9 01       	movw	r20, r18
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <GPIO_readPin+0xae>
    2332:	55 95       	asr	r21
    2334:	47 95       	ror	r20
    2336:	8a 95       	dec	r24
    2338:	e2 f7       	brpl	.-8      	; 0x2332 <GPIO_readPin+0xaa>
    233a:	ca 01       	movw	r24, r20
    233c:	81 70       	andi	r24, 0x01	; 1
    233e:	90 70       	andi	r25, 0x00	; 0
    2340:	88 23       	and	r24, r24
    2342:	19 f0       	breq	.+6      	; 0x234a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	89 83       	std	Y+1, r24	; 0x01
    2348:	31 c0       	rjmp	.+98     	; 0x23ac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    234a:	19 82       	std	Y+1, r1	; 0x01
    234c:	2f c0       	rjmp	.+94     	; 0x23ac <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    234e:	e3 e3       	ldi	r30, 0x33	; 51
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	28 2f       	mov	r18, r24
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	88 2f       	mov	r24, r24
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	a9 01       	movw	r20, r18
    2360:	02 c0       	rjmp	.+4      	; 0x2366 <GPIO_readPin+0xde>
    2362:	55 95       	asr	r21
    2364:	47 95       	ror	r20
    2366:	8a 95       	dec	r24
    2368:	e2 f7       	brpl	.-8      	; 0x2362 <GPIO_readPin+0xda>
    236a:	ca 01       	movw	r24, r20
    236c:	81 70       	andi	r24, 0x01	; 1
    236e:	90 70       	andi	r25, 0x00	; 0
    2370:	88 23       	and	r24, r24
    2372:	19 f0       	breq	.+6      	; 0x237a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	89 83       	std	Y+1, r24	; 0x01
    2378:	19 c0       	rjmp	.+50     	; 0x23ac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    237a:	19 82       	std	Y+1, r1	; 0x01
    237c:	17 c0       	rjmp	.+46     	; 0x23ac <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    237e:	e0 e3       	ldi	r30, 0x30	; 48
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	28 2f       	mov	r18, r24
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	8b 81       	ldd	r24, Y+3	; 0x03
    238a:	88 2f       	mov	r24, r24
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	a9 01       	movw	r20, r18
    2390:	02 c0       	rjmp	.+4      	; 0x2396 <GPIO_readPin+0x10e>
    2392:	55 95       	asr	r21
    2394:	47 95       	ror	r20
    2396:	8a 95       	dec	r24
    2398:	e2 f7       	brpl	.-8      	; 0x2392 <GPIO_readPin+0x10a>
    239a:	ca 01       	movw	r24, r20
    239c:	81 70       	andi	r24, 0x01	; 1
    239e:	90 70       	andi	r25, 0x00	; 0
    23a0:	88 23       	and	r24, r24
    23a2:	19 f0       	breq	.+6      	; 0x23aa <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	01 c0       	rjmp	.+2      	; 0x23ac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    23aa:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	08 95       	ret

000023be <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    23be:	df 93       	push	r29
    23c0:	cf 93       	push	r28
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <GPIO_setupPortDirection+0x6>
    23c4:	00 d0       	rcall	.+0      	; 0x23c6 <GPIO_setupPortDirection+0x8>
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
    23ca:	89 83       	std	Y+1, r24	; 0x01
    23cc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	84 30       	cpi	r24, 0x04	; 4
    23d2:	90 f5       	brcc	.+100    	; 0x2438 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	28 2f       	mov	r18, r24
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	3c 83       	std	Y+4, r19	; 0x04
    23dc:	2b 83       	std	Y+3, r18	; 0x03
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	9c 81       	ldd	r25, Y+4	; 0x04
    23e2:	81 30       	cpi	r24, 0x01	; 1
    23e4:	91 05       	cpc	r25, r1
    23e6:	d1 f0       	breq	.+52     	; 0x241c <GPIO_setupPortDirection+0x5e>
    23e8:	2b 81       	ldd	r18, Y+3	; 0x03
    23ea:	3c 81       	ldd	r19, Y+4	; 0x04
    23ec:	22 30       	cpi	r18, 0x02	; 2
    23ee:	31 05       	cpc	r19, r1
    23f0:	2c f4       	brge	.+10     	; 0x23fc <GPIO_setupPortDirection+0x3e>
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	9c 81       	ldd	r25, Y+4	; 0x04
    23f6:	00 97       	sbiw	r24, 0x00	; 0
    23f8:	61 f0       	breq	.+24     	; 0x2412 <GPIO_setupPortDirection+0x54>
    23fa:	1e c0       	rjmp	.+60     	; 0x2438 <GPIO_setupPortDirection+0x7a>
    23fc:	2b 81       	ldd	r18, Y+3	; 0x03
    23fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2400:	22 30       	cpi	r18, 0x02	; 2
    2402:	31 05       	cpc	r19, r1
    2404:	81 f0       	breq	.+32     	; 0x2426 <GPIO_setupPortDirection+0x68>
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	9c 81       	ldd	r25, Y+4	; 0x04
    240a:	83 30       	cpi	r24, 0x03	; 3
    240c:	91 05       	cpc	r25, r1
    240e:	81 f0       	breq	.+32     	; 0x2430 <GPIO_setupPortDirection+0x72>
    2410:	13 c0       	rjmp	.+38     	; 0x2438 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2412:	ea e3       	ldi	r30, 0x3A	; 58
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	8a 81       	ldd	r24, Y+2	; 0x02
    2418:	80 83       	st	Z, r24
    241a:	0e c0       	rjmp	.+28     	; 0x2438 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    241c:	e7 e3       	ldi	r30, 0x37	; 55
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	80 83       	st	Z, r24
    2424:	09 c0       	rjmp	.+18     	; 0x2438 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2426:	e4 e3       	ldi	r30, 0x34	; 52
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	8a 81       	ldd	r24, Y+2	; 0x02
    242c:	80 83       	st	Z, r24
    242e:	04 c0       	rjmp	.+8      	; 0x2438 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2430:	e1 e3       	ldi	r30, 0x31	; 49
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	8a 81       	ldd	r24, Y+2	; 0x02
    2436:	80 83       	st	Z, r24
			break;
		}
	}
}
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	08 95       	ret

00002446 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	00 d0       	rcall	.+0      	; 0x244c <GPIO_writePort+0x6>
    244c:	00 d0       	rcall	.+0      	; 0x244e <GPIO_writePort+0x8>
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	89 83       	std	Y+1, r24	; 0x01
    2454:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	84 30       	cpi	r24, 0x04	; 4
    245a:	90 f5       	brcc	.+100    	; 0x24c0 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	28 2f       	mov	r18, r24
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	3c 83       	std	Y+4, r19	; 0x04
    2464:	2b 83       	std	Y+3, r18	; 0x03
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	9c 81       	ldd	r25, Y+4	; 0x04
    246a:	81 30       	cpi	r24, 0x01	; 1
    246c:	91 05       	cpc	r25, r1
    246e:	d1 f0       	breq	.+52     	; 0x24a4 <GPIO_writePort+0x5e>
    2470:	2b 81       	ldd	r18, Y+3	; 0x03
    2472:	3c 81       	ldd	r19, Y+4	; 0x04
    2474:	22 30       	cpi	r18, 0x02	; 2
    2476:	31 05       	cpc	r19, r1
    2478:	2c f4       	brge	.+10     	; 0x2484 <GPIO_writePort+0x3e>
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	9c 81       	ldd	r25, Y+4	; 0x04
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	61 f0       	breq	.+24     	; 0x249a <GPIO_writePort+0x54>
    2482:	1e c0       	rjmp	.+60     	; 0x24c0 <GPIO_writePort+0x7a>
    2484:	2b 81       	ldd	r18, Y+3	; 0x03
    2486:	3c 81       	ldd	r19, Y+4	; 0x04
    2488:	22 30       	cpi	r18, 0x02	; 2
    248a:	31 05       	cpc	r19, r1
    248c:	81 f0       	breq	.+32     	; 0x24ae <GPIO_writePort+0x68>
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	9c 81       	ldd	r25, Y+4	; 0x04
    2492:	83 30       	cpi	r24, 0x03	; 3
    2494:	91 05       	cpc	r25, r1
    2496:	81 f0       	breq	.+32     	; 0x24b8 <GPIO_writePort+0x72>
    2498:	13 c0       	rjmp	.+38     	; 0x24c0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    249a:	eb e3       	ldi	r30, 0x3B	; 59
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	8a 81       	ldd	r24, Y+2	; 0x02
    24a0:	80 83       	st	Z, r24
    24a2:	0e c0       	rjmp	.+28     	; 0x24c0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    24a4:	e8 e3       	ldi	r30, 0x38	; 56
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	8a 81       	ldd	r24, Y+2	; 0x02
    24aa:	80 83       	st	Z, r24
    24ac:	09 c0       	rjmp	.+18     	; 0x24c0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    24ae:	e5 e3       	ldi	r30, 0x35	; 53
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	8a 81       	ldd	r24, Y+2	; 0x02
    24b4:	80 83       	st	Z, r24
    24b6:	04 c0       	rjmp	.+8      	; 0x24c0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    24b8:	e2 e3       	ldi	r30, 0x32	; 50
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	8a 81       	ldd	r24, Y+2	; 0x02
    24be:	80 83       	st	Z, r24
			break;
		}
	}
}
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	0f 90       	pop	r0
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	08 95       	ret

000024ce <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	00 d0       	rcall	.+0      	; 0x24d4 <GPIO_readPort+0x6>
    24d4:	00 d0       	rcall	.+0      	; 0x24d6 <GPIO_readPort+0x8>
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62
    24da:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    24dc:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	84 30       	cpi	r24, 0x04	; 4
    24e2:	90 f5       	brcc	.+100    	; 0x2548 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    24e4:	8a 81       	ldd	r24, Y+2	; 0x02
    24e6:	28 2f       	mov	r18, r24
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	3c 83       	std	Y+4, r19	; 0x04
    24ec:	2b 83       	std	Y+3, r18	; 0x03
    24ee:	8b 81       	ldd	r24, Y+3	; 0x03
    24f0:	9c 81       	ldd	r25, Y+4	; 0x04
    24f2:	81 30       	cpi	r24, 0x01	; 1
    24f4:	91 05       	cpc	r25, r1
    24f6:	d1 f0       	breq	.+52     	; 0x252c <GPIO_readPort+0x5e>
    24f8:	2b 81       	ldd	r18, Y+3	; 0x03
    24fa:	3c 81       	ldd	r19, Y+4	; 0x04
    24fc:	22 30       	cpi	r18, 0x02	; 2
    24fe:	31 05       	cpc	r19, r1
    2500:	2c f4       	brge	.+10     	; 0x250c <GPIO_readPort+0x3e>
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
    2504:	9c 81       	ldd	r25, Y+4	; 0x04
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	61 f0       	breq	.+24     	; 0x2522 <GPIO_readPort+0x54>
    250a:	1e c0       	rjmp	.+60     	; 0x2548 <GPIO_readPort+0x7a>
    250c:	2b 81       	ldd	r18, Y+3	; 0x03
    250e:	3c 81       	ldd	r19, Y+4	; 0x04
    2510:	22 30       	cpi	r18, 0x02	; 2
    2512:	31 05       	cpc	r19, r1
    2514:	81 f0       	breq	.+32     	; 0x2536 <GPIO_readPort+0x68>
    2516:	8b 81       	ldd	r24, Y+3	; 0x03
    2518:	9c 81       	ldd	r25, Y+4	; 0x04
    251a:	83 30       	cpi	r24, 0x03	; 3
    251c:	91 05       	cpc	r25, r1
    251e:	81 f0       	breq	.+32     	; 0x2540 <GPIO_readPort+0x72>
    2520:	13 c0       	rjmp	.+38     	; 0x2548 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2522:	e9 e3       	ldi	r30, 0x39	; 57
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	89 83       	std	Y+1, r24	; 0x01
    252a:	0e c0       	rjmp	.+28     	; 0x2548 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    252c:	e6 e3       	ldi	r30, 0x36	; 54
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	89 83       	std	Y+1, r24	; 0x01
    2534:	09 c0       	rjmp	.+18     	; 0x2548 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2536:	e3 e3       	ldi	r30, 0x33	; 51
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	89 83       	std	Y+1, r24	; 0x01
    253e:	04 c0       	rjmp	.+8      	; 0x2548 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2540:	e0 e3       	ldi	r30, 0x30	; 48
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2548:	89 81       	ldd	r24, Y+1	; 0x01
}
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	08 95       	ret

00002558 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	00 d0       	rcall	.+0      	; 0x255e <KEYPAD_getPressedKey+0x6>
    255e:	0f 92       	push	r0
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2564:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2566:	1b 82       	std	Y+3, r1	; 0x03
    2568:	43 c0       	rjmp	.+134    	; 0x25f0 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(PORTB_ID,PORT_INPUT);
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	60 e0       	ldi	r22, 0x00	; 0
    256e:	0e 94 df 11 	call	0x23be	; 0x23be <GPIO_setupPortDirection>
			GPIO_setupPinDirection(PORTB_ID,PIN4_ID+col,PIN_OUTPUT);
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	98 2f       	mov	r25, r24
    2576:	9c 5f       	subi	r25, 0xFC	; 252
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	69 2f       	mov	r22, r25
    257c:	41 e0       	ldi	r20, 0x01	; 1
    257e:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(PIN4_ID+col));
    2582:	8b 81       	ldd	r24, Y+3	; 0x03
    2584:	88 2f       	mov	r24, r24
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	9c 01       	movw	r18, r24
    258a:	2c 5f       	subi	r18, 0xFC	; 252
    258c:	3f 4f       	sbci	r19, 0xFF	; 255
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	02 c0       	rjmp	.+4      	; 0x2598 <KEYPAD_getPressedKey+0x40>
    2594:	88 0f       	add	r24, r24
    2596:	99 1f       	adc	r25, r25
    2598:	2a 95       	dec	r18
    259a:	e2 f7       	brpl	.-8      	; 0x2594 <KEYPAD_getPressedKey+0x3c>
    259c:	80 95       	com	r24
    259e:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	69 81       	ldd	r22, Y+1	; 0x01
    25a4:	0e 94 23 12 	call	0x2446	; 0x2446 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    25a8:	1a 82       	std	Y+2, r1	; 0x02
    25aa:	1c c0       	rjmp	.+56     	; 0x25e4 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	6a 81       	ldd	r22, Y+2	; 0x02
    25b0:	0e 94 44 11 	call	0x2288	; 0x2288 <GPIO_readPin>
    25b4:	88 23       	and	r24, r24
    25b6:	99 f4       	brne	.+38     	; 0x25de <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    25b8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ba:	88 2f       	mov	r24, r24
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	88 0f       	add	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	88 0f       	add	r24, r24
    25c4:	99 1f       	adc	r25, r25
    25c6:	98 2f       	mov	r25, r24
    25c8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ca:	89 0f       	add	r24, r25
    25cc:	8f 5f       	subi	r24, 0xFF	; 255
    25ce:	0e 94 fd 12 	call	0x25fa	; 0x25fa <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	cf 91       	pop	r28
    25da:	df 91       	pop	r29
    25dc:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    25de:	8a 81       	ldd	r24, Y+2	; 0x02
    25e0:	8f 5f       	subi	r24, 0xFF	; 255
    25e2:	8a 83       	std	Y+2, r24	; 0x02
    25e4:	8a 81       	ldd	r24, Y+2	; 0x02
    25e6:	84 30       	cpi	r24, 0x04	; 4
    25e8:	08 f3       	brcs	.-62     	; 0x25ac <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    25ea:	8b 81       	ldd	r24, Y+3	; 0x03
    25ec:	8f 5f       	subi	r24, 0xFF	; 255
    25ee:	8b 83       	std	Y+3, r24	; 0x03
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	84 30       	cpi	r24, 0x04	; 4
    25f4:	08 f4       	brcc	.+2      	; 0x25f8 <KEYPAD_getPressedKey+0xa0>
    25f6:	b9 cf       	rjmp	.-142    	; 0x256a <KEYPAD_getPressedKey+0x12>
    25f8:	b6 cf       	rjmp	.-148    	; 0x2566 <KEYPAD_getPressedKey+0xe>

000025fa <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    25fa:	df 93       	push	r29
    25fc:	cf 93       	push	r28
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2600:	00 d0       	rcall	.+0      	; 0x2602 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2608:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    260a:	8a 81       	ldd	r24, Y+2	; 0x02
    260c:	28 2f       	mov	r18, r24
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	3c 83       	std	Y+4, r19	; 0x04
    2612:	2b 83       	std	Y+3, r18	; 0x03
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	9c 81       	ldd	r25, Y+4	; 0x04
    2618:	88 30       	cpi	r24, 0x08	; 8
    261a:	91 05       	cpc	r25, r1
    261c:	09 f4       	brne	.+2      	; 0x2620 <KEYPAD_4x4_adjustKeyNumber+0x26>
    261e:	70 c0       	rjmp	.+224    	; 0x2700 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2620:	2b 81       	ldd	r18, Y+3	; 0x03
    2622:	3c 81       	ldd	r19, Y+4	; 0x04
    2624:	29 30       	cpi	r18, 0x09	; 9
    2626:	31 05       	cpc	r19, r1
    2628:	5c f5       	brge	.+86     	; 0x2680 <KEYPAD_4x4_adjustKeyNumber+0x86>
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	9c 81       	ldd	r25, Y+4	; 0x04
    262e:	84 30       	cpi	r24, 0x04	; 4
    2630:	91 05       	cpc	r25, r1
    2632:	09 f4       	brne	.+2      	; 0x2636 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2634:	59 c0       	rjmp	.+178    	; 0x26e8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2636:	2b 81       	ldd	r18, Y+3	; 0x03
    2638:	3c 81       	ldd	r19, Y+4	; 0x04
    263a:	25 30       	cpi	r18, 0x05	; 5
    263c:	31 05       	cpc	r19, r1
    263e:	9c f4       	brge	.+38     	; 0x2666 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2640:	8b 81       	ldd	r24, Y+3	; 0x03
    2642:	9c 81       	ldd	r25, Y+4	; 0x04
    2644:	82 30       	cpi	r24, 0x02	; 2
    2646:	91 05       	cpc	r25, r1
    2648:	09 f4       	brne	.+2      	; 0x264c <KEYPAD_4x4_adjustKeyNumber+0x52>
    264a:	48 c0       	rjmp	.+144    	; 0x26dc <KEYPAD_4x4_adjustKeyNumber+0xe2>
    264c:	2b 81       	ldd	r18, Y+3	; 0x03
    264e:	3c 81       	ldd	r19, Y+4	; 0x04
    2650:	23 30       	cpi	r18, 0x03	; 3
    2652:	31 05       	cpc	r19, r1
    2654:	0c f0       	brlt	.+2      	; 0x2658 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2656:	45 c0       	rjmp	.+138    	; 0x26e2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	9c 81       	ldd	r25, Y+4	; 0x04
    265c:	81 30       	cpi	r24, 0x01	; 1
    265e:	91 05       	cpc	r25, r1
    2660:	09 f4       	brne	.+2      	; 0x2664 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2662:	39 c0       	rjmp	.+114    	; 0x26d6 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2664:	67 c0       	rjmp	.+206    	; 0x2734 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2666:	2b 81       	ldd	r18, Y+3	; 0x03
    2668:	3c 81       	ldd	r19, Y+4	; 0x04
    266a:	26 30       	cpi	r18, 0x06	; 6
    266c:	31 05       	cpc	r19, r1
    266e:	09 f4       	brne	.+2      	; 0x2672 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2670:	41 c0       	rjmp	.+130    	; 0x26f4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2672:	8b 81       	ldd	r24, Y+3	; 0x03
    2674:	9c 81       	ldd	r25, Y+4	; 0x04
    2676:	87 30       	cpi	r24, 0x07	; 7
    2678:	91 05       	cpc	r25, r1
    267a:	0c f0       	brlt	.+2      	; 0x267e <KEYPAD_4x4_adjustKeyNumber+0x84>
    267c:	3e c0       	rjmp	.+124    	; 0x26fa <KEYPAD_4x4_adjustKeyNumber+0x100>
    267e:	37 c0       	rjmp	.+110    	; 0x26ee <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2680:	2b 81       	ldd	r18, Y+3	; 0x03
    2682:	3c 81       	ldd	r19, Y+4	; 0x04
    2684:	2c 30       	cpi	r18, 0x0C	; 12
    2686:	31 05       	cpc	r19, r1
    2688:	09 f4       	brne	.+2      	; 0x268c <KEYPAD_4x4_adjustKeyNumber+0x92>
    268a:	46 c0       	rjmp	.+140    	; 0x2718 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    268c:	8b 81       	ldd	r24, Y+3	; 0x03
    268e:	9c 81       	ldd	r25, Y+4	; 0x04
    2690:	8d 30       	cpi	r24, 0x0D	; 13
    2692:	91 05       	cpc	r25, r1
    2694:	5c f4       	brge	.+22     	; 0x26ac <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2696:	2b 81       	ldd	r18, Y+3	; 0x03
    2698:	3c 81       	ldd	r19, Y+4	; 0x04
    269a:	2a 30       	cpi	r18, 0x0A	; 10
    269c:	31 05       	cpc	r19, r1
    269e:	b1 f1       	breq	.+108    	; 0x270c <KEYPAD_4x4_adjustKeyNumber+0x112>
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	9c 81       	ldd	r25, Y+4	; 0x04
    26a4:	8b 30       	cpi	r24, 0x0B	; 11
    26a6:	91 05       	cpc	r25, r1
    26a8:	a4 f5       	brge	.+104    	; 0x2712 <KEYPAD_4x4_adjustKeyNumber+0x118>
    26aa:	2d c0       	rjmp	.+90     	; 0x2706 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    26ac:	2b 81       	ldd	r18, Y+3	; 0x03
    26ae:	3c 81       	ldd	r19, Y+4	; 0x04
    26b0:	2e 30       	cpi	r18, 0x0E	; 14
    26b2:	31 05       	cpc	r19, r1
    26b4:	b9 f1       	breq	.+110    	; 0x2724 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    26b6:	8b 81       	ldd	r24, Y+3	; 0x03
    26b8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ba:	8e 30       	cpi	r24, 0x0E	; 14
    26bc:	91 05       	cpc	r25, r1
    26be:	7c f1       	brlt	.+94     	; 0x271e <KEYPAD_4x4_adjustKeyNumber+0x124>
    26c0:	2b 81       	ldd	r18, Y+3	; 0x03
    26c2:	3c 81       	ldd	r19, Y+4	; 0x04
    26c4:	2f 30       	cpi	r18, 0x0F	; 15
    26c6:	31 05       	cpc	r19, r1
    26c8:	79 f1       	breq	.+94     	; 0x2728 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    26ca:	8b 81       	ldd	r24, Y+3	; 0x03
    26cc:	9c 81       	ldd	r25, Y+4	; 0x04
    26ce:	80 31       	cpi	r24, 0x10	; 16
    26d0:	91 05       	cpc	r25, r1
    26d2:	69 f1       	breq	.+90     	; 0x272e <KEYPAD_4x4_adjustKeyNumber+0x134>
    26d4:	2f c0       	rjmp	.+94     	; 0x2734 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    26d6:	87 e0       	ldi	r24, 0x07	; 7
    26d8:	89 83       	std	Y+1, r24	; 0x01
    26da:	2e c0       	rjmp	.+92     	; 0x2738 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    26dc:	88 e0       	ldi	r24, 0x08	; 8
    26de:	89 83       	std	Y+1, r24	; 0x01
    26e0:	2b c0       	rjmp	.+86     	; 0x2738 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    26e2:	89 e0       	ldi	r24, 0x09	; 9
    26e4:	89 83       	std	Y+1, r24	; 0x01
    26e6:	28 c0       	rjmp	.+80     	; 0x2738 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    26e8:	85 e2       	ldi	r24, 0x25	; 37
    26ea:	89 83       	std	Y+1, r24	; 0x01
    26ec:	25 c0       	rjmp	.+74     	; 0x2738 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    26ee:	84 e0       	ldi	r24, 0x04	; 4
    26f0:	89 83       	std	Y+1, r24	; 0x01
    26f2:	22 c0       	rjmp	.+68     	; 0x2738 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    26f4:	85 e0       	ldi	r24, 0x05	; 5
    26f6:	89 83       	std	Y+1, r24	; 0x01
    26f8:	1f c0       	rjmp	.+62     	; 0x2738 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    26fa:	86 e0       	ldi	r24, 0x06	; 6
    26fc:	89 83       	std	Y+1, r24	; 0x01
    26fe:	1c c0       	rjmp	.+56     	; 0x2738 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2700:	8a e2       	ldi	r24, 0x2A	; 42
    2702:	89 83       	std	Y+1, r24	; 0x01
    2704:	19 c0       	rjmp	.+50     	; 0x2738 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	89 83       	std	Y+1, r24	; 0x01
    270a:	16 c0       	rjmp	.+44     	; 0x2738 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    270c:	82 e0       	ldi	r24, 0x02	; 2
    270e:	89 83       	std	Y+1, r24	; 0x01
    2710:	13 c0       	rjmp	.+38     	; 0x2738 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2712:	83 e0       	ldi	r24, 0x03	; 3
    2714:	89 83       	std	Y+1, r24	; 0x01
    2716:	10 c0       	rjmp	.+32     	; 0x2738 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2718:	8d e2       	ldi	r24, 0x2D	; 45
    271a:	89 83       	std	Y+1, r24	; 0x01
    271c:	0d c0       	rjmp	.+26     	; 0x2738 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    271e:	8d e0       	ldi	r24, 0x0D	; 13
    2720:	89 83       	std	Y+1, r24	; 0x01
    2722:	0a c0       	rjmp	.+20     	; 0x2738 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2724:	19 82       	std	Y+1, r1	; 0x01
    2726:	08 c0       	rjmp	.+16     	; 0x2738 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2728:	8d e3       	ldi	r24, 0x3D	; 61
    272a:	89 83       	std	Y+1, r24	; 0x01
    272c:	05 c0       	rjmp	.+10     	; 0x2738 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    272e:	8b e2       	ldi	r24, 0x2B	; 43
    2730:	89 83       	std	Y+1, r24	; 0x01
    2732:	02 c0       	rjmp	.+4      	; 0x2738 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2734:	8a 81       	ldd	r24, Y+2	; 0x02
    2736:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2738:	89 81       	ldd	r24, Y+1	; 0x01
} 
    273a:	0f 90       	pop	r0
    273c:	0f 90       	pop	r0
    273e:	0f 90       	pop	r0
    2740:	0f 90       	pop	r0
    2742:	cf 91       	pop	r28
    2744:	df 91       	pop	r29
    2746:	08 95       	ret

00002748 <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */void LCD_init(void)
{
    2748:	df 93       	push	r29
    274a:	cf 93       	push	r28
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
    2750:	2e 97       	sbiw	r28, 0x0e	; 14
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	de bf       	out	0x3e, r29	; 62
    2758:	0f be       	out	0x3f, r0	; 63
    275a:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    275c:	83 e0       	ldi	r24, 0x03	; 3
    275e:	66 e0       	ldi	r22, 0x06	; 6
    2760:	41 e0       	ldi	r20, 0x01	; 1
    2762:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    2766:	83 e0       	ldi	r24, 0x03	; 3
    2768:	67 e0       	ldi	r22, 0x07	; 7
    276a:	41 e0       	ldi	r20, 0x01	; 1
    276c:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <GPIO_setupPinDirection>
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	a0 ea       	ldi	r26, 0xA0	; 160
    2776:	b1 e4       	ldi	r27, 0x41	; 65
    2778:	8b 87       	std	Y+11, r24	; 0x0b
    277a:	9c 87       	std	Y+12, r25	; 0x0c
    277c:	ad 87       	std	Y+13, r26	; 0x0d
    277e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2780:	6b 85       	ldd	r22, Y+11	; 0x0b
    2782:	7c 85       	ldd	r23, Y+12	; 0x0c
    2784:	8d 85       	ldd	r24, Y+13	; 0x0d
    2786:	9e 85       	ldd	r25, Y+14	; 0x0e
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	4a ef       	ldi	r20, 0xFA	; 250
    278e:	54 e4       	ldi	r21, 0x44	; 68
    2790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	8f 83       	std	Y+7, r24	; 0x07
    279a:	98 87       	std	Y+8, r25	; 0x08
    279c:	a9 87       	std	Y+9, r26	; 0x09
    279e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27a0:	6f 81       	ldd	r22, Y+7	; 0x07
    27a2:	78 85       	ldd	r23, Y+8	; 0x08
    27a4:	89 85       	ldd	r24, Y+9	; 0x09
    27a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e8       	ldi	r20, 0x80	; 128
    27ae:	5f e3       	ldi	r21, 0x3F	; 63
    27b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27b4:	88 23       	and	r24, r24
    27b6:	2c f4       	brge	.+10     	; 0x27c2 <LCD_init+0x7a>
		__ticks = 1;
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	9e 83       	std	Y+6, r25	; 0x06
    27be:	8d 83       	std	Y+5, r24	; 0x05
    27c0:	3f c0       	rjmp	.+126    	; 0x2840 <LCD_init+0xf8>
	else if (__tmp > 65535)
    27c2:	6f 81       	ldd	r22, Y+7	; 0x07
    27c4:	78 85       	ldd	r23, Y+8	; 0x08
    27c6:	89 85       	ldd	r24, Y+9	; 0x09
    27c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	3f ef       	ldi	r19, 0xFF	; 255
    27ce:	4f e7       	ldi	r20, 0x7F	; 127
    27d0:	57 e4       	ldi	r21, 0x47	; 71
    27d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d6:	18 16       	cp	r1, r24
    27d8:	4c f5       	brge	.+82     	; 0x282c <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27da:	6b 85       	ldd	r22, Y+11	; 0x0b
    27dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    27de:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	40 e2       	ldi	r20, 0x20	; 32
    27e8:	51 e4       	ldi	r21, 0x41	; 65
    27ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	bc 01       	movw	r22, r24
    27f4:	cd 01       	movw	r24, r26
    27f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	9e 83       	std	Y+6, r25	; 0x06
    2800:	8d 83       	std	Y+5, r24	; 0x05
    2802:	0f c0       	rjmp	.+30     	; 0x2822 <LCD_init+0xda>
    2804:	88 ec       	ldi	r24, 0xC8	; 200
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	9c 83       	std	Y+4, r25	; 0x04
    280a:	8b 83       	std	Y+3, r24	; 0x03
    280c:	8b 81       	ldd	r24, Y+3	; 0x03
    280e:	9c 81       	ldd	r25, Y+4	; 0x04
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	f1 f7       	brne	.-4      	; 0x2810 <LCD_init+0xc8>
    2814:	9c 83       	std	Y+4, r25	; 0x04
    2816:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2818:	8d 81       	ldd	r24, Y+5	; 0x05
    281a:	9e 81       	ldd	r25, Y+6	; 0x06
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	9e 83       	std	Y+6, r25	; 0x06
    2820:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2822:	8d 81       	ldd	r24, Y+5	; 0x05
    2824:	9e 81       	ldd	r25, Y+6	; 0x06
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	69 f7       	brne	.-38     	; 0x2804 <LCD_init+0xbc>
    282a:	14 c0       	rjmp	.+40     	; 0x2854 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    282c:	6f 81       	ldd	r22, Y+7	; 0x07
    282e:	78 85       	ldd	r23, Y+8	; 0x08
    2830:	89 85       	ldd	r24, Y+9	; 0x09
    2832:	9a 85       	ldd	r25, Y+10	; 0x0a
    2834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	9e 83       	std	Y+6, r25	; 0x06
    283e:	8d 83       	std	Y+5, r24	; 0x05
    2840:	8d 81       	ldd	r24, Y+5	; 0x05
    2842:	9e 81       	ldd	r25, Y+6	; 0x06
    2844:	9a 83       	std	Y+2, r25	; 0x02
    2846:	89 83       	std	Y+1, r24	; 0x01
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	9a 81       	ldd	r25, Y+2	; 0x02
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	f1 f7       	brne	.-4      	; 0x284c <LCD_init+0x104>
    2850:	9a 83       	std	Y+2, r25	; 0x02
    2852:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

#if(LCD_DATA_BITS_MODE == 8)

	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	6f ef       	ldi	r22, 0xFF	; 255
    2858:	0e 94 df 11 	call	0x23be	; 0x23be <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    285c:	88 e3       	ldi	r24, 0x38	; 56
    285e:	0e 94 40 14 	call	0x2880	; 0x2880 <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2862:	8c e0       	ldi	r24, 0x0C	; 12
    2864:	0e 94 40 14 	call	0x2880	; 0x2880 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	0e 94 40 14 	call	0x2880	; 0x2880 <LCD_sendCommand>
}
    286e:	2e 96       	adiw	r28, 0x0e	; 14
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	f8 94       	cli
    2874:	de bf       	out	0x3e, r29	; 62
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	cd bf       	out	0x3d, r28	; 61
    287a:	cf 91       	pop	r28
    287c:	df 91       	pop	r29
    287e:	08 95       	ret

00002880 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    2880:	df 93       	push	r29
    2882:	cf 93       	push	r28
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	e9 97       	sbiw	r28, 0x39	; 57
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	f8 94       	cli
    288e:	de bf       	out	0x3e, r29	; 62
    2890:	0f be       	out	0x3f, r0	; 63
    2892:	cd bf       	out	0x3d, r28	; 61
    2894:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID	, LOGIC_LOW); /* Rs = 0 */
    2896:	83 e0       	ldi	r24, 0x03	; 3
    2898:	66 e0       	ldi	r22, 0x06	; 6
    289a:	40 e0       	ldi	r20, 0x00	; 0
    289c:	0e 94 59 10 	call	0x20b2	; 0x20b2 <GPIO_writePin>
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	a0 e8       	ldi	r26, 0x80	; 128
    28a6:	bf e3       	ldi	r27, 0x3F	; 63
    28a8:	8d ab       	std	Y+53, r24	; 0x35
    28aa:	9e ab       	std	Y+54, r25	; 0x36
    28ac:	af ab       	std	Y+55, r26	; 0x37
    28ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b0:	6d a9       	ldd	r22, Y+53	; 0x35
    28b2:	7e a9       	ldd	r23, Y+54	; 0x36
    28b4:	8f a9       	ldd	r24, Y+55	; 0x37
    28b6:	98 ad       	ldd	r25, Y+56	; 0x38
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	4a ef       	ldi	r20, 0xFA	; 250
    28be:	54 e4       	ldi	r21, 0x44	; 68
    28c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	89 ab       	std	Y+49, r24	; 0x31
    28ca:	9a ab       	std	Y+50, r25	; 0x32
    28cc:	ab ab       	std	Y+51, r26	; 0x33
    28ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28d0:	69 a9       	ldd	r22, Y+49	; 0x31
    28d2:	7a a9       	ldd	r23, Y+50	; 0x32
    28d4:	8b a9       	ldd	r24, Y+51	; 0x33
    28d6:	9c a9       	ldd	r25, Y+52	; 0x34
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	40 e8       	ldi	r20, 0x80	; 128
    28de:	5f e3       	ldi	r21, 0x3F	; 63
    28e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28e4:	88 23       	and	r24, r24
    28e6:	2c f4       	brge	.+10     	; 0x28f2 <LCD_sendCommand+0x72>
		__ticks = 1;
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	98 ab       	std	Y+48, r25	; 0x30
    28ee:	8f a7       	std	Y+47, r24	; 0x2f
    28f0:	3f c0       	rjmp	.+126    	; 0x2970 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    28f2:	69 a9       	ldd	r22, Y+49	; 0x31
    28f4:	7a a9       	ldd	r23, Y+50	; 0x32
    28f6:	8b a9       	ldd	r24, Y+51	; 0x33
    28f8:	9c a9       	ldd	r25, Y+52	; 0x34
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	3f ef       	ldi	r19, 0xFF	; 255
    28fe:	4f e7       	ldi	r20, 0x7F	; 127
    2900:	57 e4       	ldi	r21, 0x47	; 71
    2902:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2906:	18 16       	cp	r1, r24
    2908:	4c f5       	brge	.+82     	; 0x295c <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    290a:	6d a9       	ldd	r22, Y+53	; 0x35
    290c:	7e a9       	ldd	r23, Y+54	; 0x36
    290e:	8f a9       	ldd	r24, Y+55	; 0x37
    2910:	98 ad       	ldd	r25, Y+56	; 0x38
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	40 e2       	ldi	r20, 0x20	; 32
    2918:	51 e4       	ldi	r21, 0x41	; 65
    291a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	bc 01       	movw	r22, r24
    2924:	cd 01       	movw	r24, r26
    2926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	98 ab       	std	Y+48, r25	; 0x30
    2930:	8f a7       	std	Y+47, r24	; 0x2f
    2932:	0f c0       	rjmp	.+30     	; 0x2952 <LCD_sendCommand+0xd2>
    2934:	88 ec       	ldi	r24, 0xC8	; 200
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	9e a7       	std	Y+46, r25	; 0x2e
    293a:	8d a7       	std	Y+45, r24	; 0x2d
    293c:	8d a5       	ldd	r24, Y+45	; 0x2d
    293e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2940:	01 97       	sbiw	r24, 0x01	; 1
    2942:	f1 f7       	brne	.-4      	; 0x2940 <LCD_sendCommand+0xc0>
    2944:	9e a7       	std	Y+46, r25	; 0x2e
    2946:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2948:	8f a5       	ldd	r24, Y+47	; 0x2f
    294a:	98 a9       	ldd	r25, Y+48	; 0x30
    294c:	01 97       	sbiw	r24, 0x01	; 1
    294e:	98 ab       	std	Y+48, r25	; 0x30
    2950:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2952:	8f a5       	ldd	r24, Y+47	; 0x2f
    2954:	98 a9       	ldd	r25, Y+48	; 0x30
    2956:	00 97       	sbiw	r24, 0x00	; 0
    2958:	69 f7       	brne	.-38     	; 0x2934 <LCD_sendCommand+0xb4>
    295a:	14 c0       	rjmp	.+40     	; 0x2984 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    295c:	69 a9       	ldd	r22, Y+49	; 0x31
    295e:	7a a9       	ldd	r23, Y+50	; 0x32
    2960:	8b a9       	ldd	r24, Y+51	; 0x33
    2962:	9c a9       	ldd	r25, Y+52	; 0x34
    2964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	98 ab       	std	Y+48, r25	; 0x30
    296e:	8f a7       	std	Y+47, r24	; 0x2f
    2970:	8f a5       	ldd	r24, Y+47	; 0x2f
    2972:	98 a9       	ldd	r25, Y+48	; 0x30
    2974:	9c a7       	std	Y+44, r25	; 0x2c
    2976:	8b a7       	std	Y+43, r24	; 0x2b
    2978:	8b a5       	ldd	r24, Y+43	; 0x2b
    297a:	9c a5       	ldd	r25, Y+44	; 0x2c
    297c:	01 97       	sbiw	r24, 0x01	; 1
    297e:	f1 f7       	brne	.-4      	; 0x297c <LCD_sendCommand+0xfc>
    2980:	9c a7       	std	Y+44, r25	; 0x2c
    2982:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable = 1 */
    2984:	83 e0       	ldi	r24, 0x03	; 3
    2986:	67 e0       	ldi	r22, 0x07	; 7
    2988:	41 e0       	ldi	r20, 0x01	; 1
    298a:	0e 94 59 10 	call	0x20b2	; 0x20b2 <GPIO_writePin>
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	a0 e8       	ldi	r26, 0x80	; 128
    2994:	bf e3       	ldi	r27, 0x3F	; 63
    2996:	8f a3       	std	Y+39, r24	; 0x27
    2998:	98 a7       	std	Y+40, r25	; 0x28
    299a:	a9 a7       	std	Y+41, r26	; 0x29
    299c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    299e:	6f a1       	ldd	r22, Y+39	; 0x27
    29a0:	78 a5       	ldd	r23, Y+40	; 0x28
    29a2:	89 a5       	ldd	r24, Y+41	; 0x29
    29a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	4a ef       	ldi	r20, 0xFA	; 250
    29ac:	54 e4       	ldi	r21, 0x44	; 68
    29ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	8b a3       	std	Y+35, r24	; 0x23
    29b8:	9c a3       	std	Y+36, r25	; 0x24
    29ba:	ad a3       	std	Y+37, r26	; 0x25
    29bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29be:	6b a1       	ldd	r22, Y+35	; 0x23
    29c0:	7c a1       	ldd	r23, Y+36	; 0x24
    29c2:	8d a1       	ldd	r24, Y+37	; 0x25
    29c4:	9e a1       	ldd	r25, Y+38	; 0x26
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	40 e8       	ldi	r20, 0x80	; 128
    29cc:	5f e3       	ldi	r21, 0x3F	; 63
    29ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d2:	88 23       	and	r24, r24
    29d4:	2c f4       	brge	.+10     	; 0x29e0 <LCD_sendCommand+0x160>
		__ticks = 1;
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	9a a3       	std	Y+34, r25	; 0x22
    29dc:	89 a3       	std	Y+33, r24	; 0x21
    29de:	3f c0       	rjmp	.+126    	; 0x2a5e <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    29e0:	6b a1       	ldd	r22, Y+35	; 0x23
    29e2:	7c a1       	ldd	r23, Y+36	; 0x24
    29e4:	8d a1       	ldd	r24, Y+37	; 0x25
    29e6:	9e a1       	ldd	r25, Y+38	; 0x26
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	3f ef       	ldi	r19, 0xFF	; 255
    29ec:	4f e7       	ldi	r20, 0x7F	; 127
    29ee:	57 e4       	ldi	r21, 0x47	; 71
    29f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29f4:	18 16       	cp	r1, r24
    29f6:	4c f5       	brge	.+82     	; 0x2a4a <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f8:	6f a1       	ldd	r22, Y+39	; 0x27
    29fa:	78 a5       	ldd	r23, Y+40	; 0x28
    29fc:	89 a5       	ldd	r24, Y+41	; 0x29
    29fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	40 e2       	ldi	r20, 0x20	; 32
    2a06:	51 e4       	ldi	r21, 0x41	; 65
    2a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	bc 01       	movw	r22, r24
    2a12:	cd 01       	movw	r24, r26
    2a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	9a a3       	std	Y+34, r25	; 0x22
    2a1e:	89 a3       	std	Y+33, r24	; 0x21
    2a20:	0f c0       	rjmp	.+30     	; 0x2a40 <LCD_sendCommand+0x1c0>
    2a22:	88 ec       	ldi	r24, 0xC8	; 200
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	98 a3       	std	Y+32, r25	; 0x20
    2a28:	8f 8f       	std	Y+31, r24	; 0x1f
    2a2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a2c:	98 a1       	ldd	r25, Y+32	; 0x20
    2a2e:	01 97       	sbiw	r24, 0x01	; 1
    2a30:	f1 f7       	brne	.-4      	; 0x2a2e <LCD_sendCommand+0x1ae>
    2a32:	98 a3       	std	Y+32, r25	; 0x20
    2a34:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a36:	89 a1       	ldd	r24, Y+33	; 0x21
    2a38:	9a a1       	ldd	r25, Y+34	; 0x22
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	9a a3       	std	Y+34, r25	; 0x22
    2a3e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a40:	89 a1       	ldd	r24, Y+33	; 0x21
    2a42:	9a a1       	ldd	r25, Y+34	; 0x22
    2a44:	00 97       	sbiw	r24, 0x00	; 0
    2a46:	69 f7       	brne	.-38     	; 0x2a22 <LCD_sendCommand+0x1a2>
    2a48:	14 c0       	rjmp	.+40     	; 0x2a72 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a4a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a4c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a4e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a50:	9e a1       	ldd	r25, Y+38	; 0x26
    2a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	9a a3       	std	Y+34, r25	; 0x22
    2a5c:	89 a3       	std	Y+33, r24	; 0x21
    2a5e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a60:	9a a1       	ldd	r25, Y+34	; 0x22
    2a62:	9e 8f       	std	Y+30, r25	; 0x1e
    2a64:	8d 8f       	std	Y+29, r24	; 0x1d
    2a66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a68:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	f1 f7       	brne	.-4      	; 0x2a6a <LCD_sendCommand+0x1ea>
    2a6e:	9e 8f       	std	Y+30, r25	; 0x1e
    2a70:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT_ID, command); /* write command */
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	69 ad       	ldd	r22, Y+57	; 0x39
    2a76:	0e 94 23 12 	call	0x2446	; 0x2446 <GPIO_writePort>
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	a0 e8       	ldi	r26, 0x80	; 128
    2a80:	bf e3       	ldi	r27, 0x3F	; 63
    2a82:	89 8f       	std	Y+25, r24	; 0x19
    2a84:	9a 8f       	std	Y+26, r25	; 0x1a
    2a86:	ab 8f       	std	Y+27, r26	; 0x1b
    2a88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	4a ef       	ldi	r20, 0xFA	; 250
    2a98:	54 e4       	ldi	r21, 0x44	; 68
    2a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	8d 8b       	std	Y+21, r24	; 0x15
    2aa4:	9e 8b       	std	Y+22, r25	; 0x16
    2aa6:	af 8b       	std	Y+23, r26	; 0x17
    2aa8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2aaa:	6d 89       	ldd	r22, Y+21	; 0x15
    2aac:	7e 89       	ldd	r23, Y+22	; 0x16
    2aae:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e8       	ldi	r20, 0x80	; 128
    2ab8:	5f e3       	ldi	r21, 0x3F	; 63
    2aba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2abe:	88 23       	and	r24, r24
    2ac0:	2c f4       	brge	.+10     	; 0x2acc <LCD_sendCommand+0x24c>
		__ticks = 1;
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	9c 8b       	std	Y+20, r25	; 0x14
    2ac8:	8b 8b       	std	Y+19, r24	; 0x13
    2aca:	3f c0       	rjmp	.+126    	; 0x2b4a <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2acc:	6d 89       	ldd	r22, Y+21	; 0x15
    2ace:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	3f ef       	ldi	r19, 0xFF	; 255
    2ad8:	4f e7       	ldi	r20, 0x7F	; 127
    2ada:	57 e4       	ldi	r21, 0x47	; 71
    2adc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ae0:	18 16       	cp	r1, r24
    2ae2:	4c f5       	brge	.+82     	; 0x2b36 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ae6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ae8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	40 e2       	ldi	r20, 0x20	; 32
    2af2:	51 e4       	ldi	r21, 0x41	; 65
    2af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	bc 01       	movw	r22, r24
    2afe:	cd 01       	movw	r24, r26
    2b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	9c 8b       	std	Y+20, r25	; 0x14
    2b0a:	8b 8b       	std	Y+19, r24	; 0x13
    2b0c:	0f c0       	rjmp	.+30     	; 0x2b2c <LCD_sendCommand+0x2ac>
    2b0e:	88 ec       	ldi	r24, 0xC8	; 200
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	9a 8b       	std	Y+18, r25	; 0x12
    2b14:	89 8b       	std	Y+17, r24	; 0x11
    2b16:	89 89       	ldd	r24, Y+17	; 0x11
    2b18:	9a 89       	ldd	r25, Y+18	; 0x12
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	f1 f7       	brne	.-4      	; 0x2b1a <LCD_sendCommand+0x29a>
    2b1e:	9a 8b       	std	Y+18, r25	; 0x12
    2b20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b22:	8b 89       	ldd	r24, Y+19	; 0x13
    2b24:	9c 89       	ldd	r25, Y+20	; 0x14
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	9c 8b       	std	Y+20, r25	; 0x14
    2b2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b30:	00 97       	sbiw	r24, 0x00	; 0
    2b32:	69 f7       	brne	.-38     	; 0x2b0e <LCD_sendCommand+0x28e>
    2b34:	14 c0       	rjmp	.+40     	; 0x2b5e <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b36:	6d 89       	ldd	r22, Y+21	; 0x15
    2b38:	7e 89       	ldd	r23, Y+22	; 0x16
    2b3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	9c 8b       	std	Y+20, r25	; 0x14
    2b48:	8b 8b       	std	Y+19, r24	; 0x13
    2b4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b4e:	98 8b       	std	Y+16, r25	; 0x10
    2b50:	8f 87       	std	Y+15, r24	; 0x0f
    2b52:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b54:	98 89       	ldd	r25, Y+16	; 0x10
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	f1 f7       	brne	.-4      	; 0x2b56 <LCD_sendCommand+0x2d6>
    2b5a:	98 8b       	std	Y+16, r25	; 0x10
    2b5c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Enable = 1 */
    2b5e:	83 e0       	ldi	r24, 0x03	; 3
    2b60:	67 e0       	ldi	r22, 0x07	; 7
    2b62:	40 e0       	ldi	r20, 0x00	; 0
    2b64:	0e 94 59 10 	call	0x20b2	; 0x20b2 <GPIO_writePin>
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	a0 e8       	ldi	r26, 0x80	; 128
    2b6e:	bf e3       	ldi	r27, 0x3F	; 63
    2b70:	8b 87       	std	Y+11, r24	; 0x0b
    2b72:	9c 87       	std	Y+12, r25	; 0x0c
    2b74:	ad 87       	std	Y+13, r26	; 0x0d
    2b76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	4a ef       	ldi	r20, 0xFA	; 250
    2b86:	54 e4       	ldi	r21, 0x44	; 68
    2b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	8f 83       	std	Y+7, r24	; 0x07
    2b92:	98 87       	std	Y+8, r25	; 0x08
    2b94:	a9 87       	std	Y+9, r26	; 0x09
    2b96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b98:	6f 81       	ldd	r22, Y+7	; 0x07
    2b9a:	78 85       	ldd	r23, Y+8	; 0x08
    2b9c:	89 85       	ldd	r24, Y+9	; 0x09
    2b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	40 e8       	ldi	r20, 0x80	; 128
    2ba6:	5f e3       	ldi	r21, 0x3F	; 63
    2ba8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bac:	88 23       	and	r24, r24
    2bae:	2c f4       	brge	.+10     	; 0x2bba <LCD_sendCommand+0x33a>
		__ticks = 1;
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	9e 83       	std	Y+6, r25	; 0x06
    2bb6:	8d 83       	std	Y+5, r24	; 0x05
    2bb8:	3f c0       	rjmp	.+126    	; 0x2c38 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2bba:	6f 81       	ldd	r22, Y+7	; 0x07
    2bbc:	78 85       	ldd	r23, Y+8	; 0x08
    2bbe:	89 85       	ldd	r24, Y+9	; 0x09
    2bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	3f ef       	ldi	r19, 0xFF	; 255
    2bc6:	4f e7       	ldi	r20, 0x7F	; 127
    2bc8:	57 e4       	ldi	r21, 0x47	; 71
    2bca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bce:	18 16       	cp	r1, r24
    2bd0:	4c f5       	brge	.+82     	; 0x2c24 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	40 e2       	ldi	r20, 0x20	; 32
    2be0:	51 e4       	ldi	r21, 0x41	; 65
    2be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	bc 01       	movw	r22, r24
    2bec:	cd 01       	movw	r24, r26
    2bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	9e 83       	std	Y+6, r25	; 0x06
    2bf8:	8d 83       	std	Y+5, r24	; 0x05
    2bfa:	0f c0       	rjmp	.+30     	; 0x2c1a <LCD_sendCommand+0x39a>
    2bfc:	88 ec       	ldi	r24, 0xC8	; 200
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	9c 83       	std	Y+4, r25	; 0x04
    2c02:	8b 83       	std	Y+3, r24	; 0x03
    2c04:	8b 81       	ldd	r24, Y+3	; 0x03
    2c06:	9c 81       	ldd	r25, Y+4	; 0x04
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	f1 f7       	brne	.-4      	; 0x2c08 <LCD_sendCommand+0x388>
    2c0c:	9c 83       	std	Y+4, r25	; 0x04
    2c0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c10:	8d 81       	ldd	r24, Y+5	; 0x05
    2c12:	9e 81       	ldd	r25, Y+6	; 0x06
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	9e 83       	std	Y+6, r25	; 0x06
    2c18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	69 f7       	brne	.-38     	; 0x2bfc <LCD_sendCommand+0x37c>
    2c22:	14 c0       	rjmp	.+40     	; 0x2c4c <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c24:	6f 81       	ldd	r22, Y+7	; 0x07
    2c26:	78 85       	ldd	r23, Y+8	; 0x08
    2c28:	89 85       	ldd	r24, Y+9	; 0x09
    2c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	9e 83       	std	Y+6, r25	; 0x06
    2c36:	8d 83       	std	Y+5, r24	; 0x05
    2c38:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3c:	9a 83       	std	Y+2, r25	; 0x02
    2c3e:	89 83       	std	Y+1, r24	; 0x01
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
    2c42:	9a 81       	ldd	r25, Y+2	; 0x02
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	f1 f7       	brne	.-4      	; 0x2c44 <LCD_sendCommand+0x3c4>
    2c48:	9a 83       	std	Y+2, r25	; 0x02
    2c4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);

#endif
}
    2c4c:	e9 96       	adiw	r28, 0x39	; 57
    2c4e:	0f b6       	in	r0, 0x3f	; 63
    2c50:	f8 94       	cli
    2c52:	de bf       	out	0x3e, r29	; 62
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	cd bf       	out	0x3d, r28	; 61
    2c58:	cf 91       	pop	r28
    2c5a:	df 91       	pop	r29
    2c5c:	08 95       	ret

00002c5e <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    2c5e:	df 93       	push	r29
    2c60:	cf 93       	push	r28
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    2c66:	e9 97       	sbiw	r28, 0x39	; 57
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	f8 94       	cli
    2c6c:	de bf       	out	0x3e, r29	; 62
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	cd bf       	out	0x3d, r28	; 61
    2c72:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID	, LOGIC_HIGH); /* Rs = 0 */
    2c74:	83 e0       	ldi	r24, 0x03	; 3
    2c76:	66 e0       	ldi	r22, 0x06	; 6
    2c78:	41 e0       	ldi	r20, 0x01	; 1
    2c7a:	0e 94 59 10 	call	0x20b2	; 0x20b2 <GPIO_writePin>
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	a0 e8       	ldi	r26, 0x80	; 128
    2c84:	bf e3       	ldi	r27, 0x3F	; 63
    2c86:	8d ab       	std	Y+53, r24	; 0x35
    2c88:	9e ab       	std	Y+54, r25	; 0x36
    2c8a:	af ab       	std	Y+55, r26	; 0x37
    2c8c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c8e:	6d a9       	ldd	r22, Y+53	; 0x35
    2c90:	7e a9       	ldd	r23, Y+54	; 0x36
    2c92:	8f a9       	ldd	r24, Y+55	; 0x37
    2c94:	98 ad       	ldd	r25, Y+56	; 0x38
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	4a ef       	ldi	r20, 0xFA	; 250
    2c9c:	54 e4       	ldi	r21, 0x44	; 68
    2c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	89 ab       	std	Y+49, r24	; 0x31
    2ca8:	9a ab       	std	Y+50, r25	; 0x32
    2caa:	ab ab       	std	Y+51, r26	; 0x33
    2cac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2cae:	69 a9       	ldd	r22, Y+49	; 0x31
    2cb0:	7a a9       	ldd	r23, Y+50	; 0x32
    2cb2:	8b a9       	ldd	r24, Y+51	; 0x33
    2cb4:	9c a9       	ldd	r25, Y+52	; 0x34
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	40 e8       	ldi	r20, 0x80	; 128
    2cbc:	5f e3       	ldi	r21, 0x3F	; 63
    2cbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cc2:	88 23       	and	r24, r24
    2cc4:	2c f4       	brge	.+10     	; 0x2cd0 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	98 ab       	std	Y+48, r25	; 0x30
    2ccc:	8f a7       	std	Y+47, r24	; 0x2f
    2cce:	3f c0       	rjmp	.+126    	; 0x2d4e <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2cd0:	69 a9       	ldd	r22, Y+49	; 0x31
    2cd2:	7a a9       	ldd	r23, Y+50	; 0x32
    2cd4:	8b a9       	ldd	r24, Y+51	; 0x33
    2cd6:	9c a9       	ldd	r25, Y+52	; 0x34
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	3f ef       	ldi	r19, 0xFF	; 255
    2cdc:	4f e7       	ldi	r20, 0x7F	; 127
    2cde:	57 e4       	ldi	r21, 0x47	; 71
    2ce0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ce4:	18 16       	cp	r1, r24
    2ce6:	4c f5       	brge	.+82     	; 0x2d3a <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce8:	6d a9       	ldd	r22, Y+53	; 0x35
    2cea:	7e a9       	ldd	r23, Y+54	; 0x36
    2cec:	8f a9       	ldd	r24, Y+55	; 0x37
    2cee:	98 ad       	ldd	r25, Y+56	; 0x38
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	40 e2       	ldi	r20, 0x20	; 32
    2cf6:	51 e4       	ldi	r21, 0x41	; 65
    2cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	bc 01       	movw	r22, r24
    2d02:	cd 01       	movw	r24, r26
    2d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	98 ab       	std	Y+48, r25	; 0x30
    2d0e:	8f a7       	std	Y+47, r24	; 0x2f
    2d10:	0f c0       	rjmp	.+30     	; 0x2d30 <LCD_displayCharacter+0xd2>
    2d12:	88 ec       	ldi	r24, 0xC8	; 200
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	9e a7       	std	Y+46, r25	; 0x2e
    2d18:	8d a7       	std	Y+45, r24	; 0x2d
    2d1a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d1c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d1e:	01 97       	sbiw	r24, 0x01	; 1
    2d20:	f1 f7       	brne	.-4      	; 0x2d1e <LCD_displayCharacter+0xc0>
    2d22:	9e a7       	std	Y+46, r25	; 0x2e
    2d24:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d26:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d28:	98 a9       	ldd	r25, Y+48	; 0x30
    2d2a:	01 97       	sbiw	r24, 0x01	; 1
    2d2c:	98 ab       	std	Y+48, r25	; 0x30
    2d2e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d30:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d32:	98 a9       	ldd	r25, Y+48	; 0x30
    2d34:	00 97       	sbiw	r24, 0x00	; 0
    2d36:	69 f7       	brne	.-38     	; 0x2d12 <LCD_displayCharacter+0xb4>
    2d38:	14 c0       	rjmp	.+40     	; 0x2d62 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d3a:	69 a9       	ldd	r22, Y+49	; 0x31
    2d3c:	7a a9       	ldd	r23, Y+50	; 0x32
    2d3e:	8b a9       	ldd	r24, Y+51	; 0x33
    2d40:	9c a9       	ldd	r25, Y+52	; 0x34
    2d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d46:	dc 01       	movw	r26, r24
    2d48:	cb 01       	movw	r24, r22
    2d4a:	98 ab       	std	Y+48, r25	; 0x30
    2d4c:	8f a7       	std	Y+47, r24	; 0x2f
    2d4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d50:	98 a9       	ldd	r25, Y+48	; 0x30
    2d52:	9c a7       	std	Y+44, r25	; 0x2c
    2d54:	8b a7       	std	Y+43, r24	; 0x2b
    2d56:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d58:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	f1 f7       	brne	.-4      	; 0x2d5a <LCD_displayCharacter+0xfc>
    2d5e:	9c a7       	std	Y+44, r25	; 0x2c
    2d60:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable = 1 */
    2d62:	83 e0       	ldi	r24, 0x03	; 3
    2d64:	67 e0       	ldi	r22, 0x07	; 7
    2d66:	41 e0       	ldi	r20, 0x01	; 1
    2d68:	0e 94 59 10 	call	0x20b2	; 0x20b2 <GPIO_writePin>
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	a0 e8       	ldi	r26, 0x80	; 128
    2d72:	bf e3       	ldi	r27, 0x3F	; 63
    2d74:	8f a3       	std	Y+39, r24	; 0x27
    2d76:	98 a7       	std	Y+40, r25	; 0x28
    2d78:	a9 a7       	std	Y+41, r26	; 0x29
    2d7a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d7c:	6f a1       	ldd	r22, Y+39	; 0x27
    2d7e:	78 a5       	ldd	r23, Y+40	; 0x28
    2d80:	89 a5       	ldd	r24, Y+41	; 0x29
    2d82:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d84:	20 e0       	ldi	r18, 0x00	; 0
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	4a ef       	ldi	r20, 0xFA	; 250
    2d8a:	54 e4       	ldi	r21, 0x44	; 68
    2d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	8b a3       	std	Y+35, r24	; 0x23
    2d96:	9c a3       	std	Y+36, r25	; 0x24
    2d98:	ad a3       	std	Y+37, r26	; 0x25
    2d9a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2da0:	8d a1       	ldd	r24, Y+37	; 0x25
    2da2:	9e a1       	ldd	r25, Y+38	; 0x26
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	40 e8       	ldi	r20, 0x80	; 128
    2daa:	5f e3       	ldi	r21, 0x3F	; 63
    2dac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2db0:	88 23       	and	r24, r24
    2db2:	2c f4       	brge	.+10     	; 0x2dbe <LCD_displayCharacter+0x160>
		__ticks = 1;
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	9a a3       	std	Y+34, r25	; 0x22
    2dba:	89 a3       	std	Y+33, r24	; 0x21
    2dbc:	3f c0       	rjmp	.+126    	; 0x2e3c <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2dbe:	6b a1       	ldd	r22, Y+35	; 0x23
    2dc0:	7c a1       	ldd	r23, Y+36	; 0x24
    2dc2:	8d a1       	ldd	r24, Y+37	; 0x25
    2dc4:	9e a1       	ldd	r25, Y+38	; 0x26
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	3f ef       	ldi	r19, 0xFF	; 255
    2dca:	4f e7       	ldi	r20, 0x7F	; 127
    2dcc:	57 e4       	ldi	r21, 0x47	; 71
    2dce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dd2:	18 16       	cp	r1, r24
    2dd4:	4c f5       	brge	.+82     	; 0x2e28 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd6:	6f a1       	ldd	r22, Y+39	; 0x27
    2dd8:	78 a5       	ldd	r23, Y+40	; 0x28
    2dda:	89 a5       	ldd	r24, Y+41	; 0x29
    2ddc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	40 e2       	ldi	r20, 0x20	; 32
    2de4:	51 e4       	ldi	r21, 0x41	; 65
    2de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	bc 01       	movw	r22, r24
    2df0:	cd 01       	movw	r24, r26
    2df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	9a a3       	std	Y+34, r25	; 0x22
    2dfc:	89 a3       	std	Y+33, r24	; 0x21
    2dfe:	0f c0       	rjmp	.+30     	; 0x2e1e <LCD_displayCharacter+0x1c0>
    2e00:	88 ec       	ldi	r24, 0xC8	; 200
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	98 a3       	std	Y+32, r25	; 0x20
    2e06:	8f 8f       	std	Y+31, r24	; 0x1f
    2e08:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e0a:	98 a1       	ldd	r25, Y+32	; 0x20
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	f1 f7       	brne	.-4      	; 0x2e0c <LCD_displayCharacter+0x1ae>
    2e10:	98 a3       	std	Y+32, r25	; 0x20
    2e12:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e14:	89 a1       	ldd	r24, Y+33	; 0x21
    2e16:	9a a1       	ldd	r25, Y+34	; 0x22
    2e18:	01 97       	sbiw	r24, 0x01	; 1
    2e1a:	9a a3       	std	Y+34, r25	; 0x22
    2e1c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e20:	9a a1       	ldd	r25, Y+34	; 0x22
    2e22:	00 97       	sbiw	r24, 0x00	; 0
    2e24:	69 f7       	brne	.-38     	; 0x2e00 <LCD_displayCharacter+0x1a2>
    2e26:	14 c0       	rjmp	.+40     	; 0x2e50 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e28:	6b a1       	ldd	r22, Y+35	; 0x23
    2e2a:	7c a1       	ldd	r23, Y+36	; 0x24
    2e2c:	8d a1       	ldd	r24, Y+37	; 0x25
    2e2e:	9e a1       	ldd	r25, Y+38	; 0x26
    2e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	9a a3       	std	Y+34, r25	; 0x22
    2e3a:	89 a3       	std	Y+33, r24	; 0x21
    2e3c:	89 a1       	ldd	r24, Y+33	; 0x21
    2e3e:	9a a1       	ldd	r25, Y+34	; 0x22
    2e40:	9e 8f       	std	Y+30, r25	; 0x1e
    2e42:	8d 8f       	std	Y+29, r24	; 0x1d
    2e44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e46:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e48:	01 97       	sbiw	r24, 0x01	; 1
    2e4a:	f1 f7       	brne	.-4      	; 0x2e48 <LCD_displayCharacter+0x1ea>
    2e4c:	9e 8f       	std	Y+30, r25	; 0x1e
    2e4e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT_ID, data); /* write command */
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	69 ad       	ldd	r22, Y+57	; 0x39
    2e54:	0e 94 23 12 	call	0x2446	; 0x2446 <GPIO_writePort>
    2e58:	80 e0       	ldi	r24, 0x00	; 0
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	a0 e8       	ldi	r26, 0x80	; 128
    2e5e:	bf e3       	ldi	r27, 0x3F	; 63
    2e60:	89 8f       	std	Y+25, r24	; 0x19
    2e62:	9a 8f       	std	Y+26, r25	; 0x1a
    2e64:	ab 8f       	std	Y+27, r26	; 0x1b
    2e66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e68:	69 8d       	ldd	r22, Y+25	; 0x19
    2e6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	4a ef       	ldi	r20, 0xFA	; 250
    2e76:	54 e4       	ldi	r21, 0x44	; 68
    2e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	8d 8b       	std	Y+21, r24	; 0x15
    2e82:	9e 8b       	std	Y+22, r25	; 0x16
    2e84:	af 8b       	std	Y+23, r26	; 0x17
    2e86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e88:	6d 89       	ldd	r22, Y+21	; 0x15
    2e8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	40 e8       	ldi	r20, 0x80	; 128
    2e96:	5f e3       	ldi	r21, 0x3F	; 63
    2e98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e9c:	88 23       	and	r24, r24
    2e9e:	2c f4       	brge	.+10     	; 0x2eaa <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	9c 8b       	std	Y+20, r25	; 0x14
    2ea6:	8b 8b       	std	Y+19, r24	; 0x13
    2ea8:	3f c0       	rjmp	.+126    	; 0x2f28 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2eaa:	6d 89       	ldd	r22, Y+21	; 0x15
    2eac:	7e 89       	ldd	r23, Y+22	; 0x16
    2eae:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	3f ef       	ldi	r19, 0xFF	; 255
    2eb6:	4f e7       	ldi	r20, 0x7F	; 127
    2eb8:	57 e4       	ldi	r21, 0x47	; 71
    2eba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ebe:	18 16       	cp	r1, r24
    2ec0:	4c f5       	brge	.+82     	; 0x2f14 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ec4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ec6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ec8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	40 e2       	ldi	r20, 0x20	; 32
    2ed0:	51 e4       	ldi	r21, 0x41	; 65
    2ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	bc 01       	movw	r22, r24
    2edc:	cd 01       	movw	r24, r26
    2ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	9c 8b       	std	Y+20, r25	; 0x14
    2ee8:	8b 8b       	std	Y+19, r24	; 0x13
    2eea:	0f c0       	rjmp	.+30     	; 0x2f0a <LCD_displayCharacter+0x2ac>
    2eec:	88 ec       	ldi	r24, 0xC8	; 200
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	9a 8b       	std	Y+18, r25	; 0x12
    2ef2:	89 8b       	std	Y+17, r24	; 0x11
    2ef4:	89 89       	ldd	r24, Y+17	; 0x11
    2ef6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <LCD_displayCharacter+0x29a>
    2efc:	9a 8b       	std	Y+18, r25	; 0x12
    2efe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f00:	8b 89       	ldd	r24, Y+19	; 0x13
    2f02:	9c 89       	ldd	r25, Y+20	; 0x14
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	9c 8b       	std	Y+20, r25	; 0x14
    2f08:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f0e:	00 97       	sbiw	r24, 0x00	; 0
    2f10:	69 f7       	brne	.-38     	; 0x2eec <LCD_displayCharacter+0x28e>
    2f12:	14 c0       	rjmp	.+40     	; 0x2f3c <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f14:	6d 89       	ldd	r22, Y+21	; 0x15
    2f16:	7e 89       	ldd	r23, Y+22	; 0x16
    2f18:	8f 89       	ldd	r24, Y+23	; 0x17
    2f1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	9c 8b       	std	Y+20, r25	; 0x14
    2f26:	8b 8b       	std	Y+19, r24	; 0x13
    2f28:	8b 89       	ldd	r24, Y+19	; 0x13
    2f2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f2c:	98 8b       	std	Y+16, r25	; 0x10
    2f2e:	8f 87       	std	Y+15, r24	; 0x0f
    2f30:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f32:	98 89       	ldd	r25, Y+16	; 0x10
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	f1 f7       	brne	.-4      	; 0x2f34 <LCD_displayCharacter+0x2d6>
    2f38:	98 8b       	std	Y+16, r25	; 0x10
    2f3a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Enable = 1 */
    2f3c:	83 e0       	ldi	r24, 0x03	; 3
    2f3e:	67 e0       	ldi	r22, 0x07	; 7
    2f40:	40 e0       	ldi	r20, 0x00	; 0
    2f42:	0e 94 59 10 	call	0x20b2	; 0x20b2 <GPIO_writePin>
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	a0 e8       	ldi	r26, 0x80	; 128
    2f4c:	bf e3       	ldi	r27, 0x3F	; 63
    2f4e:	8b 87       	std	Y+11, r24	; 0x0b
    2f50:	9c 87       	std	Y+12, r25	; 0x0c
    2f52:	ad 87       	std	Y+13, r26	; 0x0d
    2f54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f56:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f58:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	4a ef       	ldi	r20, 0xFA	; 250
    2f64:	54 e4       	ldi	r21, 0x44	; 68
    2f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	8f 83       	std	Y+7, r24	; 0x07
    2f70:	98 87       	std	Y+8, r25	; 0x08
    2f72:	a9 87       	std	Y+9, r26	; 0x09
    2f74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f76:	6f 81       	ldd	r22, Y+7	; 0x07
    2f78:	78 85       	ldd	r23, Y+8	; 0x08
    2f7a:	89 85       	ldd	r24, Y+9	; 0x09
    2f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	40 e8       	ldi	r20, 0x80	; 128
    2f84:	5f e3       	ldi	r21, 0x3F	; 63
    2f86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f8a:	88 23       	and	r24, r24
    2f8c:	2c f4       	brge	.+10     	; 0x2f98 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	9e 83       	std	Y+6, r25	; 0x06
    2f94:	8d 83       	std	Y+5, r24	; 0x05
    2f96:	3f c0       	rjmp	.+126    	; 0x3016 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2f98:	6f 81       	ldd	r22, Y+7	; 0x07
    2f9a:	78 85       	ldd	r23, Y+8	; 0x08
    2f9c:	89 85       	ldd	r24, Y+9	; 0x09
    2f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	3f ef       	ldi	r19, 0xFF	; 255
    2fa4:	4f e7       	ldi	r20, 0x7F	; 127
    2fa6:	57 e4       	ldi	r21, 0x47	; 71
    2fa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fac:	18 16       	cp	r1, r24
    2fae:	4c f5       	brge	.+82     	; 0x3002 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	40 e2       	ldi	r20, 0x20	; 32
    2fbe:	51 e4       	ldi	r21, 0x41	; 65
    2fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	bc 01       	movw	r22, r24
    2fca:	cd 01       	movw	r24, r26
    2fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	9e 83       	std	Y+6, r25	; 0x06
    2fd6:	8d 83       	std	Y+5, r24	; 0x05
    2fd8:	0f c0       	rjmp	.+30     	; 0x2ff8 <LCD_displayCharacter+0x39a>
    2fda:	88 ec       	ldi	r24, 0xC8	; 200
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	9c 83       	std	Y+4, r25	; 0x04
    2fe0:	8b 83       	std	Y+3, r24	; 0x03
    2fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	f1 f7       	brne	.-4      	; 0x2fe6 <LCD_displayCharacter+0x388>
    2fea:	9c 83       	std	Y+4, r25	; 0x04
    2fec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fee:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	9e 83       	std	Y+6, r25	; 0x06
    2ff6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffa:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffc:	00 97       	sbiw	r24, 0x00	; 0
    2ffe:	69 f7       	brne	.-38     	; 0x2fda <LCD_displayCharacter+0x37c>
    3000:	14 c0       	rjmp	.+40     	; 0x302a <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3002:	6f 81       	ldd	r22, Y+7	; 0x07
    3004:	78 85       	ldd	r23, Y+8	; 0x08
    3006:	89 85       	ldd	r24, Y+9	; 0x09
    3008:	9a 85       	ldd	r25, Y+10	; 0x0a
    300a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	9e 83       	std	Y+6, r25	; 0x06
    3014:	8d 83       	std	Y+5, r24	; 0x05
    3016:	8d 81       	ldd	r24, Y+5	; 0x05
    3018:	9e 81       	ldd	r25, Y+6	; 0x06
    301a:	9a 83       	std	Y+2, r25	; 0x02
    301c:	89 83       	std	Y+1, r24	; 0x01
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	9a 81       	ldd	r25, Y+2	; 0x02
    3022:	01 97       	sbiw	r24, 0x01	; 1
    3024:	f1 f7       	brne	.-4      	; 0x3022 <LCD_displayCharacter+0x3c4>
    3026:	9a 83       	std	Y+2, r25	; 0x02
    3028:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);

#endif
}
    302a:	e9 96       	adiw	r28, 0x39	; 57
    302c:	0f b6       	in	r0, 0x3f	; 63
    302e:	f8 94       	cli
    3030:	de bf       	out	0x3e, r29	; 62
    3032:	0f be       	out	0x3f, r0	; 63
    3034:	cd bf       	out	0x3d, r28	; 61
    3036:	cf 91       	pop	r28
    3038:	df 91       	pop	r29
    303a:	08 95       	ret

0000303c <LCD_displayString>:

void LCD_displayString(char * string)
{
    303c:	df 93       	push	r29
    303e:	cf 93       	push	r28
    3040:	00 d0       	rcall	.+0      	; 0x3042 <LCD_displayString+0x6>
    3042:	0f 92       	push	r0
    3044:	cd b7       	in	r28, 0x3d	; 61
    3046:	de b7       	in	r29, 0x3e	; 62
    3048:	9b 83       	std	Y+3, r25	; 0x03
    304a:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i = 0 ; string[i]!='\0' ; i++)
    304c:	19 82       	std	Y+1, r1	; 0x01
    304e:	0e c0       	rjmp	.+28     	; 0x306c <LCD_displayString+0x30>
	{
		LCD_displayCharacter(string[i]);
    3050:	89 81       	ldd	r24, Y+1	; 0x01
    3052:	28 2f       	mov	r18, r24
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	8a 81       	ldd	r24, Y+2	; 0x02
    3058:	9b 81       	ldd	r25, Y+3	; 0x03
    305a:	fc 01       	movw	r30, r24
    305c:	e2 0f       	add	r30, r18
    305e:	f3 1f       	adc	r31, r19
    3060:	80 81       	ld	r24, Z
    3062:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <LCD_displayCharacter>
#endif
}

void LCD_displayString(char * string)
{
	for(uint8 i = 0 ; string[i]!='\0' ; i++)
    3066:	89 81       	ldd	r24, Y+1	; 0x01
    3068:	8f 5f       	subi	r24, 0xFF	; 255
    306a:	89 83       	std	Y+1, r24	; 0x01
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	28 2f       	mov	r18, r24
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	8a 81       	ldd	r24, Y+2	; 0x02
    3074:	9b 81       	ldd	r25, Y+3	; 0x03
    3076:	fc 01       	movw	r30, r24
    3078:	e2 0f       	add	r30, r18
    307a:	f3 1f       	adc	r31, r19
    307c:	80 81       	ld	r24, Z
    307e:	88 23       	and	r24, r24
    3080:	39 f7       	brne	.-50     	; 0x3050 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(string[i]);
	}
}
    3082:	0f 90       	pop	r0
    3084:	0f 90       	pop	r0
    3086:	0f 90       	pop	r0
    3088:	cf 91       	pop	r28
    308a:	df 91       	pop	r29
    308c:	08 95       	ret

0000308e <LCD_clearScreen>:

void LCD_clearScreen()
{
    308e:	df 93       	push	r29
    3090:	cf 93       	push	r28
    3092:	cd b7       	in	r28, 0x3d	; 61
    3094:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	0e 94 40 14 	call	0x2880	; 0x2880 <LCD_sendCommand>
}
    309c:	cf 91       	pop	r28
    309e:	df 91       	pop	r29
    30a0:	08 95       	ret

000030a2 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 column)
{
    30a2:	df 93       	push	r29
    30a4:	cf 93       	push	r28
    30a6:	00 d0       	rcall	.+0      	; 0x30a8 <LCD_moveCursor+0x6>
    30a8:	00 d0       	rcall	.+0      	; 0x30aa <LCD_moveCursor+0x8>
    30aa:	0f 92       	push	r0
    30ac:	cd b7       	in	r28, 0x3d	; 61
    30ae:	de b7       	in	r29, 0x3e	; 62
    30b0:	8a 83       	std	Y+2, r24	; 0x02
    30b2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_cursorAdress;
	switch(row)
    30b4:	8a 81       	ldd	r24, Y+2	; 0x02
    30b6:	28 2f       	mov	r18, r24
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	3d 83       	std	Y+5, r19	; 0x05
    30bc:	2c 83       	std	Y+4, r18	; 0x04
    30be:	8c 81       	ldd	r24, Y+4	; 0x04
    30c0:	9d 81       	ldd	r25, Y+5	; 0x05
    30c2:	81 30       	cpi	r24, 0x01	; 1
    30c4:	91 05       	cpc	r25, r1
    30c6:	c1 f0       	breq	.+48     	; 0x30f8 <LCD_moveCursor+0x56>
    30c8:	2c 81       	ldd	r18, Y+4	; 0x04
    30ca:	3d 81       	ldd	r19, Y+5	; 0x05
    30cc:	22 30       	cpi	r18, 0x02	; 2
    30ce:	31 05       	cpc	r19, r1
    30d0:	2c f4       	brge	.+10     	; 0x30dc <LCD_moveCursor+0x3a>
    30d2:	8c 81       	ldd	r24, Y+4	; 0x04
    30d4:	9d 81       	ldd	r25, Y+5	; 0x05
    30d6:	00 97       	sbiw	r24, 0x00	; 0
    30d8:	61 f0       	breq	.+24     	; 0x30f2 <LCD_moveCursor+0x50>
    30da:	19 c0       	rjmp	.+50     	; 0x310e <LCD_moveCursor+0x6c>
    30dc:	2c 81       	ldd	r18, Y+4	; 0x04
    30de:	3d 81       	ldd	r19, Y+5	; 0x05
    30e0:	22 30       	cpi	r18, 0x02	; 2
    30e2:	31 05       	cpc	r19, r1
    30e4:	69 f0       	breq	.+26     	; 0x3100 <LCD_moveCursor+0x5e>
    30e6:	8c 81       	ldd	r24, Y+4	; 0x04
    30e8:	9d 81       	ldd	r25, Y+5	; 0x05
    30ea:	83 30       	cpi	r24, 0x03	; 3
    30ec:	91 05       	cpc	r25, r1
    30ee:	61 f0       	breq	.+24     	; 0x3108 <LCD_moveCursor+0x66>
    30f0:	0e c0       	rjmp	.+28     	; 0x310e <LCD_moveCursor+0x6c>
	{
	case 0:
		LCD_cursorAdress = column;
    30f2:	8b 81       	ldd	r24, Y+3	; 0x03
    30f4:	89 83       	std	Y+1, r24	; 0x01
    30f6:	0b c0       	rjmp	.+22     	; 0x310e <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_cursorAdress = 0x40 + column;
    30f8:	8b 81       	ldd	r24, Y+3	; 0x03
    30fa:	80 5c       	subi	r24, 0xC0	; 192
    30fc:	89 83       	std	Y+1, r24	; 0x01
    30fe:	07 c0       	rjmp	.+14     	; 0x310e <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_cursorAdress = 0x10 + column;
    3100:	8b 81       	ldd	r24, Y+3	; 0x03
    3102:	80 5f       	subi	r24, 0xF0	; 240
    3104:	89 83       	std	Y+1, r24	; 0x01
    3106:	03 c0       	rjmp	.+6      	; 0x310e <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_cursorAdress = 0x50 + column;
    3108:	8b 81       	ldd	r24, Y+3	; 0x03
    310a:	80 5b       	subi	r24, 0xB0	; 176
    310c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_cursorAdress |= LCD_SET_CURSOR_LOCATION ;
    310e:	89 81       	ldd	r24, Y+1	; 0x01
    3110:	80 68       	ori	r24, 0x80	; 128
    3112:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_cursorAdress);
    3114:	89 81       	ldd	r24, Y+1	; 0x01
    3116:	0e 94 40 14 	call	0x2880	; 0x2880 <LCD_sendCommand>
}
    311a:	0f 90       	pop	r0
    311c:	0f 90       	pop	r0
    311e:	0f 90       	pop	r0
    3120:	0f 90       	pop	r0
    3122:	0f 90       	pop	r0
    3124:	cf 91       	pop	r28
    3126:	df 91       	pop	r29
    3128:	08 95       	ret

0000312a <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row , uint8 column , char * string)
{
    312a:	df 93       	push	r29
    312c:	cf 93       	push	r28
    312e:	00 d0       	rcall	.+0      	; 0x3130 <LCD_displayStringRowColumn+0x6>
    3130:	00 d0       	rcall	.+0      	; 0x3132 <LCD_displayStringRowColumn+0x8>
    3132:	cd b7       	in	r28, 0x3d	; 61
    3134:	de b7       	in	r29, 0x3e	; 62
    3136:	89 83       	std	Y+1, r24	; 0x01
    3138:	6a 83       	std	Y+2, r22	; 0x02
    313a:	5c 83       	std	Y+4, r21	; 0x04
    313c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,column);
    313e:	89 81       	ldd	r24, Y+1	; 0x01
    3140:	6a 81       	ldd	r22, Y+2	; 0x02
    3142:	0e 94 51 18 	call	0x30a2	; 0x30a2 <LCD_moveCursor>
	LCD_displayString(string);
    3146:	8b 81       	ldd	r24, Y+3	; 0x03
    3148:	9c 81       	ldd	r25, Y+4	; 0x04
    314a:	0e 94 1e 18 	call	0x303c	; 0x303c <LCD_displayString>
}
    314e:	0f 90       	pop	r0
    3150:	0f 90       	pop	r0
    3152:	0f 90       	pop	r0
    3154:	0f 90       	pop	r0
    3156:	cf 91       	pop	r28
    3158:	df 91       	pop	r29
    315a:	08 95       	ret

0000315c <LCD_intgerToString>:

void LCD_intgerToString(int number)
{
    315c:	df 93       	push	r29
    315e:	cf 93       	push	r28
    3160:	cd b7       	in	r28, 0x3d	; 61
    3162:	de b7       	in	r29, 0x3e	; 62
    3164:	62 97       	sbiw	r28, 0x12	; 18
    3166:	0f b6       	in	r0, 0x3f	; 63
    3168:	f8 94       	cli
    316a:	de bf       	out	0x3e, r29	; 62
    316c:	0f be       	out	0x3f, r0	; 63
    316e:	cd bf       	out	0x3d, r28	; 61
    3170:	9a 8b       	std	Y+18, r25	; 0x12
    3172:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16];
	itoa(number,buffer,10);
    3174:	89 89       	ldd	r24, Y+17	; 0x11
    3176:	9a 89       	ldd	r25, Y+18	; 0x12
    3178:	9e 01       	movw	r18, r28
    317a:	2f 5f       	subi	r18, 0xFF	; 255
    317c:	3f 4f       	sbci	r19, 0xFF	; 255
    317e:	b9 01       	movw	r22, r18
    3180:	4a e0       	ldi	r20, 0x0A	; 10
    3182:	50 e0       	ldi	r21, 0x00	; 0
    3184:	0e 94 08 19 	call	0x3210	; 0x3210 <itoa>
	LCD_displayString(buffer);
    3188:	ce 01       	movw	r24, r28
    318a:	01 96       	adiw	r24, 0x01	; 1
    318c:	0e 94 1e 18 	call	0x303c	; 0x303c <LCD_displayString>
}
    3190:	62 96       	adiw	r28, 0x12	; 18
    3192:	0f b6       	in	r0, 0x3f	; 63
    3194:	f8 94       	cli
    3196:	de bf       	out	0x3e, r29	; 62
    3198:	0f be       	out	0x3f, r0	; 63
    319a:	cd bf       	out	0x3d, r28	; 61
    319c:	cf 91       	pop	r28
    319e:	df 91       	pop	r29
    31a0:	08 95       	ret

000031a2 <__prologue_saves__>:
    31a2:	2f 92       	push	r2
    31a4:	3f 92       	push	r3
    31a6:	4f 92       	push	r4
    31a8:	5f 92       	push	r5
    31aa:	6f 92       	push	r6
    31ac:	7f 92       	push	r7
    31ae:	8f 92       	push	r8
    31b0:	9f 92       	push	r9
    31b2:	af 92       	push	r10
    31b4:	bf 92       	push	r11
    31b6:	cf 92       	push	r12
    31b8:	df 92       	push	r13
    31ba:	ef 92       	push	r14
    31bc:	ff 92       	push	r15
    31be:	0f 93       	push	r16
    31c0:	1f 93       	push	r17
    31c2:	cf 93       	push	r28
    31c4:	df 93       	push	r29
    31c6:	cd b7       	in	r28, 0x3d	; 61
    31c8:	de b7       	in	r29, 0x3e	; 62
    31ca:	ca 1b       	sub	r28, r26
    31cc:	db 0b       	sbc	r29, r27
    31ce:	0f b6       	in	r0, 0x3f	; 63
    31d0:	f8 94       	cli
    31d2:	de bf       	out	0x3e, r29	; 62
    31d4:	0f be       	out	0x3f, r0	; 63
    31d6:	cd bf       	out	0x3d, r28	; 61
    31d8:	09 94       	ijmp

000031da <__epilogue_restores__>:
    31da:	2a 88       	ldd	r2, Y+18	; 0x12
    31dc:	39 88       	ldd	r3, Y+17	; 0x11
    31de:	48 88       	ldd	r4, Y+16	; 0x10
    31e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    31e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    31e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    31e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    31e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    31ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    31ec:	b9 84       	ldd	r11, Y+9	; 0x09
    31ee:	c8 84       	ldd	r12, Y+8	; 0x08
    31f0:	df 80       	ldd	r13, Y+7	; 0x07
    31f2:	ee 80       	ldd	r14, Y+6	; 0x06
    31f4:	fd 80       	ldd	r15, Y+5	; 0x05
    31f6:	0c 81       	ldd	r16, Y+4	; 0x04
    31f8:	1b 81       	ldd	r17, Y+3	; 0x03
    31fa:	aa 81       	ldd	r26, Y+2	; 0x02
    31fc:	b9 81       	ldd	r27, Y+1	; 0x01
    31fe:	ce 0f       	add	r28, r30
    3200:	d1 1d       	adc	r29, r1
    3202:	0f b6       	in	r0, 0x3f	; 63
    3204:	f8 94       	cli
    3206:	de bf       	out	0x3e, r29	; 62
    3208:	0f be       	out	0x3f, r0	; 63
    320a:	cd bf       	out	0x3d, r28	; 61
    320c:	ed 01       	movw	r28, r26
    320e:	08 95       	ret

00003210 <itoa>:
    3210:	fb 01       	movw	r30, r22
    3212:	9f 01       	movw	r18, r30
    3214:	e8 94       	clt
    3216:	42 30       	cpi	r20, 0x02	; 2
    3218:	c4 f0       	brlt	.+48     	; 0x324a <itoa+0x3a>
    321a:	45 32       	cpi	r20, 0x25	; 37
    321c:	b4 f4       	brge	.+44     	; 0x324a <itoa+0x3a>
    321e:	4a 30       	cpi	r20, 0x0A	; 10
    3220:	29 f4       	brne	.+10     	; 0x322c <itoa+0x1c>
    3222:	97 fb       	bst	r25, 7
    3224:	1e f4       	brtc	.+6      	; 0x322c <itoa+0x1c>
    3226:	90 95       	com	r25
    3228:	81 95       	neg	r24
    322a:	9f 4f       	sbci	r25, 0xFF	; 255
    322c:	64 2f       	mov	r22, r20
    322e:	77 27       	eor	r23, r23
    3230:	0e 94 39 19 	call	0x3272	; 0x3272 <__udivmodhi4>
    3234:	80 5d       	subi	r24, 0xD0	; 208
    3236:	8a 33       	cpi	r24, 0x3A	; 58
    3238:	0c f0       	brlt	.+2      	; 0x323c <itoa+0x2c>
    323a:	89 5d       	subi	r24, 0xD9	; 217
    323c:	81 93       	st	Z+, r24
    323e:	cb 01       	movw	r24, r22
    3240:	00 97       	sbiw	r24, 0x00	; 0
    3242:	a1 f7       	brne	.-24     	; 0x322c <itoa+0x1c>
    3244:	16 f4       	brtc	.+4      	; 0x324a <itoa+0x3a>
    3246:	5d e2       	ldi	r21, 0x2D	; 45
    3248:	51 93       	st	Z+, r21
    324a:	10 82       	st	Z, r1
    324c:	c9 01       	movw	r24, r18
    324e:	0c 94 29 19 	jmp	0x3252	; 0x3252 <strrev>

00003252 <strrev>:
    3252:	dc 01       	movw	r26, r24
    3254:	fc 01       	movw	r30, r24
    3256:	67 2f       	mov	r22, r23
    3258:	71 91       	ld	r23, Z+
    325a:	77 23       	and	r23, r23
    325c:	e1 f7       	brne	.-8      	; 0x3256 <strrev+0x4>
    325e:	32 97       	sbiw	r30, 0x02	; 2
    3260:	04 c0       	rjmp	.+8      	; 0x326a <strrev+0x18>
    3262:	7c 91       	ld	r23, X
    3264:	6d 93       	st	X+, r22
    3266:	70 83       	st	Z, r23
    3268:	62 91       	ld	r22, -Z
    326a:	ae 17       	cp	r26, r30
    326c:	bf 07       	cpc	r27, r31
    326e:	c8 f3       	brcs	.-14     	; 0x3262 <strrev+0x10>
    3270:	08 95       	ret

00003272 <__udivmodhi4>:
    3272:	aa 1b       	sub	r26, r26
    3274:	bb 1b       	sub	r27, r27
    3276:	51 e1       	ldi	r21, 0x11	; 17
    3278:	07 c0       	rjmp	.+14     	; 0x3288 <__udivmodhi4_ep>

0000327a <__udivmodhi4_loop>:
    327a:	aa 1f       	adc	r26, r26
    327c:	bb 1f       	adc	r27, r27
    327e:	a6 17       	cp	r26, r22
    3280:	b7 07       	cpc	r27, r23
    3282:	10 f0       	brcs	.+4      	; 0x3288 <__udivmodhi4_ep>
    3284:	a6 1b       	sub	r26, r22
    3286:	b7 0b       	sbc	r27, r23

00003288 <__udivmodhi4_ep>:
    3288:	88 1f       	adc	r24, r24
    328a:	99 1f       	adc	r25, r25
    328c:	5a 95       	dec	r21
    328e:	a9 f7       	brne	.-22     	; 0x327a <__udivmodhi4_loop>
    3290:	80 95       	com	r24
    3292:	90 95       	com	r25
    3294:	bc 01       	movw	r22, r24
    3296:	cd 01       	movw	r24, r26
    3298:	08 95       	ret

0000329a <_exit>:
    329a:	f8 94       	cli

0000329c <__stop_program>:
    329c:	ff cf       	rjmp	.-2      	; 0x329c <__stop_program>
