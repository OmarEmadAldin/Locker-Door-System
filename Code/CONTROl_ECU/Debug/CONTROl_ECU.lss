
CONTROl_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001746  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00001746  000017da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  00800070  00800070  000017ea  2**0
                  ALLOC
  3 .stab         00002820  00000000  00000000  000017ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001432  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 13 03 	jmp	0x626	; 0x626 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 46 03 	jmp	0x68c	; 0x68c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 39       	cpi	r26, 0x9B	; 155
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 df 01 	call	0x3be	; 0x3be <main>
      8a:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Buzzer_init>:
 * Description :
 * Functional responsible for Initialize the Buzzer device by:
 * 1. Setup the direction for the buzzer pin as output pin through the GPIO driver.
 * 2.Turn off the buzzer through the GPIO.
 */
void Buzzer_init(void){
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	/*
	 * To make the buzzer output pin as needed*/
	GPIO_setupPinDirection(BuzzerPort,BuzzerPin,PIN_OUTPUT);
      9a:	81 e0       	ldi	r24, 0x01	; 1
      9c:	60 e0       	ldi	r22, 0x00	; 0
      9e:	41 e0       	ldi	r20, 0x01	; 1
      a0:	0e 94 c5 07 	call	0xf8a	; 0xf8a <GPIO_setupPinDirection>
	/*To disable the Buzzer at the first
	 * by initializing its pin by zero
	 * */
	GPIO_writePin(BuzzerPort,BuzzerPin,BuzzerDisable);
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	40 e0       	ldi	r20, 0x00	; 0
      aa:	0e 94 b0 08 	call	0x1160	; 0x1160 <GPIO_writePin>
}
      ae:	cf 91       	pop	r28
      b0:	df 91       	pop	r29
      b2:	08 95       	ret

000000b4 <Buzzer_on>:
/*
 * Description :
 * Function used to turn on the buzzer by using GPIO
 * */
void Buzzer_on(void){
      b4:	df 93       	push	r29
      b6:	cf 93       	push	r28
      b8:	cd b7       	in	r28, 0x3d	; 61
      ba:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BuzzerPort,BuzzerPin,BuzzerEnable);
      bc:	81 e0       	ldi	r24, 0x01	; 1
      be:	60 e0       	ldi	r22, 0x00	; 0
      c0:	41 e0       	ldi	r20, 0x01	; 1
      c2:	0e 94 b0 08 	call	0x1160	; 0x1160 <GPIO_writePin>
}
      c6:	cf 91       	pop	r28
      c8:	df 91       	pop	r29
      ca:	08 95       	ret

000000cc <Buzzer_off>:
/*
 * Description :
 * Function used to turn off the buzzer by using GPIO
 * */
void Buzzer_off(void){
      cc:	df 93       	push	r29
      ce:	cf 93       	push	r28
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BuzzerPort,BuzzerPin,BuzzerDisable);
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	60 e0       	ldi	r22, 0x00	; 0
      d8:	40 e0       	ldi	r20, 0x00	; 0
      da:	0e 94 b0 08 	call	0x1160	; 0x1160 <GPIO_writePin>
}
      de:	cf 91       	pop	r28
      e0:	df 91       	pop	r29
      e2:	08 95       	ret

000000e4 <PassIsSetinEEPROM>:

uint8 PassState;

Timer1_ConfigType Sec = {0 , 7813 , Prescaler1024 , Compare };

void PassIsSetinEEPROM(){
      e4:	df 93       	push	r29
      e6:	cf 93       	push	r28
      e8:	cd b7       	in	r28, 0x3d	; 61
      ea:	de b7       	in	r29, 0x3e	; 62
	EEPROM_readByte(PasswordaddressFlag, &PassState);
      ec:	24 e7       	ldi	r18, 0x74	; 116
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	80 e2       	ldi	r24, 0x20	; 32
      f2:	93 e0       	ldi	r25, 0x03	; 3
      f4:	b9 01       	movw	r22, r18
      f6:	0e 94 65 07 	call	0xeca	; 0xeca <EEPROM_readByte>
	UART_sendByte(PassState);
      fa:	80 91 74 00 	lds	r24, 0x0074
      fe:	0e 94 92 06 	call	0xd24	; 0xd24 <UART_sendByte>
}
     102:	cf 91       	pop	r28
     104:	df 91       	pop	r29
     106:	08 95       	ret

00000108 <readPassFromEEPROM>:

void readPassFromEEPROM(){
     108:	df 93       	push	r29
     10a:	cf 93       	push	r28
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
	for(i=0 ; i<Size ; i++){
     110:	10 92 8c 00 	sts	0x008C, r1
     114:	1a c0       	rjmp	.+52     	; 0x14a <readPassFromEEPROM+0x42>
		EEPROM_readByte( (Passwordaddress+i), (passwordOne+i) );
     116:	80 91 8c 00 	lds	r24, 0x008C
     11a:	88 2f       	mov	r24, r24
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	80 5b       	subi	r24, 0xB0	; 176
     120:	9c 4f       	sbci	r25, 0xFC	; 252
     122:	ac 01       	movw	r20, r24
     124:	2d e8       	ldi	r18, 0x8D	; 141
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	80 91 8c 00 	lds	r24, 0x008C
     12c:	88 2f       	mov	r24, r24
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	88 0f       	add	r24, r24
     132:	99 1f       	adc	r25, r25
     134:	28 0f       	add	r18, r24
     136:	39 1f       	adc	r19, r25
     138:	ca 01       	movw	r24, r20
     13a:	b9 01       	movw	r22, r18
     13c:	0e 94 65 07 	call	0xeca	; 0xeca <EEPROM_readByte>
	EEPROM_readByte(PasswordaddressFlag, &PassState);
	UART_sendByte(PassState);
}

void readPassFromEEPROM(){
	for(i=0 ; i<Size ; i++){
     140:	80 91 8c 00 	lds	r24, 0x008C
     144:	8f 5f       	subi	r24, 0xFF	; 255
     146:	80 93 8c 00 	sts	0x008C, r24
     14a:	80 91 8c 00 	lds	r24, 0x008C
     14e:	85 30       	cpi	r24, 0x05	; 5
     150:	10 f3       	brcs	.-60     	; 0x116 <readPassFromEEPROM+0xe>
		EEPROM_readByte( (Passwordaddress+i), (passwordOne+i) );
	}
}
     152:	cf 91       	pop	r28
     154:	df 91       	pop	r29
     156:	08 95       	ret

00000158 <updatePassword>:

void updatePassword(){
     158:	0f 93       	push	r16
     15a:	1f 93       	push	r17
     15c:	df 93       	push	r29
     15e:	cf 93       	push	r28
     160:	cd b7       	in	r28, 0x3d	; 61
     162:	de b7       	in	r29, 0x3e	; 62
	for( i = 0 ; i < Size ; i++)
     164:	10 92 8c 00 	sts	0x008C, r1
     168:	2e c0       	rjmp	.+92     	; 0x1c6 <updatePassword+0x6e>
		{
			passwordOne[i] = UART_recieveByte(); /* Getting the new password from MCU1 */
     16a:	80 91 8c 00 	lds	r24, 0x008C
     16e:	08 2f       	mov	r16, r24
     170:	10 e0       	ldi	r17, 0x00	; 0
     172:	0e 94 a9 06 	call	0xd52	; 0xd52 <UART_recieveByte>
     176:	28 2f       	mov	r18, r24
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	c8 01       	movw	r24, r16
     17c:	88 0f       	add	r24, r24
     17e:	99 1f       	adc	r25, r25
     180:	fc 01       	movw	r30, r24
     182:	e3 57       	subi	r30, 0x73	; 115
     184:	ff 4f       	sbci	r31, 0xFF	; 255
     186:	31 83       	std	Z+1, r19	; 0x01
     188:	20 83       	st	Z, r18
			EEPROM_writeByte((passwordOne+i), passwordOne[i]); /* Write it in the EEPROM */
     18a:	80 91 8c 00 	lds	r24, 0x008C
     18e:	88 2f       	mov	r24, r24
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	88 0f       	add	r24, r24
     194:	99 1f       	adc	r25, r25
     196:	83 57       	subi	r24, 0x73	; 115
     198:	9f 4f       	sbci	r25, 0xFF	; 255
     19a:	ac 01       	movw	r20, r24
     19c:	80 91 8c 00 	lds	r24, 0x008C
     1a0:	88 2f       	mov	r24, r24
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	88 0f       	add	r24, r24
     1a6:	99 1f       	adc	r25, r25
     1a8:	fc 01       	movw	r30, r24
     1aa:	e3 57       	subi	r30, 0x73	; 115
     1ac:	ff 4f       	sbci	r31, 0xFF	; 255
     1ae:	80 81       	ld	r24, Z
     1b0:	91 81       	ldd	r25, Z+1	; 0x01
     1b2:	28 2f       	mov	r18, r24
     1b4:	ca 01       	movw	r24, r20
     1b6:	62 2f       	mov	r22, r18
     1b8:	0e 94 24 07 	call	0xe48	; 0xe48 <EEPROM_writeByte>
		EEPROM_readByte( (Passwordaddress+i), (passwordOne+i) );
	}
}

void updatePassword(){
	for( i = 0 ; i < Size ; i++)
     1bc:	80 91 8c 00 	lds	r24, 0x008C
     1c0:	8f 5f       	subi	r24, 0xFF	; 255
     1c2:	80 93 8c 00 	sts	0x008C, r24
     1c6:	80 91 8c 00 	lds	r24, 0x008C
     1ca:	85 30       	cpi	r24, 0x05	; 5
     1cc:	70 f2       	brcs	.-100    	; 0x16a <updatePassword+0x12>
		{
			passwordOne[i] = UART_recieveByte(); /* Getting the new password from MCU1 */
			EEPROM_writeByte((passwordOne+i), passwordOne[i]); /* Write it in the EEPROM */
		}
		EEPROM_writeByte(PasswordaddressFlag, PasswordSet);
     1ce:	80 e2       	ldi	r24, 0x20	; 32
     1d0:	93 e0       	ldi	r25, 0x03	; 3
     1d2:	6f ef       	ldi	r22, 0xFF	; 255
     1d4:	0e 94 24 07 	call	0xe48	; 0xe48 <EEPROM_writeByte>
}
     1d8:	cf 91       	pop	r28
     1da:	df 91       	pop	r29
     1dc:	1f 91       	pop	r17
     1de:	0f 91       	pop	r16
     1e0:	08 95       	ret

000001e2 <passChecked>:

void passChecked(){
     1e2:	0f 93       	push	r16
     1e4:	1f 93       	push	r17
     1e6:	df 93       	push	r29
     1e8:	cf 93       	push	r28
     1ea:	00 d0       	rcall	.+0      	; 0x1ec <passChecked+0xa>
     1ec:	00 d0       	rcall	.+0      	; 0x1ee <passChecked+0xc>
     1ee:	0f 92       	push	r0
     1f0:	cd b7       	in	r28, 0x3d	; 61
     1f2:	de b7       	in	r29, 0x3e	; 62
	uint8 checkPass[Size];
	for(i = 0 ; i< Size ; i++){
     1f4:	10 92 8c 00 	sts	0x008C, r1
     1f8:	15 c0       	rjmp	.+42     	; 0x224 <passChecked+0x42>
		checkPass[i] = UART_recieveByte();
     1fa:	80 91 8c 00 	lds	r24, 0x008C
     1fe:	08 2f       	mov	r16, r24
     200:	10 e0       	ldi	r17, 0x00	; 0
     202:	0e 94 a9 06 	call	0xd52	; 0xd52 <UART_recieveByte>
     206:	28 2f       	mov	r18, r24
     208:	ce 01       	movw	r24, r28
     20a:	01 96       	adiw	r24, 0x01	; 1
     20c:	fc 01       	movw	r30, r24
     20e:	e0 0f       	add	r30, r16
     210:	f1 1f       	adc	r31, r17
     212:	20 83       	st	Z, r18
		UART_sendByte(MC_Ready);
     214:	89 e9       	ldi	r24, 0x99	; 153
     216:	0e 94 92 06 	call	0xd24	; 0xd24 <UART_sendByte>
		EEPROM_writeByte(PasswordaddressFlag, PasswordSet);
}

void passChecked(){
	uint8 checkPass[Size];
	for(i = 0 ; i< Size ; i++){
     21a:	80 91 8c 00 	lds	r24, 0x008C
     21e:	8f 5f       	subi	r24, 0xFF	; 255
     220:	80 93 8c 00 	sts	0x008C, r24
     224:	80 91 8c 00 	lds	r24, 0x008C
     228:	85 30       	cpi	r24, 0x05	; 5
     22a:	38 f3       	brcs	.-50     	; 0x1fa <passChecked+0x18>
		checkPass[i] = UART_recieveByte();
		UART_sendByte(MC_Ready);
	}
	for(i = 0 ; i< Size ; i++){
     22c:	10 92 8c 00 	sts	0x008C, r1
     230:	23 c0       	rjmp	.+70     	; 0x278 <passChecked+0x96>
		if(passwordOne[i] != *(checkPass+i)){
     232:	80 91 8c 00 	lds	r24, 0x008C
     236:	88 2f       	mov	r24, r24
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	fc 01       	movw	r30, r24
     240:	e3 57       	subi	r30, 0x73	; 115
     242:	ff 4f       	sbci	r31, 0xFF	; 255
     244:	40 81       	ld	r20, Z
     246:	51 81       	ldd	r21, Z+1	; 0x01
     248:	80 91 8c 00 	lds	r24, 0x008C
     24c:	28 2f       	mov	r18, r24
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	ce 01       	movw	r24, r28
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	fc 01       	movw	r30, r24
     256:	e2 0f       	add	r30, r18
     258:	f3 1f       	adc	r31, r19
     25a:	80 81       	ld	r24, Z
     25c:	88 2f       	mov	r24, r24
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	48 17       	cp	r20, r24
     262:	59 07       	cpc	r21, r25
     264:	21 f0       	breq	.+8      	; 0x26e <passChecked+0x8c>
			UART_sendByte(UART_missMatchPass);
     266:	84 e0       	ldi	r24, 0x04	; 4
     268:	0e 94 92 06 	call	0xd24	; 0xd24 <UART_sendByte>
     26c:	0c c0       	rjmp	.+24     	; 0x286 <passChecked+0xa4>
	uint8 checkPass[Size];
	for(i = 0 ; i< Size ; i++){
		checkPass[i] = UART_recieveByte();
		UART_sendByte(MC_Ready);
	}
	for(i = 0 ; i< Size ; i++){
     26e:	80 91 8c 00 	lds	r24, 0x008C
     272:	8f 5f       	subi	r24, 0xFF	; 255
     274:	80 93 8c 00 	sts	0x008C, r24
     278:	80 91 8c 00 	lds	r24, 0x008C
     27c:	85 30       	cpi	r24, 0x05	; 5
     27e:	c8 f2       	brcs	.-78     	; 0x232 <passChecked+0x50>
		if(passwordOne[i] != *(checkPass+i)){
			UART_sendByte(UART_missMatchPass);
			return;
		}
	}
	UART_sendByte(UART_matchPass);
     280:	82 e0       	ldi	r24, 0x02	; 2
     282:	0e 94 92 06 	call	0xd24	; 0xd24 <UART_sendByte>
}
     286:	0f 90       	pop	r0
     288:	0f 90       	pop	r0
     28a:	0f 90       	pop	r0
     28c:	0f 90       	pop	r0
     28e:	0f 90       	pop	r0
     290:	cf 91       	pop	r28
     292:	df 91       	pop	r29
     294:	1f 91       	pop	r17
     296:	0f 91       	pop	r16
     298:	08 95       	ret

0000029a <BuzzerError>:
void BuzzerError(){
     29a:	df 93       	push	r29
     29c:	cf 93       	push	r28
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
	g_tick = 0;
     2a2:	10 92 97 00 	sts	0x0097, r1
	buzzerFlag = 0 ;
     2a6:	10 92 76 00 	sts	0x0076, r1
	Buzzer_on();
     2aa:	0e 94 5a 00 	call	0xb4	; 0xb4 <Buzzer_on>
	TIMER1_COMP_setCallBack(oneMinute);
     2ae:	89 ec       	ldi	r24, 0xC9	; 201
     2b0:	91 e0       	ldi	r25, 0x01	; 1
     2b2:	0e 94 a7 04 	call	0x94e	; 0x94e <TIMER1_COMP_setCallBack>
	while(buzzerFlag == 0){};
     2b6:	80 91 76 00 	lds	r24, 0x0076
     2ba:	88 23       	and	r24, r24
     2bc:	e1 f3       	breq	.-8      	; 0x2b6 <BuzzerError+0x1c>
	Buzzer_off();
     2be:	0e 94 66 00 	call	0xcc	; 0xcc <Buzzer_off>
}
     2c2:	cf 91       	pop	r28
     2c4:	df 91       	pop	r29
     2c6:	08 95       	ret

000002c8 <openDoor>:
void openDoor(){
     2c8:	df 93       	push	r29
     2ca:	cf 93       	push	r28
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62
	g_tick = 0;
     2d0:	10 92 97 00 	sts	0x0097, r1
	motorFlag=0;
     2d4:	10 92 75 00 	sts	0x0075, r1
	TIMER1_COMP_setCallBack(Timer1_15Sec);
     2d8:	87 e9       	ldi	r24, 0x97	; 151
     2da:	91 e0       	ldi	r25, 0x01	; 1
     2dc:	0e 94 a7 04 	call	0x94e	; 0x94e <TIMER1_COMP_setCallBack>
	DcMotor_Rotate(CW,255);
     2e0:	82 e0       	ldi	r24, 0x02	; 2
     2e2:	6f ef       	ldi	r22, 0xFF	; 255
     2e4:	0e 94 46 02 	call	0x48c	; 0x48c <DcMotor_Rotate>
	while(motorFlag==0);
     2e8:	80 91 75 00 	lds	r24, 0x0075
     2ec:	88 23       	and	r24, r24
     2ee:	e1 f3       	breq	.-8      	; 0x2e8 <openDoor+0x20>
}
     2f0:	cf 91       	pop	r28
     2f2:	df 91       	pop	r29
     2f4:	08 95       	ret

000002f6 <Timer1_3Sec>:
void Timer1_3Sec(){
     2f6:	df 93       	push	r29
     2f8:	cf 93       	push	r28
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     2fe:	80 91 97 00 	lds	r24, 0x0097
     302:	8f 5f       	subi	r24, 0xFF	; 255
     304:	80 93 97 00 	sts	0x0097, r24
	if(g_tick==3){
     308:	80 91 97 00 	lds	r24, 0x0097
     30c:	83 30       	cpi	r24, 0x03	; 3
     30e:	61 f4       	brne	.+24     	; 0x328 <Timer1_3Sec+0x32>
		g_tick =0 ;
     310:	10 92 97 00 	sts	0x0097, r1
		UART_recieveByte();
     314:	0e 94 a9 06 	call	0xd52	; 0xd52 <UART_recieveByte>
		DcMotor_Rotate(A_CW,255);
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	6f ef       	ldi	r22, 0xFF	; 255
     31c:	0e 94 46 02 	call	0x48c	; 0x48c <DcMotor_Rotate>
		TIMER1_COMP_setCallBack(Timer1_15Sec);
     320:	87 e9       	ldi	r24, 0x97	; 151
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	0e 94 a7 04 	call	0x94e	; 0x94e <TIMER1_COMP_setCallBack>

	}
}
     328:	cf 91       	pop	r28
     32a:	df 91       	pop	r29
     32c:	08 95       	ret

0000032e <Timer1_15Sec>:
void Timer1_15Sec(){
     32e:	df 93       	push	r29
     330:	cf 93       	push	r28
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     336:	80 91 97 00 	lds	r24, 0x0097
     33a:	8f 5f       	subi	r24, 0xFF	; 255
     33c:	80 93 97 00 	sts	0x0097, r24
	if(g_tick==15){
     340:	80 91 97 00 	lds	r24, 0x0097
     344:	8f 30       	cpi	r24, 0x0F	; 15
     346:	11 f5       	brne	.+68     	; 0x38c <Timer1_15Sec+0x5e>
		g_tick =0 ;
     348:	10 92 97 00 	sts	0x0097, r1
		if(Motor_State == TRUE){
     34c:	80 91 8b 00 	lds	r24, 0x008B
     350:	81 30       	cpi	r24, 0x01	; 1
     352:	69 f4       	brne	.+26     	; 0x36e <Timer1_15Sec+0x40>
			UART_recieveByte();
     354:	0e 94 a9 06 	call	0xd52	; 0xd52 <UART_recieveByte>
			DcMotor_Rotate(STOP,255);
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	6f ef       	ldi	r22, 0xFF	; 255
     35c:	0e 94 46 02 	call	0x48c	; 0x48c <DcMotor_Rotate>
			TIMER1_COMP_setCallBack(Timer1_3Sec);
     360:	8b e7       	ldi	r24, 0x7B	; 123
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	0e 94 a7 04 	call	0x94e	; 0x94e <TIMER1_COMP_setCallBack>
			Motor_State = FALSE;
     368:	10 92 8b 00 	sts	0x008B, r1
     36c:	0f c0       	rjmp	.+30     	; 0x38c <Timer1_15Sec+0x5e>
		}
		else if(Motor_State == FALSE){
     36e:	80 91 8b 00 	lds	r24, 0x008B
     372:	88 23       	and	r24, r24
     374:	59 f4       	brne	.+22     	; 0x38c <Timer1_15Sec+0x5e>
				Motor_State = TRUE;
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	80 93 8b 00 	sts	0x008B, r24
				buzzerFlag = 0;
     37c:	10 92 76 00 	sts	0x0076, r1
				DcMotor_Rotate(STOP,255);
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	6f ef       	ldi	r22, 0xFF	; 255
     384:	0e 94 46 02 	call	0x48c	; 0x48c <DcMotor_Rotate>
				Timer1_deInit();
     388:	0e 94 8b 04 	call	0x916	; 0x916 <Timer1_deInit>
		}
	}
}
     38c:	cf 91       	pop	r28
     38e:	df 91       	pop	r29
     390:	08 95       	ret

00000392 <oneMinute>:
void oneMinute(){
     392:	df 93       	push	r29
     394:	cf 93       	push	r28
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
	g_tick ++;
     39a:	80 91 97 00 	lds	r24, 0x0097
     39e:	8f 5f       	subi	r24, 0xFF	; 255
     3a0:	80 93 97 00 	sts	0x0097, r24
	if(g_tick == 60){
     3a4:	80 91 97 00 	lds	r24, 0x0097
     3a8:	8c 33       	cpi	r24, 0x3C	; 60
     3aa:	31 f4       	brne	.+12     	; 0x3b8 <oneMinute+0x26>
		g_tick = 0;
     3ac:	10 92 97 00 	sts	0x0097, r1
		buzzerFlag = 0;
     3b0:	10 92 76 00 	sts	0x0076, r1
		Timer1_deInit();
     3b4:	0e 94 8b 04 	call	0x916	; 0x916 <Timer1_deInit>
	}
}
     3b8:	cf 91       	pop	r28
     3ba:	df 91       	pop	r29
     3bc:	08 95       	ret

000003be <main>:
#include"Buzzer.h"
#include"twi.h"

USART_Config uartIntialization = {Disabled,Size8,Asynchronous,oneBit,BaudRate9600};
TWI_ConfigType twi_Intialization = {400,NormalMode};
int main(){
     3be:	df 93       	push	r29
     3c0:	cf 93       	push	r28
     3c2:	00 d0       	rcall	.+0      	; 0x3c4 <main+0x6>
     3c4:	0f 92       	push	r0
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
	SREG|=(1<<7);
     3ca:	af e5       	ldi	r26, 0x5F	; 95
     3cc:	b0 e0       	ldi	r27, 0x00	; 0
     3ce:	ef e5       	ldi	r30, 0x5F	; 95
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	80 81       	ld	r24, Z
     3d4:	80 68       	ori	r24, 0x80	; 128
     3d6:	8c 93       	st	X, r24
	TWI_init(&twi_Intialization);
     3d8:	8d e6       	ldi	r24, 0x6D	; 109
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 03 0b 	call	0x1606	; 0x1606 <TWI_init>
	UART_init(&uartIntialization);
     3e0:	87 e6       	ldi	r24, 0x67	; 103
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 cb 04 	call	0x996	; 0x996 <UART_init>
	DcMotor_Init();
     3e8:	0e 94 2b 02 	call	0x456	; 0x456 <DcMotor_Init>
	while((UART_recieveByte()) != (MC_Ready)){};
     3ec:	0e 94 a9 06 	call	0xd52	; 0xd52 <UART_recieveByte>
     3f0:	89 39       	cpi	r24, 0x99	; 153
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <main+0x2e>
	PassIsSetinEEPROM();
     3f4:	0e 94 72 00 	call	0xe4	; 0xe4 <PassIsSetinEEPROM>

	while(1){
		uint8 recieveUnit = (UART_recieveByte());
     3f8:	0e 94 a9 06 	call	0xd52	; 0xd52 <UART_recieveByte>
     3fc:	89 83       	std	Y+1, r24	; 0x01
		switch(recieveUnit){
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	28 2f       	mov	r18, r24
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	3b 83       	std	Y+3, r19	; 0x03
     406:	2a 83       	std	Y+2, r18	; 0x02
     408:	8a 81       	ldd	r24, Y+2	; 0x02
     40a:	9b 81       	ldd	r25, Y+3	; 0x03
     40c:	80 31       	cpi	r24, 0x10	; 16
     40e:	91 05       	cpc	r25, r1
     410:	f9 f0       	breq	.+62     	; 0x450 <main+0x92>
     412:	2a 81       	ldd	r18, Y+2	; 0x02
     414:	3b 81       	ldd	r19, Y+3	; 0x03
     416:	21 31       	cpi	r18, 0x11	; 17
     418:	31 05       	cpc	r19, r1
     41a:	34 f4       	brge	.+12     	; 0x428 <main+0x6a>
     41c:	8a 81       	ldd	r24, Y+2	; 0x02
     41e:	9b 81       	ldd	r25, Y+3	; 0x03
     420:	88 30       	cpi	r24, 0x08	; 8
     422:	91 05       	cpc	r25, r1
     424:	61 f0       	breq	.+24     	; 0x43e <main+0x80>
     426:	e8 cf       	rjmp	.-48     	; 0x3f8 <main+0x3a>
     428:	2a 81       	ldd	r18, Y+2	; 0x02
     42a:	3b 81       	ldd	r19, Y+3	; 0x03
     42c:	22 31       	cpi	r18, 0x12	; 18
     42e:	31 05       	cpc	r19, r1
     430:	49 f0       	breq	.+18     	; 0x444 <main+0x86>
     432:	8a 81       	ldd	r24, Y+2	; 0x02
     434:	9b 81       	ldd	r25, Y+3	; 0x03
     436:	80 32       	cpi	r24, 0x20	; 32
     438:	91 05       	cpc	r25, r1
     43a:	39 f0       	breq	.+14     	; 0x44a <main+0x8c>
     43c:	dd cf       	rjmp	.-70     	; 0x3f8 <main+0x3a>
		case(UART_sendPass):
				updatePassword();
     43e:	0e 94 ac 00 	call	0x158	; 0x158 <updatePassword>
     442:	da cf       	rjmp	.-76     	; 0x3f8 <main+0x3a>
				break;
		case(UART_Motor):
				openDoor();
     444:	0e 94 64 01 	call	0x2c8	; 0x2c8 <openDoor>
     448:	d7 cf       	rjmp	.-82     	; 0x3f8 <main+0x3a>
				break;
		case(UART_Buzzer):
				BuzzerError();
     44a:	0e 94 4d 01 	call	0x29a	; 0x29a <BuzzerError>
     44e:	d4 cf       	rjmp	.-88     	; 0x3f8 <main+0x3a>
				break;
		case(UART_check):
				passChecked();
     450:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <passChecked>
     454:	d1 cf       	rjmp	.-94     	; 0x3f8 <main+0x3a>

00000456 <DcMotor_Init>:
 *******************************************************************************/
#include "gpio.h"
#include "Motor.h"
#include "common_macros.h"
#include"PWM.h"
void DcMotor_Init(void){
     456:	df 93       	push	r29
     458:	cf 93       	push	r28
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTA_ID,Motor_inputPin1,LOGIC_LOW);
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	40 e0       	ldi	r20, 0x00	; 0
     464:	0e 94 b0 08 	call	0x1160	; 0x1160 <GPIO_writePin>
	GPIO_writePin(PORTA_ID,Motor_inputPin2,LOGIC_LOW);
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	61 e0       	ldi	r22, 0x01	; 1
     46c:	40 e0       	ldi	r20, 0x00	; 0
     46e:	0e 94 b0 08 	call	0x1160	; 0x1160 <GPIO_writePin>
	GPIO_setupPinDirection(PORTA_ID,Motor_inputPin1,PIN_OUTPUT);
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	41 e0       	ldi	r20, 0x01	; 1
     478:	0e 94 c5 07 	call	0xf8a	; 0xf8a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTA_ID,Motor_inputPin2,PIN_OUTPUT);
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	61 e0       	ldi	r22, 0x01	; 1
     480:	41 e0       	ldi	r20, 0x01	; 1
     482:	0e 94 c5 07 	call	0xf8a	; 0xf8a <GPIO_setupPinDirection>

}
     486:	cf 91       	pop	r28
     488:	df 91       	pop	r29
     48a:	08 95       	ret

0000048c <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed){
     48c:	df 93       	push	r29
     48e:	cf 93       	push	r28
     490:	00 d0       	rcall	.+0      	; 0x492 <DcMotor_Rotate+0x6>
     492:	00 d0       	rcall	.+0      	; 0x494 <DcMotor_Rotate+0x8>
     494:	00 d0       	rcall	.+0      	; 0x496 <DcMotor_Rotate+0xa>
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
     49a:	89 83       	std	Y+1, r24	; 0x01
     49c:	6a 83       	std	Y+2, r22	; 0x02
	switch(state){
     49e:	89 81       	ldd	r24, Y+1	; 0x01
     4a0:	28 2f       	mov	r18, r24
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	3e 83       	std	Y+6, r19	; 0x06
     4a6:	2d 83       	std	Y+5, r18	; 0x05
     4a8:	8d 81       	ldd	r24, Y+5	; 0x05
     4aa:	9e 81       	ldd	r25, Y+6	; 0x06
     4ac:	81 30       	cpi	r24, 0x01	; 1
     4ae:	91 05       	cpc	r25, r1
     4b0:	f9 f0       	breq	.+62     	; 0x4f0 <DcMotor_Rotate+0x64>
     4b2:	2d 81       	ldd	r18, Y+5	; 0x05
     4b4:	3e 81       	ldd	r19, Y+6	; 0x06
     4b6:	22 30       	cpi	r18, 0x02	; 2
     4b8:	31 05       	cpc	r19, r1
     4ba:	79 f0       	breq	.+30     	; 0x4da <DcMotor_Rotate+0x4e>
     4bc:	8d 81       	ldd	r24, Y+5	; 0x05
     4be:	9e 81       	ldd	r25, Y+6	; 0x06
     4c0:	00 97       	sbiw	r24, 0x00	; 0
     4c2:	01 f5       	brne	.+64     	; 0x504 <DcMotor_Rotate+0x78>
	case(STOP):
		GPIO_writePin(PORTA_ID,Motor_inputPin1,LOGIC_LOW);
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	0e 94 b0 08 	call	0x1160	; 0x1160 <GPIO_writePin>
		GPIO_writePin(PORTA_ID,Motor_inputPin2,LOGIC_LOW);
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	61 e0       	ldi	r22, 0x01	; 1
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	0e 94 b0 08 	call	0x1160	; 0x1160 <GPIO_writePin>
     4d8:	15 c0       	rjmp	.+42     	; 0x504 <DcMotor_Rotate+0x78>
		break;
	case(CW):
		GPIO_writePin(PORTA_ID,Motor_inputPin1,LOGIC_HIGH);
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	41 e0       	ldi	r20, 0x01	; 1
     4e0:	0e 94 b0 08 	call	0x1160	; 0x1160 <GPIO_writePin>
		GPIO_writePin(PORTA_ID,Motor_inputPin2,LOGIC_LOW);
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	61 e0       	ldi	r22, 0x01	; 1
     4e8:	40 e0       	ldi	r20, 0x00	; 0
     4ea:	0e 94 b0 08 	call	0x1160	; 0x1160 <GPIO_writePin>
     4ee:	0a c0       	rjmp	.+20     	; 0x504 <DcMotor_Rotate+0x78>
		break;
	case(A_CW):
		GPIO_writePin(PORTA_ID,Motor_inputPin1,LOGIC_LOW);
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	40 e0       	ldi	r20, 0x00	; 0
     4f6:	0e 94 b0 08 	call	0x1160	; 0x1160 <GPIO_writePin>
		GPIO_writePin(PORTA_ID,Motor_inputPin2,LOGIC_HIGH);
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	61 e0       	ldi	r22, 0x01	; 1
     4fe:	41 e0       	ldi	r20, 0x01	; 1
     500:	0e 94 b0 08 	call	0x1160	; 0x1160 <GPIO_writePin>
		break;
	}
	switch(speed){
     504:	8a 81       	ldd	r24, Y+2	; 0x02
     506:	28 2f       	mov	r18, r24
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	3c 83       	std	Y+4, r19	; 0x04
     50c:	2b 83       	std	Y+3, r18	; 0x03
     50e:	8b 81       	ldd	r24, Y+3	; 0x03
     510:	9c 81       	ldd	r25, Y+4	; 0x04
     512:	82 33       	cpi	r24, 0x32	; 50
     514:	91 05       	cpc	r25, r1
     516:	d1 f0       	breq	.+52     	; 0x54c <DcMotor_Rotate+0xc0>
     518:	2b 81       	ldd	r18, Y+3	; 0x03
     51a:	3c 81       	ldd	r19, Y+4	; 0x04
     51c:	23 33       	cpi	r18, 0x33	; 51
     51e:	31 05       	cpc	r19, r1
     520:	34 f4       	brge	.+12     	; 0x52e <DcMotor_Rotate+0xa2>
     522:	8b 81       	ldd	r24, Y+3	; 0x03
     524:	9c 81       	ldd	r25, Y+4	; 0x04
     526:	89 31       	cpi	r24, 0x19	; 25
     528:	91 05       	cpc	r25, r1
     52a:	61 f0       	breq	.+24     	; 0x544 <DcMotor_Rotate+0xb8>
     52c:	1b c0       	rjmp	.+54     	; 0x564 <DcMotor_Rotate+0xd8>
     52e:	2b 81       	ldd	r18, Y+3	; 0x03
     530:	3c 81       	ldd	r19, Y+4	; 0x04
     532:	2b 34       	cpi	r18, 0x4B	; 75
     534:	31 05       	cpc	r19, r1
     536:	71 f0       	breq	.+28     	; 0x554 <DcMotor_Rotate+0xc8>
     538:	8b 81       	ldd	r24, Y+3	; 0x03
     53a:	9c 81       	ldd	r25, Y+4	; 0x04
     53c:	84 36       	cpi	r24, 0x64	; 100
     53e:	91 05       	cpc	r25, r1
     540:	69 f0       	breq	.+26     	; 0x55c <DcMotor_Rotate+0xd0>
     542:	10 c0       	rjmp	.+32     	; 0x564 <DcMotor_Rotate+0xd8>
		case (25):
			PWM_Timer0_Start(64);
     544:	80 e4       	ldi	r24, 0x40	; 64
     546:	0e 94 be 02 	call	0x57c	; 0x57c <PWM_Timer0_Start>
     54a:	0f c0       	rjmp	.+30     	; 0x56a <DcMotor_Rotate+0xde>
			break;
		case (50):
			PWM_Timer0_Start(128);
     54c:	80 e8       	ldi	r24, 0x80	; 128
     54e:	0e 94 be 02 	call	0x57c	; 0x57c <PWM_Timer0_Start>
     552:	0b c0       	rjmp	.+22     	; 0x56a <DcMotor_Rotate+0xde>
			break;
		case (75):
			PWM_Timer0_Start(192);
     554:	80 ec       	ldi	r24, 0xC0	; 192
     556:	0e 94 be 02 	call	0x57c	; 0x57c <PWM_Timer0_Start>
     55a:	07 c0       	rjmp	.+14     	; 0x56a <DcMotor_Rotate+0xde>
			break;
		case (100):
			PWM_Timer0_Start(255);
     55c:	8f ef       	ldi	r24, 0xFF	; 255
     55e:	0e 94 be 02 	call	0x57c	; 0x57c <PWM_Timer0_Start>
     562:	03 c0       	rjmp	.+6      	; 0x56a <DcMotor_Rotate+0xde>
			break;
		default:
			PWM_Timer0_Start(0);
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	0e 94 be 02 	call	0x57c	; 0x57c <PWM_Timer0_Start>
			break;
	}
}
     56a:	26 96       	adiw	r28, 0x06	; 6
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	de bf       	out	0x3e, r29	; 62
     572:	0f be       	out	0x3f, r0	; 63
     574:	cd bf       	out	0x3d, r28	; 61
     576:	cf 91       	pop	r28
     578:	df 91       	pop	r29
     57a:	08 95       	ret

0000057c <PWM_Timer0_Start>:
#include"PWM.h"
#include"std_types.h"
#include"common_macros.h"
#include"Motor.h"

void PWM_Timer0_Start(uint8 duty_cycle){
     57c:	df 93       	push	r29
     57e:	cf 93       	push	r28
     580:	0f 92       	push	r0
     582:	cd b7       	in	r28, 0x3d	; 61
     584:	de b7       	in	r29, 0x3e	; 62
     586:	89 83       	std	Y+1, r24	; 0x01
	Timer0Initialvalue = LOGIC_LOW;
     588:	e2 e5       	ldi	r30, 0x52	; 82
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	10 82       	st	Z, r1
	compareValue = duty_cycle;
     58e:	ec e5       	ldi	r30, 0x5C	; 92
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	89 81       	ldd	r24, Y+1	; 0x01
     594:	80 83       	st	Z, r24
	/*	first two lines are used to select the wave form
	 *	we chose Fats PWM Mode
	 *	WGM01 = 1 && WGM00 = 1
	 */
	if(duty_cycle == 0 ){
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	88 23       	and	r24, r24
     59a:	21 f4       	brne	.+8      	; 0x5a4 <PWM_Timer0_Start+0x28>
		Timer0_CounterControlRegister = LOGIC_LOW;
     59c:	e3 e5       	ldi	r30, 0x53	; 83
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	10 82       	st	Z, r1
     5a2:	3d c0       	rjmp	.+122    	; 0x61e <PWM_Timer0_Start+0xa2>
	}
	else{
	GPIO_setupPinDirection(Timer0ComparePort,Enable_Pin,PIN_OUTPUT);
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	63 e0       	ldi	r22, 0x03	; 3
     5a8:	41 e0       	ldi	r20, 0x01	; 1
     5aa:	0e 94 c5 07 	call	0xf8a	; 0xf8a <GPIO_setupPinDirection>

	SET_BIT(Timer0_CounterControlRegister,WaveformGenerationMode0);
     5ae:	a3 e5       	ldi	r26, 0x53	; 83
     5b0:	b0 e0       	ldi	r27, 0x00	; 0
     5b2:	e3 e5       	ldi	r30, 0x53	; 83
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	80 81       	ld	r24, Z
     5b8:	80 64       	ori	r24, 0x40	; 64
     5ba:	8c 93       	st	X, r24
	SET_BIT(Timer0_CounterControlRegister,WaveformGenerationMode1);
     5bc:	a3 e5       	ldi	r26, 0x53	; 83
     5be:	b0 e0       	ldi	r27, 0x00	; 0
     5c0:	e3 e5       	ldi	r30, 0x53	; 83
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	80 81       	ld	r24, Z
     5c6:	88 60       	ori	r24, 0x08	; 8
     5c8:	8c 93       	st	X, r24
	/*	To select the prescaler
	 * 	Here it's 8
	 * 	CS01 = 1 , CS00= 0 , CS02=0
	 */
	SET_BIT(Timer0_CounterControlRegister,Timer0Clock1);
     5ca:	a3 e5       	ldi	r26, 0x53	; 83
     5cc:	b0 e0       	ldi	r27, 0x00	; 0
     5ce:	e3 e5       	ldi	r30, 0x53	; 83
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	80 81       	ld	r24, Z
     5d4:	82 60       	ori	r24, 0x02	; 2
     5d6:	8c 93       	st	X, r24
	CLEAR_BIT(Timer0_CounterControlRegister,Timer0Clock0);
     5d8:	a3 e5       	ldi	r26, 0x53	; 83
     5da:	b0 e0       	ldi	r27, 0x00	; 0
     5dc:	e3 e5       	ldi	r30, 0x53	; 83
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	8e 7f       	andi	r24, 0xFE	; 254
     5e4:	8c 93       	st	X, r24
	CLEAR_BIT(Timer0_CounterControlRegister,Timer0Clock2);
     5e6:	a3 e5       	ldi	r26, 0x53	; 83
     5e8:	b0 e0       	ldi	r27, 0x00	; 0
     5ea:	e3 e5       	ldi	r30, 0x53	; 83
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	8b 7f       	andi	r24, 0xFB	; 251
     5f2:	8c 93       	st	X, r24
	/*	We access to bits to select the mode
	 * 	here the non inverting mode is selected
	 * 	So , COM01 = 1 && COM00 = 0
	 * */
	CLEAR_BIT(Timer0_CounterControlRegister,CompareOutputModePWM0);
     5f4:	a3 e5       	ldi	r26, 0x53	; 83
     5f6:	b0 e0       	ldi	r27, 0x00	; 0
     5f8:	e3 e5       	ldi	r30, 0x53	; 83
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	80 81       	ld	r24, Z
     5fe:	8f 7e       	andi	r24, 0xEF	; 239
     600:	8c 93       	st	X, r24
	SET_BIT(Timer0_CounterControlRegister,CompareOutputModePWM1);
     602:	a3 e5       	ldi	r26, 0x53	; 83
     604:	b0 e0       	ldi	r27, 0x00	; 0
     606:	e3 e5       	ldi	r30, 0x53	; 83
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	80 81       	ld	r24, Z
     60c:	80 62       	ori	r24, 0x20	; 32
     60e:	8c 93       	st	X, r24
	/*	FCO0 is zero when we use PWM
	 * 	So bit is cleared
	 * */
	CLEAR_BIT(Timer0_CounterControlRegister,ForceOutputCompare);
     610:	a3 e5       	ldi	r26, 0x53	; 83
     612:	b0 e0       	ldi	r27, 0x00	; 0
     614:	e3 e5       	ldi	r30, 0x53	; 83
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	80 81       	ld	r24, Z
     61a:	8f 77       	andi	r24, 0x7F	; 127
     61c:	8c 93       	st	X, r24
	/*	To set the enable pin that change the motor speed
	 * 	it's defined as PB3 Pin
	 * */
	}
}
     61e:	0f 90       	pop	r0
     620:	cf 91       	pop	r28
     622:	df 91       	pop	r29
     624:	08 95       	ret

00000626 <__vector_7>:
static volatile void (*g_callBackPtr2)(void) = NULL_PTR;
/*******************************************************************************
 *                             	    ISR		   		                           *
 *******************************************************************************/
ISR(TIMER1_COMPA_vect)
{
     626:	1f 92       	push	r1
     628:	0f 92       	push	r0
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	0f 92       	push	r0
     62e:	11 24       	eor	r1, r1
     630:	2f 93       	push	r18
     632:	3f 93       	push	r19
     634:	4f 93       	push	r20
     636:	5f 93       	push	r21
     638:	6f 93       	push	r22
     63a:	7f 93       	push	r23
     63c:	8f 93       	push	r24
     63e:	9f 93       	push	r25
     640:	af 93       	push	r26
     642:	bf 93       	push	r27
     644:	ef 93       	push	r30
     646:	ff 93       	push	r31
     648:	df 93       	push	r29
     64a:	cf 93       	push	r28
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
     650:	80 91 70 00 	lds	r24, 0x0070
     654:	90 91 71 00 	lds	r25, 0x0071
     658:	00 97       	sbiw	r24, 0x00	; 0
     65a:	29 f0       	breq	.+10     	; 0x666 <__vector_7+0x40>
	{
		(*g_callBackPtr1)();
     65c:	e0 91 70 00 	lds	r30, 0x0070
     660:	f0 91 71 00 	lds	r31, 0x0071
     664:	09 95       	icall
	}
}
     666:	cf 91       	pop	r28
     668:	df 91       	pop	r29
     66a:	ff 91       	pop	r31
     66c:	ef 91       	pop	r30
     66e:	bf 91       	pop	r27
     670:	af 91       	pop	r26
     672:	9f 91       	pop	r25
     674:	8f 91       	pop	r24
     676:	7f 91       	pop	r23
     678:	6f 91       	pop	r22
     67a:	5f 91       	pop	r21
     67c:	4f 91       	pop	r20
     67e:	3f 91       	pop	r19
     680:	2f 91       	pop	r18
     682:	0f 90       	pop	r0
     684:	0f be       	out	0x3f, r0	; 63
     686:	0f 90       	pop	r0
     688:	1f 90       	pop	r1
     68a:	18 95       	reti

0000068c <__vector_9>:

ISR(TIMER1_OVF_vect)
{
     68c:	1f 92       	push	r1
     68e:	0f 92       	push	r0
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	0f 92       	push	r0
     694:	11 24       	eor	r1, r1
     696:	2f 93       	push	r18
     698:	3f 93       	push	r19
     69a:	4f 93       	push	r20
     69c:	5f 93       	push	r21
     69e:	6f 93       	push	r22
     6a0:	7f 93       	push	r23
     6a2:	8f 93       	push	r24
     6a4:	9f 93       	push	r25
     6a6:	af 93       	push	r26
     6a8:	bf 93       	push	r27
     6aa:	ef 93       	push	r30
     6ac:	ff 93       	push	r31
     6ae:	df 93       	push	r29
     6b0:	cf 93       	push	r28
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
     6b6:	80 91 72 00 	lds	r24, 0x0072
     6ba:	90 91 73 00 	lds	r25, 0x0073
     6be:	00 97       	sbiw	r24, 0x00	; 0
     6c0:	29 f0       	breq	.+10     	; 0x6cc <__vector_9+0x40>
	{
		(*g_callBackPtr2)();
     6c2:	e0 91 72 00 	lds	r30, 0x0072
     6c6:	f0 91 73 00 	lds	r31, 0x0073
     6ca:	09 95       	icall
	}
}
     6cc:	cf 91       	pop	r28
     6ce:	df 91       	pop	r29
     6d0:	ff 91       	pop	r31
     6d2:	ef 91       	pop	r30
     6d4:	bf 91       	pop	r27
     6d6:	af 91       	pop	r26
     6d8:	9f 91       	pop	r25
     6da:	8f 91       	pop	r24
     6dc:	7f 91       	pop	r23
     6de:	6f 91       	pop	r22
     6e0:	5f 91       	pop	r21
     6e2:	4f 91       	pop	r20
     6e4:	3f 91       	pop	r19
     6e6:	2f 91       	pop	r18
     6e8:	0f 90       	pop	r0
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	0f 90       	pop	r0
     6ee:	1f 90       	pop	r1
     6f0:	18 95       	reti

000006f2 <Timer1_init>:
/*******************************************************************************
 *                               Functions		                               *
 *******************************************************************************/

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
     6f2:	df 93       	push	r29
     6f4:	cf 93       	push	r28
     6f6:	00 d0       	rcall	.+0      	; 0x6f8 <Timer1_init+0x6>
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <Timer1_init+0x8>
     6fa:	00 d0       	rcall	.+0      	; 0x6fc <Timer1_init+0xa>
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	9a 83       	std	Y+2, r25	; 0x02
     702:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TCCR1A,FOC1A);
     704:	af e4       	ldi	r26, 0x4F	; 79
     706:	b0 e0       	ldi	r27, 0x00	; 0
     708:	ef e4       	ldi	r30, 0x4F	; 79
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 81       	ld	r24, Z
     70e:	88 60       	ori	r24, 0x08	; 8
     710:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B);
     712:	af e4       	ldi	r26, 0x4F	; 79
     714:	b0 e0       	ldi	r27, 0x00	; 0
     716:	ef e4       	ldi	r30, 0x4F	; 79
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	80 81       	ld	r24, Z
     71c:	84 60       	ori	r24, 0x04	; 4
     71e:	8c 93       	st	X, r24
	TCNT1 = Config_Ptr->initial_value;
     720:	ac e4       	ldi	r26, 0x4C	; 76
     722:	b0 e0       	ldi	r27, 0x00	; 0
     724:	e9 81       	ldd	r30, Y+1	; 0x01
     726:	fa 81       	ldd	r31, Y+2	; 0x02
     728:	80 81       	ld	r24, Z
     72a:	91 81       	ldd	r25, Z+1	; 0x01
     72c:	11 96       	adiw	r26, 0x01	; 1
     72e:	9c 93       	st	X, r25
     730:	8e 93       	st	-X, r24
	switch(Config_Ptr->mode){
     732:	e9 81       	ldd	r30, Y+1	; 0x01
     734:	fa 81       	ldd	r31, Y+2	; 0x02
     736:	85 81       	ldd	r24, Z+5	; 0x05
     738:	28 2f       	mov	r18, r24
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	3e 83       	std	Y+6, r19	; 0x06
     73e:	2d 83       	std	Y+5, r18	; 0x05
     740:	8d 81       	ldd	r24, Y+5	; 0x05
     742:	9e 81       	ldd	r25, Y+6	; 0x06
     744:	00 97       	sbiw	r24, 0x00	; 0
     746:	61 f1       	breq	.+88     	; 0x7a0 <Timer1_init+0xae>
     748:	2d 81       	ldd	r18, Y+5	; 0x05
     74a:	3e 81       	ldd	r19, Y+6	; 0x06
     74c:	21 30       	cpi	r18, 0x01	; 1
     74e:	31 05       	cpc	r19, r1
     750:	09 f0       	breq	.+2      	; 0x754 <Timer1_init+0x62>
     752:	42 c0       	rjmp	.+132    	; 0x7d8 <Timer1_init+0xe6>
	case(Compare):
			CLEAR_BIT(TCCR1A,WGM10);
     754:	af e4       	ldi	r26, 0x4F	; 79
     756:	b0 e0       	ldi	r27, 0x00	; 0
     758:	ef e4       	ldi	r30, 0x4F	; 79
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	80 81       	ld	r24, Z
     75e:	8e 7f       	andi	r24, 0xFE	; 254
     760:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM11);
     762:	af e4       	ldi	r26, 0x4F	; 79
     764:	b0 e0       	ldi	r27, 0x00	; 0
     766:	ef e4       	ldi	r30, 0x4F	; 79
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	80 81       	ld	r24, Z
     76c:	8d 7f       	andi	r24, 0xFD	; 253
     76e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM12);
     770:	ae e4       	ldi	r26, 0x4E	; 78
     772:	b0 e0       	ldi	r27, 0x00	; 0
     774:	ee e4       	ldi	r30, 0x4E	; 78
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	80 81       	ld	r24, Z
     77a:	88 60       	ori	r24, 0x08	; 8
     77c:	8c 93       	st	X, r24
			OCR1A = Config_Ptr->compare_value;
     77e:	aa e4       	ldi	r26, 0x4A	; 74
     780:	b0 e0       	ldi	r27, 0x00	; 0
     782:	e9 81       	ldd	r30, Y+1	; 0x01
     784:	fa 81       	ldd	r31, Y+2	; 0x02
     786:	82 81       	ldd	r24, Z+2	; 0x02
     788:	93 81       	ldd	r25, Z+3	; 0x03
     78a:	11 96       	adiw	r26, 0x01	; 1
     78c:	9c 93       	st	X, r25
     78e:	8e 93       	st	-X, r24
			SET_BIT(TIMSK,OCIE1A);
     790:	a9 e5       	ldi	r26, 0x59	; 89
     792:	b0 e0       	ldi	r27, 0x00	; 0
     794:	e9 e5       	ldi	r30, 0x59	; 89
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	80 61       	ori	r24, 0x10	; 16
     79c:	8c 93       	st	X, r24
     79e:	1c c0       	rjmp	.+56     	; 0x7d8 <Timer1_init+0xe6>
			break;
	case(Normal):
			CLEAR_BIT(TCCR1A,WGM10);
     7a0:	af e4       	ldi	r26, 0x4F	; 79
     7a2:	b0 e0       	ldi	r27, 0x00	; 0
     7a4:	ef e4       	ldi	r30, 0x4F	; 79
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	80 81       	ld	r24, Z
     7aa:	8e 7f       	andi	r24, 0xFE	; 254
     7ac:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM11);
     7ae:	af e4       	ldi	r26, 0x4F	; 79
     7b0:	b0 e0       	ldi	r27, 0x00	; 0
     7b2:	ef e4       	ldi	r30, 0x4F	; 79
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	80 81       	ld	r24, Z
     7b8:	8d 7f       	andi	r24, 0xFD	; 253
     7ba:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM12);
     7bc:	ae e4       	ldi	r26, 0x4E	; 78
     7be:	b0 e0       	ldi	r27, 0x00	; 0
     7c0:	ee e4       	ldi	r30, 0x4E	; 78
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	80 81       	ld	r24, Z
     7c6:	87 7f       	andi	r24, 0xF7	; 247
     7c8:	8c 93       	st	X, r24
			SET_BIT(TIMSK,TOIE1);
     7ca:	a9 e5       	ldi	r26, 0x59	; 89
     7cc:	b0 e0       	ldi	r27, 0x00	; 0
     7ce:	e9 e5       	ldi	r30, 0x59	; 89
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	80 81       	ld	r24, Z
     7d4:	84 60       	ori	r24, 0x04	; 4
     7d6:	8c 93       	st	X, r24
			break;
	}
	switch(Config_Ptr->prescaler){
     7d8:	e9 81       	ldd	r30, Y+1	; 0x01
     7da:	fa 81       	ldd	r31, Y+2	; 0x02
     7dc:	84 81       	ldd	r24, Z+4	; 0x04
     7de:	28 2f       	mov	r18, r24
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	3c 83       	std	Y+4, r19	; 0x04
     7e4:	2b 83       	std	Y+3, r18	; 0x03
     7e6:	8b 81       	ldd	r24, Y+3	; 0x03
     7e8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ea:	82 30       	cpi	r24, 0x02	; 2
     7ec:	91 05       	cpc	r25, r1
     7ee:	09 f4       	brne	.+2      	; 0x7f2 <Timer1_init+0x100>
     7f0:	48 c0       	rjmp	.+144    	; 0x882 <__stack+0x23>
     7f2:	2b 81       	ldd	r18, Y+3	; 0x03
     7f4:	3c 81       	ldd	r19, Y+4	; 0x04
     7f6:	23 30       	cpi	r18, 0x03	; 3
     7f8:	31 05       	cpc	r19, r1
     7fa:	54 f4       	brge	.+20     	; 0x810 <Timer1_init+0x11e>
     7fc:	8b 81       	ldd	r24, Y+3	; 0x03
     7fe:	9c 81       	ldd	r25, Y+4	; 0x04
     800:	00 97       	sbiw	r24, 0x00	; 0
     802:	99 f0       	breq	.+38     	; 0x82a <Timer1_init+0x138>
     804:	2b 81       	ldd	r18, Y+3	; 0x03
     806:	3c 81       	ldd	r19, Y+4	; 0x04
     808:	21 30       	cpi	r18, 0x01	; 1
     80a:	31 05       	cpc	r19, r1
     80c:	21 f1       	breq	.+72     	; 0x856 <Timer1_init+0x164>
     80e:	7a c0       	rjmp	.+244    	; 0x904 <__stack+0xa5>
     810:	8b 81       	ldd	r24, Y+3	; 0x03
     812:	9c 81       	ldd	r25, Y+4	; 0x04
     814:	83 30       	cpi	r24, 0x03	; 3
     816:	91 05       	cpc	r25, r1
     818:	09 f4       	brne	.+2      	; 0x81c <Timer1_init+0x12a>
     81a:	49 c0       	rjmp	.+146    	; 0x8ae <__stack+0x4f>
     81c:	2b 81       	ldd	r18, Y+3	; 0x03
     81e:	3c 81       	ldd	r19, Y+4	; 0x04
     820:	24 30       	cpi	r18, 0x04	; 4
     822:	31 05       	cpc	r19, r1
     824:	09 f4       	brne	.+2      	; 0x828 <Timer1_init+0x136>
     826:	59 c0       	rjmp	.+178    	; 0x8da <__stack+0x7b>
     828:	6d c0       	rjmp	.+218    	; 0x904 <__stack+0xa5>
	case(Prescaler1):
		SET_BIT(TCCR1B,CS10);
     82a:	ae e4       	ldi	r26, 0x4E	; 78
     82c:	b0 e0       	ldi	r27, 0x00	; 0
     82e:	ee e4       	ldi	r30, 0x4E	; 78
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	81 60       	ori	r24, 0x01	; 1
     836:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS11);
     838:	ae e4       	ldi	r26, 0x4E	; 78
     83a:	b0 e0       	ldi	r27, 0x00	; 0
     83c:	ee e4       	ldi	r30, 0x4E	; 78
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	80 81       	ld	r24, Z
     842:	8d 7f       	andi	r24, 0xFD	; 253
     844:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS12);
     846:	ae e4       	ldi	r26, 0x4E	; 78
     848:	b0 e0       	ldi	r27, 0x00	; 0
     84a:	ee e4       	ldi	r30, 0x4E	; 78
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	80 81       	ld	r24, Z
     850:	8b 7f       	andi	r24, 0xFB	; 251
     852:	8c 93       	st	X, r24
     854:	57 c0       	rjmp	.+174    	; 0x904 <__stack+0xa5>
		break;
	case(Prescaler8):
		CLEAR_BIT(TCCR1B,CS10);
     856:	ae e4       	ldi	r26, 0x4E	; 78
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	ee e4       	ldi	r30, 0x4E	; 78
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	80 81       	ld	r24, Z
     860:	8e 7f       	andi	r24, 0xFE	; 254
     862:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS11);
     864:	ae e4       	ldi	r26, 0x4E	; 78
     866:	b0 e0       	ldi	r27, 0x00	; 0
     868:	ee e4       	ldi	r30, 0x4E	; 78
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	80 81       	ld	r24, Z
     86e:	82 60       	ori	r24, 0x02	; 2
     870:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS12);
     872:	ae e4       	ldi	r26, 0x4E	; 78
     874:	b0 e0       	ldi	r27, 0x00	; 0
     876:	ee e4       	ldi	r30, 0x4E	; 78
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	80 81       	ld	r24, Z
     87c:	8b 7f       	andi	r24, 0xFB	; 251
     87e:	8c 93       	st	X, r24
     880:	41 c0       	rjmp	.+130    	; 0x904 <__stack+0xa5>
		break;
	case(Prescaler64):
		SET_BIT(TCCR1B,CS10);
     882:	ae e4       	ldi	r26, 0x4E	; 78
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	ee e4       	ldi	r30, 0x4E	; 78
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	80 81       	ld	r24, Z
     88c:	81 60       	ori	r24, 0x01	; 1
     88e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS11);
     890:	ae e4       	ldi	r26, 0x4E	; 78
     892:	b0 e0       	ldi	r27, 0x00	; 0
     894:	ee e4       	ldi	r30, 0x4E	; 78
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	80 81       	ld	r24, Z
     89a:	82 60       	ori	r24, 0x02	; 2
     89c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS12);
     89e:	ae e4       	ldi	r26, 0x4E	; 78
     8a0:	b0 e0       	ldi	r27, 0x00	; 0
     8a2:	ee e4       	ldi	r30, 0x4E	; 78
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	80 81       	ld	r24, Z
     8a8:	8b 7f       	andi	r24, 0xFB	; 251
     8aa:	8c 93       	st	X, r24
     8ac:	2b c0       	rjmp	.+86     	; 0x904 <__stack+0xa5>
		break;
	case(Prescaler256):
		CLEAR_BIT(TCCR1B,CS10);
     8ae:	ae e4       	ldi	r26, 0x4E	; 78
     8b0:	b0 e0       	ldi	r27, 0x00	; 0
     8b2:	ee e4       	ldi	r30, 0x4E	; 78
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	80 81       	ld	r24, Z
     8b8:	8e 7f       	andi	r24, 0xFE	; 254
     8ba:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS11);
     8bc:	ae e4       	ldi	r26, 0x4E	; 78
     8be:	b0 e0       	ldi	r27, 0x00	; 0
     8c0:	ee e4       	ldi	r30, 0x4E	; 78
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	80 81       	ld	r24, Z
     8c6:	8d 7f       	andi	r24, 0xFD	; 253
     8c8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS12);
     8ca:	ae e4       	ldi	r26, 0x4E	; 78
     8cc:	b0 e0       	ldi	r27, 0x00	; 0
     8ce:	ee e4       	ldi	r30, 0x4E	; 78
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 81       	ld	r24, Z
     8d4:	84 60       	ori	r24, 0x04	; 4
     8d6:	8c 93       	st	X, r24
     8d8:	15 c0       	rjmp	.+42     	; 0x904 <__stack+0xa5>
		break;
	case(Prescaler1024):
		SET_BIT(TCCR1B,CS10);
     8da:	ae e4       	ldi	r26, 0x4E	; 78
     8dc:	b0 e0       	ldi	r27, 0x00	; 0
     8de:	ee e4       	ldi	r30, 0x4E	; 78
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 81       	ld	r24, Z
     8e4:	81 60       	ori	r24, 0x01	; 1
     8e6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS11);
     8e8:	ae e4       	ldi	r26, 0x4E	; 78
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	ee e4       	ldi	r30, 0x4E	; 78
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	80 81       	ld	r24, Z
     8f2:	8d 7f       	andi	r24, 0xFD	; 253
     8f4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS12);
     8f6:	ae e4       	ldi	r26, 0x4E	; 78
     8f8:	b0 e0       	ldi	r27, 0x00	; 0
     8fa:	ee e4       	ldi	r30, 0x4E	; 78
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	80 81       	ld	r24, Z
     900:	84 60       	ori	r24, 0x04	; 4
     902:	8c 93       	st	X, r24
		break;
	}
}
     904:	26 96       	adiw	r28, 0x06	; 6
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	f8 94       	cli
     90a:	de bf       	out	0x3e, r29	; 62
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	cd bf       	out	0x3d, r28	; 61
     910:	cf 91       	pop	r28
     912:	df 91       	pop	r29
     914:	08 95       	ret

00000916 <Timer1_deInit>:
void Timer1_deInit(void){
     916:	df 93       	push	r29
     918:	cf 93       	push	r28
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR1B,CS10);
     91e:	ae e4       	ldi	r26, 0x4E	; 78
     920:	b0 e0       	ldi	r27, 0x00	; 0
     922:	ee e4       	ldi	r30, 0x4E	; 78
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	8e 7f       	andi	r24, 0xFE	; 254
     92a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS11);
     92c:	ae e4       	ldi	r26, 0x4E	; 78
     92e:	b0 e0       	ldi	r27, 0x00	; 0
     930:	ee e4       	ldi	r30, 0x4E	; 78
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	80 81       	ld	r24, Z
     936:	8d 7f       	andi	r24, 0xFD	; 253
     938:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS12);
     93a:	ae e4       	ldi	r26, 0x4E	; 78
     93c:	b0 e0       	ldi	r27, 0x00	; 0
     93e:	ee e4       	ldi	r30, 0x4E	; 78
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	80 81       	ld	r24, Z
     944:	8b 7f       	andi	r24, 0xFB	; 251
     946:	8c 93       	st	X, r24
}
     948:	cf 91       	pop	r28
     94a:	df 91       	pop	r29
     94c:	08 95       	ret

0000094e <TIMER1_COMP_setCallBack>:
void TIMER1_COMP_setCallBack( void(*a_ptr)(void) )
{
     94e:	df 93       	push	r29
     950:	cf 93       	push	r28
     952:	00 d0       	rcall	.+0      	; 0x954 <TIMER1_COMP_setCallBack+0x6>
     954:	cd b7       	in	r28, 0x3d	; 61
     956:	de b7       	in	r29, 0x3e	; 62
     958:	9a 83       	std	Y+2, r25	; 0x02
     95a:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr1 = a_ptr;
     95c:	89 81       	ldd	r24, Y+1	; 0x01
     95e:	9a 81       	ldd	r25, Y+2	; 0x02
     960:	90 93 71 00 	sts	0x0071, r25
     964:	80 93 70 00 	sts	0x0070, r24
}
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	cf 91       	pop	r28
     96e:	df 91       	pop	r29
     970:	08 95       	ret

00000972 <TIMER1_OVF_setCallBack>:

void TIMER1_OVF_setCallBack( void(*a_ptr)(void) )
{
     972:	df 93       	push	r29
     974:	cf 93       	push	r28
     976:	00 d0       	rcall	.+0      	; 0x978 <TIMER1_OVF_setCallBack+0x6>
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	9a 83       	std	Y+2, r25	; 0x02
     97e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr2 = a_ptr;
     980:	89 81       	ldd	r24, Y+1	; 0x01
     982:	9a 81       	ldd	r25, Y+2	; 0x02
     984:	90 93 73 00 	sts	0x0073, r25
     988:	80 93 72 00 	sts	0x0072, r24
}
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	cf 91       	pop	r28
     992:	df 91       	pop	r29
     994:	08 95       	ret

00000996 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const USART_Config * Config_Ptr)
{
     996:	df 93       	push	r29
     998:	cf 93       	push	r28
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
     99e:	2e 97       	sbiw	r28, 0x0e	; 14
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	cd bf       	out	0x3d, r28	; 61
     9aa:	9c 83       	std	Y+4, r25	; 0x04
     9ac:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     9ae:	1a 82       	std	Y+2, r1	; 0x02
     9b0:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	SET_BIT(UCSRA,U2X);
     9b2:	ab e2       	ldi	r26, 0x2B	; 43
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	eb e2       	ldi	r30, 0x2B	; 43
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	80 81       	ld	r24, Z
     9bc:	82 60       	ori	r24, 0x02	; 2
     9be:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	SET_BIT(UCSRB,RXEN);
     9c0:	aa e2       	ldi	r26, 0x2A	; 42
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	ea e2       	ldi	r30, 0x2A	; 42
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	80 81       	ld	r24, Z
     9ca:	80 61       	ori	r24, 0x10	; 16
     9cc:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
     9ce:	aa e2       	ldi	r26, 0x2A	; 42
     9d0:	b0 e0       	ldi	r27, 0x00	; 0
     9d2:	ea e2       	ldi	r30, 0x2A	; 42
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	80 81       	ld	r24, Z
     9d8:	88 60       	ori	r24, 0x08	; 8
     9da:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	SET_BIT(UCSRB,URSEL);
     9dc:	aa e2       	ldi	r26, 0x2A	; 42
     9de:	b0 e0       	ldi	r27, 0x00	; 0
     9e0:	ea e2       	ldi	r30, 0x2A	; 42
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	80 81       	ld	r24, Z
     9e6:	80 68       	ori	r24, 0x80	; 128
     9e8:	8c 93       	st	X, r24

	switch(Config_Ptr->parity){
     9ea:	eb 81       	ldd	r30, Y+3	; 0x03
     9ec:	fc 81       	ldd	r31, Y+4	; 0x04
     9ee:	80 81       	ld	r24, Z
     9f0:	28 2f       	mov	r18, r24
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	3e 87       	std	Y+14, r19	; 0x0e
     9f6:	2d 87       	std	Y+13, r18	; 0x0d
     9f8:	8d 85       	ldd	r24, Y+13	; 0x0d
     9fa:	9e 85       	ldd	r25, Y+14	; 0x0e
     9fc:	81 30       	cpi	r24, 0x01	; 1
     9fe:	91 05       	cpc	r25, r1
     a00:	c1 f0       	breq	.+48     	; 0xa32 <UART_init+0x9c>
     a02:	2d 85       	ldd	r18, Y+13	; 0x0d
     a04:	3e 85       	ldd	r19, Y+14	; 0x0e
     a06:	22 30       	cpi	r18, 0x02	; 2
     a08:	31 05       	cpc	r19, r1
     a0a:	11 f1       	breq	.+68     	; 0xa50 <UART_init+0xba>
     a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a10:	00 97       	sbiw	r24, 0x00	; 0
     a12:	61 f5       	brne	.+88     	; 0xa6c <UART_init+0xd6>
	case (Disabled) :
		CLEAR_BIT(UCSRC,UPM0);
     a14:	a0 e4       	ldi	r26, 0x40	; 64
     a16:	b0 e0       	ldi	r27, 0x00	; 0
     a18:	e0 e4       	ldi	r30, 0x40	; 64
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	80 81       	ld	r24, Z
     a1e:	8f 7e       	andi	r24, 0xEF	; 239
     a20:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UPM1);
     a22:	a0 e4       	ldi	r26, 0x40	; 64
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	e0 e4       	ldi	r30, 0x40	; 64
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 81       	ld	r24, Z
     a2c:	8f 7d       	andi	r24, 0xDF	; 223
     a2e:	8c 93       	st	X, r24
     a30:	1d c0       	rjmp	.+58     	; 0xa6c <UART_init+0xd6>
		break;
	case (Enabled_oddParity):
		SET_BIT(UCSRC,UPM0);
     a32:	a0 e4       	ldi	r26, 0x40	; 64
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	e0 e4       	ldi	r30, 0x40	; 64
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	80 81       	ld	r24, Z
     a3c:	80 61       	ori	r24, 0x10	; 16
     a3e:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UPM1);
     a40:	a0 e4       	ldi	r26, 0x40	; 64
     a42:	b0 e0       	ldi	r27, 0x00	; 0
     a44:	e0 e4       	ldi	r30, 0x40	; 64
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	80 81       	ld	r24, Z
     a4a:	8f 7d       	andi	r24, 0xDF	; 223
     a4c:	8c 93       	st	X, r24
     a4e:	0e c0       	rjmp	.+28     	; 0xa6c <UART_init+0xd6>
		break;
	case (Enabled_evenParity):
		CLEAR_BIT(UCSRC,UPM0);
     a50:	a0 e4       	ldi	r26, 0x40	; 64
     a52:	b0 e0       	ldi	r27, 0x00	; 0
     a54:	e0 e4       	ldi	r30, 0x40	; 64
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	80 81       	ld	r24, Z
     a5a:	8f 7e       	andi	r24, 0xEF	; 239
     a5c:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UPM1);
     a5e:	a0 e4       	ldi	r26, 0x40	; 64
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	e0 e4       	ldi	r30, 0x40	; 64
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	80 81       	ld	r24, Z
     a68:	80 62       	ori	r24, 0x20	; 32
     a6a:	8c 93       	st	X, r24
		break;
	}
	switch(Config_Ptr->stop){
     a6c:	eb 81       	ldd	r30, Y+3	; 0x03
     a6e:	fc 81       	ldd	r31, Y+4	; 0x04
     a70:	83 81       	ldd	r24, Z+3	; 0x03
     a72:	28 2f       	mov	r18, r24
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	3c 87       	std	Y+12, r19	; 0x0c
     a78:	2b 87       	std	Y+11, r18	; 0x0b
     a7a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a7c:	9c 85       	ldd	r25, Y+12	; 0x0c
     a7e:	00 97       	sbiw	r24, 0x00	; 0
     a80:	31 f0       	breq	.+12     	; 0xa8e <UART_init+0xf8>
     a82:	2b 85       	ldd	r18, Y+11	; 0x0b
     a84:	3c 85       	ldd	r19, Y+12	; 0x0c
     a86:	21 30       	cpi	r18, 0x01	; 1
     a88:	31 05       	cpc	r19, r1
     a8a:	49 f0       	breq	.+18     	; 0xa9e <UART_init+0x108>
     a8c:	0f c0       	rjmp	.+30     	; 0xaac <UART_init+0x116>
		case (oneBit) :
			CLEAR_BIT(UCSRC,USBS);
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	e0 e4       	ldi	r30, 0x40	; 64
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	80 81       	ld	r24, Z
     a98:	87 7f       	andi	r24, 0xF7	; 247
     a9a:	8c 93       	st	X, r24
     a9c:	07 c0       	rjmp	.+14     	; 0xaac <UART_init+0x116>
			break;
		case (twoBit):
			SET_BIT(UCSRC,USBS);
     a9e:	a0 e4       	ldi	r26, 0x40	; 64
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	e0 e4       	ldi	r30, 0x40	; 64
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	80 81       	ld	r24, Z
     aa8:	88 60       	ori	r24, 0x08	; 8
     aaa:	8c 93       	st	X, r24
			break;
		}
	switch(Config_Ptr->ch){
     aac:	eb 81       	ldd	r30, Y+3	; 0x03
     aae:	fc 81       	ldd	r31, Y+4	; 0x04
     ab0:	81 81       	ldd	r24, Z+1	; 0x01
     ab2:	28 2f       	mov	r18, r24
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	3a 87       	std	Y+10, r19	; 0x0a
     ab8:	29 87       	std	Y+9, r18	; 0x09
     aba:	89 85       	ldd	r24, Y+9	; 0x09
     abc:	9a 85       	ldd	r25, Y+10	; 0x0a
     abe:	82 30       	cpi	r24, 0x02	; 2
     ac0:	91 05       	cpc	r25, r1
     ac2:	09 f4       	brne	.+2      	; 0xac6 <UART_init+0x130>
     ac4:	48 c0       	rjmp	.+144    	; 0xb56 <UART_init+0x1c0>
     ac6:	29 85       	ldd	r18, Y+9	; 0x09
     ac8:	3a 85       	ldd	r19, Y+10	; 0x0a
     aca:	23 30       	cpi	r18, 0x03	; 3
     acc:	31 05       	cpc	r19, r1
     ace:	54 f4       	brge	.+20     	; 0xae4 <UART_init+0x14e>
     ad0:	89 85       	ldd	r24, Y+9	; 0x09
     ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	99 f0       	breq	.+38     	; 0xafe <UART_init+0x168>
     ad8:	29 85       	ldd	r18, Y+9	; 0x09
     ada:	3a 85       	ldd	r19, Y+10	; 0x0a
     adc:	21 30       	cpi	r18, 0x01	; 1
     ade:	31 05       	cpc	r19, r1
     ae0:	21 f1       	breq	.+72     	; 0xb2a <UART_init+0x194>
     ae2:	7a c0       	rjmp	.+244    	; 0xbd8 <UART_init+0x242>
     ae4:	89 85       	ldd	r24, Y+9	; 0x09
     ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae8:	83 30       	cpi	r24, 0x03	; 3
     aea:	91 05       	cpc	r25, r1
     aec:	09 f4       	brne	.+2      	; 0xaf0 <UART_init+0x15a>
     aee:	49 c0       	rjmp	.+146    	; 0xb82 <UART_init+0x1ec>
     af0:	29 85       	ldd	r18, Y+9	; 0x09
     af2:	3a 85       	ldd	r19, Y+10	; 0x0a
     af4:	24 30       	cpi	r18, 0x04	; 4
     af6:	31 05       	cpc	r19, r1
     af8:	09 f4       	brne	.+2      	; 0xafc <UART_init+0x166>
     afa:	59 c0       	rjmp	.+178    	; 0xbae <UART_init+0x218>
     afc:	6d c0       	rjmp	.+218    	; 0xbd8 <UART_init+0x242>
		case(Size5) :
			CLEAR_BIT(UCSRC,UCSZ0);
     afe:	a0 e4       	ldi	r26, 0x40	; 64
     b00:	b0 e0       	ldi	r27, 0x00	; 0
     b02:	e0 e4       	ldi	r30, 0x40	; 64
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	80 81       	ld	r24, Z
     b08:	8d 7f       	andi	r24, 0xFD	; 253
     b0a:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC,UCSZ1);
     b0c:	a0 e4       	ldi	r26, 0x40	; 64
     b0e:	b0 e0       	ldi	r27, 0x00	; 0
     b10:	e0 e4       	ldi	r30, 0x40	; 64
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	8b 7f       	andi	r24, 0xFB	; 251
     b18:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC,UCSZ2);
     b1a:	a0 e4       	ldi	r26, 0x40	; 64
     b1c:	b0 e0       	ldi	r27, 0x00	; 0
     b1e:	e0 e4       	ldi	r30, 0x40	; 64
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	80 81       	ld	r24, Z
     b24:	8b 7f       	andi	r24, 0xFB	; 251
     b26:	8c 93       	st	X, r24
     b28:	57 c0       	rjmp	.+174    	; 0xbd8 <UART_init+0x242>
			break;
		case(Size6) :
			SET_BIT(UCSRC,UCSZ0);
     b2a:	a0 e4       	ldi	r26, 0x40	; 64
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	e0 e4       	ldi	r30, 0x40	; 64
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	80 81       	ld	r24, Z
     b34:	82 60       	ori	r24, 0x02	; 2
     b36:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC,UCSZ1);
     b38:	a0 e4       	ldi	r26, 0x40	; 64
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	e0 e4       	ldi	r30, 0x40	; 64
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	8b 7f       	andi	r24, 0xFB	; 251
     b44:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC,UCSZ2);
     b46:	a0 e4       	ldi	r26, 0x40	; 64
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	e0 e4       	ldi	r30, 0x40	; 64
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z
     b50:	8b 7f       	andi	r24, 0xFB	; 251
     b52:	8c 93       	st	X, r24
     b54:	41 c0       	rjmp	.+130    	; 0xbd8 <UART_init+0x242>
			break;
		case(Size7) :
			CLEAR_BIT(UCSRC,UCSZ0);
     b56:	a0 e4       	ldi	r26, 0x40	; 64
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	e0 e4       	ldi	r30, 0x40	; 64
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	8d 7f       	andi	r24, 0xFD	; 253
     b62:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ1);
     b64:	a0 e4       	ldi	r26, 0x40	; 64
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	e0 e4       	ldi	r30, 0x40	; 64
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	84 60       	ori	r24, 0x04	; 4
     b70:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC,UCSZ2);
     b72:	a0 e4       	ldi	r26, 0x40	; 64
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e0 e4       	ldi	r30, 0x40	; 64
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	8b 7f       	andi	r24, 0xFB	; 251
     b7e:	8c 93       	st	X, r24
     b80:	2b c0       	rjmp	.+86     	; 0xbd8 <UART_init+0x242>
			break;
		case(Size8) :
			SET_BIT(UCSRC,UCSZ0);
     b82:	a0 e4       	ldi	r26, 0x40	; 64
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e0 e4       	ldi	r30, 0x40	; 64
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	82 60       	ori	r24, 0x02	; 2
     b8e:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ1);
     b90:	a0 e4       	ldi	r26, 0x40	; 64
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	e0 e4       	ldi	r30, 0x40	; 64
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	84 60       	ori	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC,UCSZ2);
     b9e:	a0 e4       	ldi	r26, 0x40	; 64
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e0 e4       	ldi	r30, 0x40	; 64
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	8b 7f       	andi	r24, 0xFB	; 251
     baa:	8c 93       	st	X, r24
     bac:	15 c0       	rjmp	.+42     	; 0xbd8 <UART_init+0x242>
			break;
		case(Size9) :
			SET_BIT(UCSRC,UCSZ0);
     bae:	a0 e4       	ldi	r26, 0x40	; 64
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e0 e4       	ldi	r30, 0x40	; 64
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	82 60       	ori	r24, 0x02	; 2
     bba:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ1);
     bbc:	a0 e4       	ldi	r26, 0x40	; 64
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e0 e4       	ldi	r30, 0x40	; 64
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	84 60       	ori	r24, 0x04	; 4
     bc8:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ2);
     bca:	a0 e4       	ldi	r26, 0x40	; 64
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e0 e4       	ldi	r30, 0x40	; 64
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	84 60       	ori	r24, 0x04	; 4
     bd6:	8c 93       	st	X, r24
			break;
	}
	switch(Config_Ptr->mode){
     bd8:	eb 81       	ldd	r30, Y+3	; 0x03
     bda:	fc 81       	ldd	r31, Y+4	; 0x04
     bdc:	82 81       	ldd	r24, Z+2	; 0x02
     bde:	28 2f       	mov	r18, r24
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	38 87       	std	Y+8, r19	; 0x08
     be4:	2f 83       	std	Y+7, r18	; 0x07
     be6:	8f 81       	ldd	r24, Y+7	; 0x07
     be8:	98 85       	ldd	r25, Y+8	; 0x08
     bea:	00 97       	sbiw	r24, 0x00	; 0
     bec:	31 f0       	breq	.+12     	; 0xbfa <UART_init+0x264>
     bee:	2f 81       	ldd	r18, Y+7	; 0x07
     bf0:	38 85       	ldd	r19, Y+8	; 0x08
     bf2:	21 30       	cpi	r18, 0x01	; 1
     bf4:	31 05       	cpc	r19, r1
     bf6:	49 f0       	breq	.+18     	; 0xc0a <UART_init+0x274>
     bf8:	0f c0       	rjmp	.+30     	; 0xc18 <UART_init+0x282>
		case(Synchronous):
			SET_BIT(UCSRC,UMSEL);
     bfa:	a0 e4       	ldi	r26, 0x40	; 64
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e0 e4       	ldi	r30, 0x40	; 64
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	80 64       	ori	r24, 0x40	; 64
     c06:	8c 93       	st	X, r24
     c08:	07 c0       	rjmp	.+14     	; 0xc18 <UART_init+0x282>
			break;
		case(Asynchronous):
			CLEAR_BIT(UCSRC,UMSEL);
     c0a:	a0 e4       	ldi	r26, 0x40	; 64
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e0 e4       	ldi	r30, 0x40	; 64
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	8f 7b       	andi	r24, 0xBF	; 191
     c16:	8c 93       	st	X, r24
			break;
	}
	switch(Config_Ptr->rate){
     c18:	eb 81       	ldd	r30, Y+3	; 0x03
     c1a:	fc 81       	ldd	r31, Y+4	; 0x04
     c1c:	84 81       	ldd	r24, Z+4	; 0x04
     c1e:	95 81       	ldd	r25, Z+5	; 0x05
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
     c24:	2d 81       	ldd	r18, Y+5	; 0x05
     c26:	3e 81       	ldd	r19, Y+6	; 0x06
     c28:	85 e2       	ldi	r24, 0x25	; 37
     c2a:	20 38       	cpi	r18, 0x80	; 128
     c2c:	38 07       	cpc	r19, r24
     c2e:	09 f4       	brne	.+2      	; 0xc32 <UART_init+0x29c>
     c30:	41 c0       	rjmp	.+130    	; 0xcb4 <UART_init+0x31e>
     c32:	2d 81       	ldd	r18, Y+5	; 0x05
     c34:	3e 81       	ldd	r19, Y+6	; 0x06
     c36:	85 e2       	ldi	r24, 0x25	; 37
     c38:	21 38       	cpi	r18, 0x81	; 129
     c3a:	38 07       	cpc	r19, r24
     c3c:	68 f4       	brcc	.+26     	; 0xc58 <UART_init+0x2c2>
     c3e:	2d 81       	ldd	r18, Y+5	; 0x05
     c40:	3e 81       	ldd	r19, Y+6	; 0x06
     c42:	89 e0       	ldi	r24, 0x09	; 9
     c44:	20 36       	cpi	r18, 0x60	; 96
     c46:	38 07       	cpc	r19, r24
     c48:	a9 f0       	breq	.+42     	; 0xc74 <UART_init+0x2de>
     c4a:	2d 81       	ldd	r18, Y+5	; 0x05
     c4c:	3e 81       	ldd	r19, Y+6	; 0x06
     c4e:	82 e1       	ldi	r24, 0x12	; 18
     c50:	20 3c       	cpi	r18, 0xC0	; 192
     c52:	38 07       	cpc	r19, r24
     c54:	f9 f0       	breq	.+62     	; 0xc94 <UART_init+0x2fe>
     c56:	5d c0       	rjmp	.+186    	; 0xd12 <UART_init+0x37c>
     c58:	2d 81       	ldd	r18, Y+5	; 0x05
     c5a:	3e 81       	ldd	r19, Y+6	; 0x06
     c5c:	88 e3       	ldi	r24, 0x38	; 56
     c5e:	20 34       	cpi	r18, 0x40	; 64
     c60:	38 07       	cpc	r19, r24
     c62:	c1 f1       	breq	.+112    	; 0xcd4 <UART_init+0x33e>
     c64:	2d 81       	ldd	r18, Y+5	; 0x05
     c66:	3e 81       	ldd	r19, Y+6	; 0x06
     c68:	8b e4       	ldi	r24, 0x4B	; 75
     c6a:	20 30       	cpi	r18, 0x00	; 0
     c6c:	38 07       	cpc	r19, r24
     c6e:	09 f4       	brne	.+2      	; 0xc72 <UART_init+0x2dc>
     c70:	41 c0       	rjmp	.+130    	; 0xcf4 <UART_init+0x35e>
     c72:	4f c0       	rjmp	.+158    	; 0xd12 <UART_init+0x37c>
	case(BaudRate2400):
			ubrr_value = (uint16)(((F_CPU / (BaudRate2400 * 8UL))) - 1);
     c74:	8f e9       	ldi	r24, 0x9F	; 159
     c76:	91 e0       	ldi	r25, 0x01	; 1
     c78:	9a 83       	std	Y+2, r25	; 0x02
     c7a:	89 83       	std	Y+1, r24	; 0x01
			UBRRH = ubrr_value>>8;
     c7c:	e0 e4       	ldi	r30, 0x40	; 64
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	9a 81       	ldd	r25, Y+2	; 0x02
     c84:	89 2f       	mov	r24, r25
     c86:	99 27       	eor	r25, r25
     c88:	80 83       	st	Z, r24
			UBRRL = ubrr_value;
     c8a:	e9 e2       	ldi	r30, 0x29	; 41
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	80 83       	st	Z, r24
     c92:	3f c0       	rjmp	.+126    	; 0xd12 <UART_init+0x37c>
			break;
	case(BaudRate4800):
			ubrr_value = (uint16)(((F_CPU / (BaudRate4800 * 8UL))) - 1);
     c94:	8f ec       	ldi	r24, 0xCF	; 207
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	9a 83       	std	Y+2, r25	; 0x02
     c9a:	89 83       	std	Y+1, r24	; 0x01
			UBRRH = ubrr_value>>8;
     c9c:	e0 e4       	ldi	r30, 0x40	; 64
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	9a 81       	ldd	r25, Y+2	; 0x02
     ca4:	89 2f       	mov	r24, r25
     ca6:	99 27       	eor	r25, r25
     ca8:	80 83       	st	Z, r24
			UBRRL = ubrr_value;
     caa:	e9 e2       	ldi	r30, 0x29	; 41
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	80 83       	st	Z, r24
     cb2:	2f c0       	rjmp	.+94     	; 0xd12 <UART_init+0x37c>
			break;
	case(BaudRate9600):
			ubrr_value = (uint16)(((F_CPU / (BaudRate9600 * 8UL))) - 1);
     cb4:	87 e6       	ldi	r24, 0x67	; 103
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	9a 83       	std	Y+2, r25	; 0x02
     cba:	89 83       	std	Y+1, r24	; 0x01
			UBRRH = ubrr_value>>8;
     cbc:	e0 e4       	ldi	r30, 0x40	; 64
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	9a 81       	ldd	r25, Y+2	; 0x02
     cc4:	89 2f       	mov	r24, r25
     cc6:	99 27       	eor	r25, r25
     cc8:	80 83       	st	Z, r24
			UBRRL = ubrr_value;
     cca:	e9 e2       	ldi	r30, 0x29	; 41
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	80 83       	st	Z, r24
     cd2:	1f c0       	rjmp	.+62     	; 0xd12 <UART_init+0x37c>
			break;
	case(BaudRate14400):
			ubrr_value = (uint16)(((F_CPU / (BaudRate9600 * 8UL))) - 1);
     cd4:	87 e6       	ldi	r24, 0x67	; 103
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	9a 83       	std	Y+2, r25	; 0x02
     cda:	89 83       	std	Y+1, r24	; 0x01
			UBRRH = ubrr_value>>8;
     cdc:	e0 e4       	ldi	r30, 0x40	; 64
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	9a 81       	ldd	r25, Y+2	; 0x02
     ce4:	89 2f       	mov	r24, r25
     ce6:	99 27       	eor	r25, r25
     ce8:	80 83       	st	Z, r24
			UBRRL = ubrr_value;
     cea:	e9 e2       	ldi	r30, 0x29	; 41
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	80 83       	st	Z, r24
     cf2:	0f c0       	rjmp	.+30     	; 0xd12 <UART_init+0x37c>
			break;
	case(BaudRate19200):
			ubrr_value = (uint16)(((F_CPU / (BaudRate19200 * 8UL))) - 1);
     cf4:	83 e3       	ldi	r24, 0x33	; 51
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	9a 83       	std	Y+2, r25	; 0x02
     cfa:	89 83       	std	Y+1, r24	; 0x01
			UBRRH = ubrr_value>>8;
     cfc:	e0 e4       	ldi	r30, 0x40	; 64
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	9a 81       	ldd	r25, Y+2	; 0x02
     d04:	89 2f       	mov	r24, r25
     d06:	99 27       	eor	r25, r25
     d08:	80 83       	st	Z, r24
			UBRRL = ubrr_value;
     d0a:	e9 e2       	ldi	r30, 0x29	; 41
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	80 83       	st	Z, r24
			break;
	}

}
     d12:	2e 96       	adiw	r28, 0x0e	; 14
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	cd bf       	out	0x3d, r28	; 61
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	08 95       	ret

00000d24 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	0f 92       	push	r0
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     d30:	eb e2       	ldi	r30, 0x2B	; 43
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	88 2f       	mov	r24, r24
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	80 72       	andi	r24, 0x20	; 32
     d3c:	90 70       	andi	r25, 0x00	; 0
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	b9 f3       	breq	.-18     	; 0xd30 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     d42:	ec e2       	ldi	r30, 0x2C	; 44
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     d4a:	0f 90       	pop	r0
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     d5a:	eb e2       	ldi	r30, 0x2B	; 43
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	88 23       	and	r24, r24
     d62:	dc f7       	brge	.-10     	; 0xd5a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
     d64:	ec e2       	ldi	r30, 0x2C	; 44
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
}
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	00 d0       	rcall	.+0      	; 0xd76 <UART_sendString+0x6>
     d76:	0f 92       	push	r0
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	9b 83       	std	Y+3, r25	; 0x03
     d7e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     d80:	19 82       	std	Y+1, r1	; 0x01
     d82:	0e c0       	rjmp	.+28     	; 0xda0 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	9b 81       	ldd	r25, Y+3	; 0x03
     d8e:	fc 01       	movw	r30, r24
     d90:	e2 0f       	add	r30, r18
     d92:	f3 1f       	adc	r31, r19
     d94:	80 81       	ld	r24, Z
     d96:	0e 94 92 06 	call	0xd24	; 0xd24 <UART_sendByte>
		i++;
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	8f 5f       	subi	r24, 0xFF	; 255
     d9e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	9b 81       	ldd	r25, Y+3	; 0x03
     daa:	fc 01       	movw	r30, r24
     dac:	e2 0f       	add	r30, r18
     dae:	f3 1f       	adc	r31, r19
     db0:	80 81       	ld	r24, Z
     db2:	88 23       	and	r24, r24
     db4:	39 f7       	brne	.-50     	; 0xd84 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	00 d0       	rcall	.+0      	; 0xdcc <UART_receiveString+0xa>
     dcc:	0f 92       	push	r0
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	9b 83       	std	Y+3, r25	; 0x03
     dd4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     dd6:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	9b 81       	ldd	r25, Y+3	; 0x03
     de2:	8c 01       	movw	r16, r24
     de4:	02 0f       	add	r16, r18
     de6:	13 1f       	adc	r17, r19
     de8:	0e 94 a9 06 	call	0xd52	; 0xd52 <UART_recieveByte>
     dec:	f8 01       	movw	r30, r16
     dee:	80 83       	st	Z, r24
     df0:	0f c0       	rjmp	.+30     	; 0xe10 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	8f 5f       	subi	r24, 0xFF	; 255
     df6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	9b 81       	ldd	r25, Y+3	; 0x03
     e02:	8c 01       	movw	r16, r24
     e04:	02 0f       	add	r16, r18
     e06:	13 1f       	adc	r17, r19
     e08:	0e 94 a9 06 	call	0xd52	; 0xd52 <UART_recieveByte>
     e0c:	f8 01       	movw	r30, r16
     e0e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	9b 81       	ldd	r25, Y+3	; 0x03
     e1a:	fc 01       	movw	r30, r24
     e1c:	e2 0f       	add	r30, r18
     e1e:	f3 1f       	adc	r31, r19
     e20:	80 81       	ld	r24, Z
     e22:	83 32       	cpi	r24, 0x23	; 35
     e24:	31 f7       	brne	.-52     	; 0xdf2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	9b 81       	ldd	r25, Y+3	; 0x03
     e30:	fc 01       	movw	r30, r24
     e32:	e2 0f       	add	r30, r18
     e34:	f3 1f       	adc	r31, r19
     e36:	10 82       	st	Z, r1
}
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	08 95       	ret

00000e48 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	00 d0       	rcall	.+0      	; 0xe4e <EEPROM_writeByte+0x6>
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <EEPROM_writeByte+0x8>
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	9a 83       	std	Y+2, r25	; 0x02
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     e5a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     e5e:	0e 94 92 0b 	call	0x1724	; 0x1724 <TWI_getStatus>
     e62:	88 30       	cpi	r24, 0x08	; 8
     e64:	11 f0       	breq	.+4      	; 0xe6a <EEPROM_writeByte+0x22>
        return ERROR;
     e66:	1c 82       	std	Y+4, r1	; 0x04
     e68:	28 c0       	rjmp	.+80     	; 0xeba <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	9a 81       	ldd	r25, Y+2	; 0x02
     e6e:	80 70       	andi	r24, 0x00	; 0
     e70:	97 70       	andi	r25, 0x07	; 7
     e72:	88 0f       	add	r24, r24
     e74:	89 2f       	mov	r24, r25
     e76:	88 1f       	adc	r24, r24
     e78:	99 0b       	sbc	r25, r25
     e7a:	91 95       	neg	r25
     e7c:	80 6a       	ori	r24, 0xA0	; 160
     e7e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     e82:	0e 94 92 0b 	call	0x1724	; 0x1724 <TWI_getStatus>
     e86:	88 31       	cpi	r24, 0x18	; 24
     e88:	11 f0       	breq	.+4      	; 0xe8e <EEPROM_writeByte+0x46>
        return ERROR; 
     e8a:	1c 82       	std	Y+4, r1	; 0x04
     e8c:	16 c0       	rjmp	.+44     	; 0xeba <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	0e 94 55 0b 	call	0x16aa	; 0x16aa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     e94:	0e 94 92 0b 	call	0x1724	; 0x1724 <TWI_getStatus>
     e98:	88 32       	cpi	r24, 0x28	; 40
     e9a:	11 f0       	breq	.+4      	; 0xea0 <EEPROM_writeByte+0x58>
        return ERROR;
     e9c:	1c 82       	std	Y+4, r1	; 0x04
     e9e:	0d c0       	rjmp	.+26     	; 0xeba <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	0e 94 55 0b 	call	0x16aa	; 0x16aa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     ea6:	0e 94 92 0b 	call	0x1724	; 0x1724 <TWI_getStatus>
     eaa:	88 32       	cpi	r24, 0x28	; 40
     eac:	11 f0       	breq	.+4      	; 0xeb2 <EEPROM_writeByte+0x6a>
        return ERROR;
     eae:	1c 82       	std	Y+4, r1	; 0x04
     eb0:	04 c0       	rjmp	.+8      	; 0xeba <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     eb2:	0e 94 4a 0b 	call	0x1694	; 0x1694 <TWI_stop>
	
    return SUCCESS;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	8c 83       	std	Y+4, r24	; 0x04
     eba:	8c 81       	ldd	r24, Y+4	; 0x04
}
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	00 d0       	rcall	.+0      	; 0xed0 <EEPROM_readByte+0x6>
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <EEPROM_readByte+0x8>
     ed2:	0f 92       	push	r0
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	9a 83       	std	Y+2, r25	; 0x02
     eda:	89 83       	std	Y+1, r24	; 0x01
     edc:	7c 83       	std	Y+4, r23	; 0x04
     ede:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     ee0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     ee4:	0e 94 92 0b 	call	0x1724	; 0x1724 <TWI_getStatus>
     ee8:	88 30       	cpi	r24, 0x08	; 8
     eea:	11 f0       	breq	.+4      	; 0xef0 <EEPROM_readByte+0x26>
        return ERROR;
     eec:	1d 82       	std	Y+5, r1	; 0x05
     eee:	44 c0       	rjmp	.+136    	; 0xf78 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	9a 81       	ldd	r25, Y+2	; 0x02
     ef4:	80 70       	andi	r24, 0x00	; 0
     ef6:	97 70       	andi	r25, 0x07	; 7
     ef8:	88 0f       	add	r24, r24
     efa:	89 2f       	mov	r24, r25
     efc:	88 1f       	adc	r24, r24
     efe:	99 0b       	sbc	r25, r25
     f00:	91 95       	neg	r25
     f02:	80 6a       	ori	r24, 0xA0	; 160
     f04:	0e 94 55 0b 	call	0x16aa	; 0x16aa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     f08:	0e 94 92 0b 	call	0x1724	; 0x1724 <TWI_getStatus>
     f0c:	88 31       	cpi	r24, 0x18	; 24
     f0e:	11 f0       	breq	.+4      	; 0xf14 <EEPROM_readByte+0x4a>
        return ERROR;
     f10:	1d 82       	std	Y+5, r1	; 0x05
     f12:	32 c0       	rjmp	.+100    	; 0xf78 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	0e 94 55 0b 	call	0x16aa	; 0x16aa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     f1a:	0e 94 92 0b 	call	0x1724	; 0x1724 <TWI_getStatus>
     f1e:	88 32       	cpi	r24, 0x28	; 40
     f20:	11 f0       	breq	.+4      	; 0xf26 <EEPROM_readByte+0x5c>
        return ERROR;
     f22:	1d 82       	std	Y+5, r1	; 0x05
     f24:	29 c0       	rjmp	.+82     	; 0xf78 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     f26:	0e 94 3a 0b 	call	0x1674	; 0x1674 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     f2a:	0e 94 92 0b 	call	0x1724	; 0x1724 <TWI_getStatus>
     f2e:	80 31       	cpi	r24, 0x10	; 16
     f30:	11 f0       	breq	.+4      	; 0xf36 <EEPROM_readByte+0x6c>
        return ERROR;
     f32:	1d 82       	std	Y+5, r1	; 0x05
     f34:	21 c0       	rjmp	.+66     	; 0xf78 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	9a 81       	ldd	r25, Y+2	; 0x02
     f3a:	80 70       	andi	r24, 0x00	; 0
     f3c:	97 70       	andi	r25, 0x07	; 7
     f3e:	88 0f       	add	r24, r24
     f40:	89 2f       	mov	r24, r25
     f42:	88 1f       	adc	r24, r24
     f44:	99 0b       	sbc	r25, r25
     f46:	91 95       	neg	r25
     f48:	81 6a       	ori	r24, 0xA1	; 161
     f4a:	0e 94 55 0b 	call	0x16aa	; 0x16aa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     f4e:	0e 94 92 0b 	call	0x1724	; 0x1724 <TWI_getStatus>
     f52:	80 34       	cpi	r24, 0x40	; 64
     f54:	11 f0       	breq	.+4      	; 0xf5a <EEPROM_readByte+0x90>
        return ERROR;
     f56:	1d 82       	std	Y+5, r1	; 0x05
     f58:	0f c0       	rjmp	.+30     	; 0xf78 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     f5a:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <TWI_readByteWithNACK>
     f5e:	eb 81       	ldd	r30, Y+3	; 0x03
     f60:	fc 81       	ldd	r31, Y+4	; 0x04
     f62:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     f64:	0e 94 92 0b 	call	0x1724	; 0x1724 <TWI_getStatus>
     f68:	88 35       	cpi	r24, 0x58	; 88
     f6a:	11 f0       	breq	.+4      	; 0xf70 <EEPROM_readByte+0xa6>
        return ERROR;
     f6c:	1d 82       	std	Y+5, r1	; 0x05
     f6e:	04 c0       	rjmp	.+8      	; 0xf78 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     f70:	0e 94 4a 0b 	call	0x1694	; 0x1694 <TWI_stop>

    return SUCCESS;
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	8d 83       	std	Y+5, r24	; 0x05
     f78:	8d 81       	ldd	r24, Y+5	; 0x05
}
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <GPIO_setupPinDirection+0x6>
     f90:	00 d0       	rcall	.+0      	; 0xf92 <GPIO_setupPinDirection+0x8>
     f92:	0f 92       	push	r0
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	89 83       	std	Y+1, r24	; 0x01
     f9a:	6a 83       	std	Y+2, r22	; 0x02
     f9c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	88 30       	cpi	r24, 0x08	; 8
     fa2:	08 f0       	brcs	.+2      	; 0xfa6 <GPIO_setupPinDirection+0x1c>
     fa4:	d5 c0       	rjmp	.+426    	; 0x1150 <GPIO_setupPinDirection+0x1c6>
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	84 30       	cpi	r24, 0x04	; 4
     faa:	08 f0       	brcs	.+2      	; 0xfae <GPIO_setupPinDirection+0x24>
     fac:	d1 c0       	rjmp	.+418    	; 0x1150 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	3d 83       	std	Y+5, r19	; 0x05
     fb6:	2c 83       	std	Y+4, r18	; 0x04
     fb8:	8c 81       	ldd	r24, Y+4	; 0x04
     fba:	9d 81       	ldd	r25, Y+5	; 0x05
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	91 05       	cpc	r25, r1
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <GPIO_setupPinDirection+0x3a>
     fc2:	43 c0       	rjmp	.+134    	; 0x104a <GPIO_setupPinDirection+0xc0>
     fc4:	2c 81       	ldd	r18, Y+4	; 0x04
     fc6:	3d 81       	ldd	r19, Y+5	; 0x05
     fc8:	22 30       	cpi	r18, 0x02	; 2
     fca:	31 05       	cpc	r19, r1
     fcc:	2c f4       	brge	.+10     	; 0xfd8 <GPIO_setupPinDirection+0x4e>
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
     fd0:	9d 81       	ldd	r25, Y+5	; 0x05
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	71 f0       	breq	.+28     	; 0xff2 <GPIO_setupPinDirection+0x68>
     fd6:	bc c0       	rjmp	.+376    	; 0x1150 <GPIO_setupPinDirection+0x1c6>
     fd8:	2c 81       	ldd	r18, Y+4	; 0x04
     fda:	3d 81       	ldd	r19, Y+5	; 0x05
     fdc:	22 30       	cpi	r18, 0x02	; 2
     fde:	31 05       	cpc	r19, r1
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <GPIO_setupPinDirection+0x5a>
     fe2:	5f c0       	rjmp	.+190    	; 0x10a2 <GPIO_setupPinDirection+0x118>
     fe4:	8c 81       	ldd	r24, Y+4	; 0x04
     fe6:	9d 81       	ldd	r25, Y+5	; 0x05
     fe8:	83 30       	cpi	r24, 0x03	; 3
     fea:	91 05       	cpc	r25, r1
     fec:	09 f4       	brne	.+2      	; 0xff0 <GPIO_setupPinDirection+0x66>
     fee:	85 c0       	rjmp	.+266    	; 0x10fa <GPIO_setupPinDirection+0x170>
     ff0:	af c0       	rjmp	.+350    	; 0x1150 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	a1 f4       	brne	.+40     	; 0x1020 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     ff8:	aa e3       	ldi	r26, 0x3A	; 58
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	ea e3       	ldi	r30, 0x3A	; 58
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <GPIO_setupPinDirection+0x8c>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <GPIO_setupPinDirection+0x88>
    101a:	84 2b       	or	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	98 c0       	rjmp	.+304    	; 0x1150 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1020:	aa e3       	ldi	r26, 0x3A	; 58
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	ea e3       	ldi	r30, 0x3A	; 58
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <GPIO_setupPinDirection+0xb4>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <GPIO_setupPinDirection+0xb0>
    1042:	80 95       	com	r24
    1044:	84 23       	and	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	83 c0       	rjmp	.+262    	; 0x1150 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	a1 f4       	brne	.+40     	; 0x1078 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1050:	a7 e3       	ldi	r26, 0x37	; 55
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e7 e3       	ldi	r30, 0x37	; 55
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 2e       	mov	r0, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <GPIO_setupPinDirection+0xe4>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <GPIO_setupPinDirection+0xe0>
    1072:	84 2b       	or	r24, r20
    1074:	8c 93       	st	X, r24
    1076:	6c c0       	rjmp	.+216    	; 0x1150 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1078:	a7 e3       	ldi	r26, 0x37	; 55
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e7 e3       	ldi	r30, 0x37	; 55
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	48 2f       	mov	r20, r24
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <GPIO_setupPinDirection+0x10c>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <GPIO_setupPinDirection+0x108>
    109a:	80 95       	com	r24
    109c:	84 23       	and	r24, r20
    109e:	8c 93       	st	X, r24
    10a0:	57 c0       	rjmp	.+174    	; 0x1150 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	a1 f4       	brne	.+40     	; 0x10d0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    10a8:	a4 e3       	ldi	r26, 0x34	; 52
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e4 e3       	ldi	r30, 0x34	; 52
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 2e       	mov	r0, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <GPIO_setupPinDirection+0x13c>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <GPIO_setupPinDirection+0x138>
    10ca:	84 2b       	or	r24, r20
    10cc:	8c 93       	st	X, r24
    10ce:	40 c0       	rjmp	.+128    	; 0x1150 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    10d0:	a4 e3       	ldi	r26, 0x34	; 52
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e4 e3       	ldi	r30, 0x34	; 52
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	48 2f       	mov	r20, r24
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 2e       	mov	r0, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <GPIO_setupPinDirection+0x164>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	0a 94       	dec	r0
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <GPIO_setupPinDirection+0x160>
    10f2:	80 95       	com	r24
    10f4:	84 23       	and	r24, r20
    10f6:	8c 93       	st	X, r24
    10f8:	2b c0       	rjmp	.+86     	; 0x1150 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	a1 f4       	brne	.+40     	; 0x1128 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1100:	a1 e3       	ldi	r26, 0x31	; 49
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e1 e3       	ldi	r30, 0x31	; 49
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <GPIO_setupPinDirection+0x194>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <GPIO_setupPinDirection+0x190>
    1122:	84 2b       	or	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	14 c0       	rjmp	.+40     	; 0x1150 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1128:	a1 e3       	ldi	r26, 0x31	; 49
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e1 e3       	ldi	r30, 0x31	; 49
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <GPIO_setupPinDirection+0x1bc>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <GPIO_setupPinDirection+0x1b8>
    114a:	80 95       	com	r24
    114c:	84 23       	and	r24, r20
    114e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	00 d0       	rcall	.+0      	; 0x1166 <GPIO_writePin+0x6>
    1166:	00 d0       	rcall	.+0      	; 0x1168 <GPIO_writePin+0x8>
    1168:	0f 92       	push	r0
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	6a 83       	std	Y+2, r22	; 0x02
    1172:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	88 30       	cpi	r24, 0x08	; 8
    1178:	08 f0       	brcs	.+2      	; 0x117c <GPIO_writePin+0x1c>
    117a:	d5 c0       	rjmp	.+426    	; 0x1326 <GPIO_writePin+0x1c6>
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	84 30       	cpi	r24, 0x04	; 4
    1180:	08 f0       	brcs	.+2      	; 0x1184 <GPIO_writePin+0x24>
    1182:	d1 c0       	rjmp	.+418    	; 0x1326 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	3d 83       	std	Y+5, r19	; 0x05
    118c:	2c 83       	std	Y+4, r18	; 0x04
    118e:	8c 81       	ldd	r24, Y+4	; 0x04
    1190:	9d 81       	ldd	r25, Y+5	; 0x05
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	91 05       	cpc	r25, r1
    1196:	09 f4       	brne	.+2      	; 0x119a <GPIO_writePin+0x3a>
    1198:	43 c0       	rjmp	.+134    	; 0x1220 <GPIO_writePin+0xc0>
    119a:	2c 81       	ldd	r18, Y+4	; 0x04
    119c:	3d 81       	ldd	r19, Y+5	; 0x05
    119e:	22 30       	cpi	r18, 0x02	; 2
    11a0:	31 05       	cpc	r19, r1
    11a2:	2c f4       	brge	.+10     	; 0x11ae <GPIO_writePin+0x4e>
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	9d 81       	ldd	r25, Y+5	; 0x05
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	71 f0       	breq	.+28     	; 0x11c8 <GPIO_writePin+0x68>
    11ac:	bc c0       	rjmp	.+376    	; 0x1326 <GPIO_writePin+0x1c6>
    11ae:	2c 81       	ldd	r18, Y+4	; 0x04
    11b0:	3d 81       	ldd	r19, Y+5	; 0x05
    11b2:	22 30       	cpi	r18, 0x02	; 2
    11b4:	31 05       	cpc	r19, r1
    11b6:	09 f4       	brne	.+2      	; 0x11ba <GPIO_writePin+0x5a>
    11b8:	5f c0       	rjmp	.+190    	; 0x1278 <GPIO_writePin+0x118>
    11ba:	8c 81       	ldd	r24, Y+4	; 0x04
    11bc:	9d 81       	ldd	r25, Y+5	; 0x05
    11be:	83 30       	cpi	r24, 0x03	; 3
    11c0:	91 05       	cpc	r25, r1
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <GPIO_writePin+0x66>
    11c4:	85 c0       	rjmp	.+266    	; 0x12d0 <GPIO_writePin+0x170>
    11c6:	af c0       	rjmp	.+350    	; 0x1326 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	a1 f4       	brne	.+40     	; 0x11f6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    11ce:	ab e3       	ldi	r26, 0x3B	; 59
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	eb e3       	ldi	r30, 0x3B	; 59
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	48 2f       	mov	r20, r24
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 2e       	mov	r0, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <GPIO_writePin+0x8c>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <GPIO_writePin+0x88>
    11f0:	84 2b       	or	r24, r20
    11f2:	8c 93       	st	X, r24
    11f4:	98 c0       	rjmp	.+304    	; 0x1326 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    11f6:	ab e3       	ldi	r26, 0x3B	; 59
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	eb e3       	ldi	r30, 0x3B	; 59
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	48 2f       	mov	r20, r24
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	02 2e       	mov	r0, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <GPIO_writePin+0xb4>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	0a 94       	dec	r0
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <GPIO_writePin+0xb0>
    1218:	80 95       	com	r24
    121a:	84 23       	and	r24, r20
    121c:	8c 93       	st	X, r24
    121e:	83 c0       	rjmp	.+262    	; 0x1326 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	81 30       	cpi	r24, 0x01	; 1
    1224:	a1 f4       	brne	.+40     	; 0x124e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1226:	a8 e3       	ldi	r26, 0x38	; 56
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e8 e3       	ldi	r30, 0x38	; 56
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <GPIO_writePin+0xe4>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <GPIO_writePin+0xe0>
    1248:	84 2b       	or	r24, r20
    124a:	8c 93       	st	X, r24
    124c:	6c c0       	rjmp	.+216    	; 0x1326 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    124e:	a8 e3       	ldi	r26, 0x38	; 56
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e8 e3       	ldi	r30, 0x38	; 56
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <GPIO_writePin+0x10c>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <GPIO_writePin+0x108>
    1270:	80 95       	com	r24
    1272:	84 23       	and	r24, r20
    1274:	8c 93       	st	X, r24
    1276:	57 c0       	rjmp	.+174    	; 0x1326 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	a1 f4       	brne	.+40     	; 0x12a6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    127e:	a5 e3       	ldi	r26, 0x35	; 53
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e5 e3       	ldi	r30, 0x35	; 53
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <GPIO_writePin+0x13c>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <GPIO_writePin+0x138>
    12a0:	84 2b       	or	r24, r20
    12a2:	8c 93       	st	X, r24
    12a4:	40 c0       	rjmp	.+128    	; 0x1326 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    12a6:	a5 e3       	ldi	r26, 0x35	; 53
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e5 e3       	ldi	r30, 0x35	; 53
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 2e       	mov	r0, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <GPIO_writePin+0x164>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <GPIO_writePin+0x160>
    12c8:	80 95       	com	r24
    12ca:	84 23       	and	r24, r20
    12cc:	8c 93       	st	X, r24
    12ce:	2b c0       	rjmp	.+86     	; 0x1326 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	a1 f4       	brne	.+40     	; 0x12fe <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    12d6:	a2 e3       	ldi	r26, 0x32	; 50
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e2 e3       	ldi	r30, 0x32	; 50
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 2e       	mov	r0, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <GPIO_writePin+0x194>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <GPIO_writePin+0x190>
    12f8:	84 2b       	or	r24, r20
    12fa:	8c 93       	st	X, r24
    12fc:	14 c0       	rjmp	.+40     	; 0x1326 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    12fe:	a2 e3       	ldi	r26, 0x32	; 50
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e2 e3       	ldi	r30, 0x32	; 50
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <GPIO_writePin+0x1bc>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <GPIO_writePin+0x1b8>
    1320:	80 95       	com	r24
    1322:	84 23       	and	r24, r20
    1324:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	00 d0       	rcall	.+0      	; 0x133c <GPIO_readPin+0x6>
    133c:	00 d0       	rcall	.+0      	; 0x133e <GPIO_readPin+0x8>
    133e:	0f 92       	push	r0
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	8a 83       	std	Y+2, r24	; 0x02
    1346:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1348:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	88 30       	cpi	r24, 0x08	; 8
    134e:	08 f0       	brcs	.+2      	; 0x1352 <GPIO_readPin+0x1c>
    1350:	84 c0       	rjmp	.+264    	; 0x145a <GPIO_readPin+0x124>
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	84 30       	cpi	r24, 0x04	; 4
    1356:	08 f0       	brcs	.+2      	; 0x135a <GPIO_readPin+0x24>
    1358:	80 c0       	rjmp	.+256    	; 0x145a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	3d 83       	std	Y+5, r19	; 0x05
    1362:	2c 83       	std	Y+4, r18	; 0x04
    1364:	4c 81       	ldd	r20, Y+4	; 0x04
    1366:	5d 81       	ldd	r21, Y+5	; 0x05
    1368:	41 30       	cpi	r20, 0x01	; 1
    136a:	51 05       	cpc	r21, r1
    136c:	79 f1       	breq	.+94     	; 0x13cc <GPIO_readPin+0x96>
    136e:	8c 81       	ldd	r24, Y+4	; 0x04
    1370:	9d 81       	ldd	r25, Y+5	; 0x05
    1372:	82 30       	cpi	r24, 0x02	; 2
    1374:	91 05       	cpc	r25, r1
    1376:	34 f4       	brge	.+12     	; 0x1384 <GPIO_readPin+0x4e>
    1378:	2c 81       	ldd	r18, Y+4	; 0x04
    137a:	3d 81       	ldd	r19, Y+5	; 0x05
    137c:	21 15       	cp	r18, r1
    137e:	31 05       	cpc	r19, r1
    1380:	69 f0       	breq	.+26     	; 0x139c <GPIO_readPin+0x66>
    1382:	6b c0       	rjmp	.+214    	; 0x145a <GPIO_readPin+0x124>
    1384:	4c 81       	ldd	r20, Y+4	; 0x04
    1386:	5d 81       	ldd	r21, Y+5	; 0x05
    1388:	42 30       	cpi	r20, 0x02	; 2
    138a:	51 05       	cpc	r21, r1
    138c:	b9 f1       	breq	.+110    	; 0x13fc <GPIO_readPin+0xc6>
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
    1390:	9d 81       	ldd	r25, Y+5	; 0x05
    1392:	83 30       	cpi	r24, 0x03	; 3
    1394:	91 05       	cpc	r25, r1
    1396:	09 f4       	brne	.+2      	; 0x139a <GPIO_readPin+0x64>
    1398:	49 c0       	rjmp	.+146    	; 0x142c <GPIO_readPin+0xf6>
    139a:	5f c0       	rjmp	.+190    	; 0x145a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    139c:	e9 e3       	ldi	r30, 0x39	; 57
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	88 2f       	mov	r24, r24
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	a9 01       	movw	r20, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <GPIO_readPin+0x7e>
    13b0:	55 95       	asr	r21
    13b2:	47 95       	ror	r20
    13b4:	8a 95       	dec	r24
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <GPIO_readPin+0x7a>
    13b8:	ca 01       	movw	r24, r20
    13ba:	81 70       	andi	r24, 0x01	; 1
    13bc:	90 70       	andi	r25, 0x00	; 0
    13be:	88 23       	and	r24, r24
    13c0:	19 f0       	breq	.+6      	; 0x13c8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	49 c0       	rjmp	.+146    	; 0x145a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13c8:	19 82       	std	Y+1, r1	; 0x01
    13ca:	47 c0       	rjmp	.+142    	; 0x145a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    13cc:	e6 e3       	ldi	r30, 0x36	; 54
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	88 2f       	mov	r24, r24
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	a9 01       	movw	r20, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <GPIO_readPin+0xae>
    13e0:	55 95       	asr	r21
    13e2:	47 95       	ror	r20
    13e4:	8a 95       	dec	r24
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <GPIO_readPin+0xaa>
    13e8:	ca 01       	movw	r24, r20
    13ea:	81 70       	andi	r24, 0x01	; 1
    13ec:	90 70       	andi	r25, 0x00	; 0
    13ee:	88 23       	and	r24, r24
    13f0:	19 f0       	breq	.+6      	; 0x13f8 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	89 83       	std	Y+1, r24	; 0x01
    13f6:	31 c0       	rjmp	.+98     	; 0x145a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13f8:	19 82       	std	Y+1, r1	; 0x01
    13fa:	2f c0       	rjmp	.+94     	; 0x145a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    13fc:	e3 e3       	ldi	r30, 0x33	; 51
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	88 2f       	mov	r24, r24
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	a9 01       	movw	r20, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <GPIO_readPin+0xde>
    1410:	55 95       	asr	r21
    1412:	47 95       	ror	r20
    1414:	8a 95       	dec	r24
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <GPIO_readPin+0xda>
    1418:	ca 01       	movw	r24, r20
    141a:	81 70       	andi	r24, 0x01	; 1
    141c:	90 70       	andi	r25, 0x00	; 0
    141e:	88 23       	and	r24, r24
    1420:	19 f0       	breq	.+6      	; 0x1428 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	89 83       	std	Y+1, r24	; 0x01
    1426:	19 c0       	rjmp	.+50     	; 0x145a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1428:	19 82       	std	Y+1, r1	; 0x01
    142a:	17 c0       	rjmp	.+46     	; 0x145a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    142c:	e0 e3       	ldi	r30, 0x30	; 48
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	88 2f       	mov	r24, r24
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	a9 01       	movw	r20, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <GPIO_readPin+0x10e>
    1440:	55 95       	asr	r21
    1442:	47 95       	ror	r20
    1444:	8a 95       	dec	r24
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <GPIO_readPin+0x10a>
    1448:	ca 01       	movw	r24, r20
    144a:	81 70       	andi	r24, 0x01	; 1
    144c:	90 70       	andi	r25, 0x00	; 0
    144e:	88 23       	and	r24, r24
    1450:	19 f0       	breq	.+6      	; 0x1458 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	89 83       	std	Y+1, r24	; 0x01
    1456:	01 c0       	rjmp	.+2      	; 0x145a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1458:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    145a:	89 81       	ldd	r24, Y+1	; 0x01
}
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	00 d0       	rcall	.+0      	; 0x1472 <GPIO_setupPortDirection+0x6>
    1472:	00 d0       	rcall	.+0      	; 0x1474 <GPIO_setupPortDirection+0x8>
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	84 30       	cpi	r24, 0x04	; 4
    1480:	90 f5       	brcc	.+100    	; 0x14e6 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	3c 83       	std	Y+4, r19	; 0x04
    148a:	2b 83       	std	Y+3, r18	; 0x03
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	9c 81       	ldd	r25, Y+4	; 0x04
    1490:	81 30       	cpi	r24, 0x01	; 1
    1492:	91 05       	cpc	r25, r1
    1494:	d1 f0       	breq	.+52     	; 0x14ca <GPIO_setupPortDirection+0x5e>
    1496:	2b 81       	ldd	r18, Y+3	; 0x03
    1498:	3c 81       	ldd	r19, Y+4	; 0x04
    149a:	22 30       	cpi	r18, 0x02	; 2
    149c:	31 05       	cpc	r19, r1
    149e:	2c f4       	brge	.+10     	; 0x14aa <GPIO_setupPortDirection+0x3e>
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	61 f0       	breq	.+24     	; 0x14c0 <GPIO_setupPortDirection+0x54>
    14a8:	1e c0       	rjmp	.+60     	; 0x14e6 <GPIO_setupPortDirection+0x7a>
    14aa:	2b 81       	ldd	r18, Y+3	; 0x03
    14ac:	3c 81       	ldd	r19, Y+4	; 0x04
    14ae:	22 30       	cpi	r18, 0x02	; 2
    14b0:	31 05       	cpc	r19, r1
    14b2:	81 f0       	breq	.+32     	; 0x14d4 <GPIO_setupPortDirection+0x68>
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	83 30       	cpi	r24, 0x03	; 3
    14ba:	91 05       	cpc	r25, r1
    14bc:	81 f0       	breq	.+32     	; 0x14de <GPIO_setupPortDirection+0x72>
    14be:	13 c0       	rjmp	.+38     	; 0x14e6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    14c0:	ea e3       	ldi	r30, 0x3A	; 58
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	80 83       	st	Z, r24
    14c8:	0e c0       	rjmp	.+28     	; 0x14e6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    14ca:	e7 e3       	ldi	r30, 0x37	; 55
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	80 83       	st	Z, r24
    14d2:	09 c0       	rjmp	.+18     	; 0x14e6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    14d4:	e4 e3       	ldi	r30, 0x34	; 52
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	80 83       	st	Z, r24
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    14de:	e1 e3       	ldi	r30, 0x31	; 49
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	80 83       	st	Z, r24
			break;
		}
	}
}
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <GPIO_writePort+0x6>
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <GPIO_writePort+0x8>
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	84 30       	cpi	r24, 0x04	; 4
    1508:	90 f5       	brcc	.+100    	; 0x156e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	3c 83       	std	Y+4, r19	; 0x04
    1512:	2b 83       	std	Y+3, r18	; 0x03
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	91 05       	cpc	r25, r1
    151c:	d1 f0       	breq	.+52     	; 0x1552 <GPIO_writePort+0x5e>
    151e:	2b 81       	ldd	r18, Y+3	; 0x03
    1520:	3c 81       	ldd	r19, Y+4	; 0x04
    1522:	22 30       	cpi	r18, 0x02	; 2
    1524:	31 05       	cpc	r19, r1
    1526:	2c f4       	brge	.+10     	; 0x1532 <GPIO_writePort+0x3e>
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	9c 81       	ldd	r25, Y+4	; 0x04
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	61 f0       	breq	.+24     	; 0x1548 <GPIO_writePort+0x54>
    1530:	1e c0       	rjmp	.+60     	; 0x156e <GPIO_writePort+0x7a>
    1532:	2b 81       	ldd	r18, Y+3	; 0x03
    1534:	3c 81       	ldd	r19, Y+4	; 0x04
    1536:	22 30       	cpi	r18, 0x02	; 2
    1538:	31 05       	cpc	r19, r1
    153a:	81 f0       	breq	.+32     	; 0x155c <GPIO_writePort+0x68>
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	9c 81       	ldd	r25, Y+4	; 0x04
    1540:	83 30       	cpi	r24, 0x03	; 3
    1542:	91 05       	cpc	r25, r1
    1544:	81 f0       	breq	.+32     	; 0x1566 <GPIO_writePort+0x72>
    1546:	13 c0       	rjmp	.+38     	; 0x156e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1548:	eb e3       	ldi	r30, 0x3B	; 59
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	80 83       	st	Z, r24
    1550:	0e c0       	rjmp	.+28     	; 0x156e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1552:	e8 e3       	ldi	r30, 0x38	; 56
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	80 83       	st	Z, r24
    155a:	09 c0       	rjmp	.+18     	; 0x156e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    155c:	e5 e3       	ldi	r30, 0x35	; 53
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	80 83       	st	Z, r24
    1564:	04 c0       	rjmp	.+8      	; 0x156e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1566:	e2 e3       	ldi	r30, 0x32	; 50
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	80 83       	st	Z, r24
			break;
		}
	}
}
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	00 d0       	rcall	.+0      	; 0x1582 <GPIO_readPort+0x6>
    1582:	00 d0       	rcall	.+0      	; 0x1584 <GPIO_readPort+0x8>
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    158a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	84 30       	cpi	r24, 0x04	; 4
    1590:	90 f5       	brcc	.+100    	; 0x15f6 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	3c 83       	std	Y+4, r19	; 0x04
    159a:	2b 83       	std	Y+3, r18	; 0x03
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	91 05       	cpc	r25, r1
    15a4:	d1 f0       	breq	.+52     	; 0x15da <GPIO_readPort+0x5e>
    15a6:	2b 81       	ldd	r18, Y+3	; 0x03
    15a8:	3c 81       	ldd	r19, Y+4	; 0x04
    15aa:	22 30       	cpi	r18, 0x02	; 2
    15ac:	31 05       	cpc	r19, r1
    15ae:	2c f4       	brge	.+10     	; 0x15ba <GPIO_readPort+0x3e>
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	61 f0       	breq	.+24     	; 0x15d0 <GPIO_readPort+0x54>
    15b8:	1e c0       	rjmp	.+60     	; 0x15f6 <GPIO_readPort+0x7a>
    15ba:	2b 81       	ldd	r18, Y+3	; 0x03
    15bc:	3c 81       	ldd	r19, Y+4	; 0x04
    15be:	22 30       	cpi	r18, 0x02	; 2
    15c0:	31 05       	cpc	r19, r1
    15c2:	81 f0       	breq	.+32     	; 0x15e4 <GPIO_readPort+0x68>
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	9c 81       	ldd	r25, Y+4	; 0x04
    15c8:	83 30       	cpi	r24, 0x03	; 3
    15ca:	91 05       	cpc	r25, r1
    15cc:	81 f0       	breq	.+32     	; 0x15ee <GPIO_readPort+0x72>
    15ce:	13 c0       	rjmp	.+38     	; 0x15f6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    15d0:	e9 e3       	ldi	r30, 0x39	; 57
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	0e c0       	rjmp	.+28     	; 0x15f6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    15da:	e6 e3       	ldi	r30, 0x36	; 54
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	89 83       	std	Y+1, r24	; 0x01
    15e2:	09 c0       	rjmp	.+18     	; 0x15f6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    15e4:	e3 e3       	ldi	r30, 0x33	; 51
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	04 c0       	rjmp	.+8      	; 0x15f6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    15ee:	e0 e3       	ldi	r30, 0x30	; 48
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <TWI_init>:
#include "common_macros.h"
#include <avr/io.h>
//

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	00 d0       	rcall	.+0      	; 0x160c <TWI_init+0x6>
    160c:	00 d0       	rcall	.+0      	; 0x160e <TWI_init+0x8>
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	9a 83       	std	Y+2, r25	; 0x02
    1614:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	switch(Config_Ptr->bit_rate){
    1616:	e9 81       	ldd	r30, Y+1	; 0x01
    1618:	fa 81       	ldd	r31, Y+2	; 0x02
    161a:	82 81       	ldd	r24, Z+2	; 0x02
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	3c 83       	std	Y+4, r19	; 0x04
    1622:	2b 83       	std	Y+3, r18	; 0x03
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	9c 81       	ldd	r25, Y+4	; 0x04
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	31 f0       	breq	.+12     	; 0x1638 <TWI_init+0x32>
    162c:	2b 81       	ldd	r18, Y+3	; 0x03
    162e:	3c 81       	ldd	r19, Y+4	; 0x04
    1630:	21 30       	cpi	r18, 0x01	; 1
    1632:	31 05       	cpc	r19, r1
    1634:	31 f0       	breq	.+12     	; 0x1642 <TWI_init+0x3c>
    1636:	09 c0       	rjmp	.+18     	; 0x164a <TWI_init+0x44>
	case(NormalMode):
		TWBR = 0x20;
    1638:	e0 e2       	ldi	r30, 0x20	; 32
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 e2       	ldi	r24, 0x20	; 32
    163e:	80 83       	st	Z, r24
    1640:	04 c0       	rjmp	.+8      	; 0x164a <TWI_init+0x44>
		break;
	case(FastMode):
		TWBR = 0x02;
    1642:	e0 e2       	ldi	r30, 0x20	; 32
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	80 83       	st	Z, r24
	/*TWI Status
	Register (TWSR) is updated with a status code
	identifying the event. The TWSR only
	contains relevant status information
	when the TWI Interrupt Flag is asserted.*/
    TWSR = 0x00;
    164a:	e1 e2       	ldi	r30, 0x21	; 33
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address; // my address = 0x01 :)
    1650:	a2 e2       	ldi	r26, 0x22	; 34
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e9 81       	ldd	r30, Y+1	; 0x01
    1656:	fa 81       	ldd	r31, Y+2	; 0x02
    1658:	80 81       	ld	r24, Z
    165a:	91 81       	ldd	r25, Z+1	; 0x01
    165c:	8c 93       	st	X, r24
    TWCR = (1<<TWEN); /* enable TWI */
    165e:	e6 e5       	ldi	r30, 0x56	; 86
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	84 e0       	ldi	r24, 0x04	; 4
    1664:	80 83       	st	Z, r24
}
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <TWI_start>:

void TWI_start(void)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    167c:	e6 e5       	ldi	r30, 0x56	; 86
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	84 ea       	ldi	r24, 0xA4	; 164
    1682:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1684:	e6 e5       	ldi	r30, 0x56	; 86
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	88 23       	and	r24, r24
    168c:	dc f7       	brge	.-10     	; 0x1684 <TWI_start+0x10>
}
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <TWI_stop>:

void TWI_stop(void)
{
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    169c:	e6 e5       	ldi	r30, 0x56	; 86
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	84 e9       	ldi	r24, 0x94	; 148
    16a2:	80 83       	st	Z, r24
}
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	08 95       	ret

000016aa <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	0f 92       	push	r0
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    16b6:	e3 e2       	ldi	r30, 0x23	; 35
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    16be:	e6 e5       	ldi	r30, 0x56	; 86
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	84 e8       	ldi	r24, 0x84	; 132
    16c4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    16c6:	e6 e5       	ldi	r30, 0x56	; 86
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	88 23       	and	r24, r24
    16ce:	dc f7       	brge	.-10     	; 0x16c6 <TWI_writeByte+0x1c>
}
    16d0:	0f 90       	pop	r0
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	08 95       	ret

000016d8 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    16e0:	e6 e5       	ldi	r30, 0x56	; 86
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	84 ec       	ldi	r24, 0xC4	; 196
    16e6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    16e8:	e6 e5       	ldi	r30, 0x56	; 86
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	88 23       	and	r24, r24
    16f0:	dc f7       	brge	.-10     	; 0x16e8 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    16f2:	e3 e2       	ldi	r30, 0x23	; 35
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
}
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1706:	e6 e5       	ldi	r30, 0x56	; 86
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	84 e8       	ldi	r24, 0x84	; 132
    170c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    170e:	e6 e5       	ldi	r30, 0x56	; 86
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	88 23       	and	r24, r24
    1716:	dc f7       	brge	.-10     	; 0x170e <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1718:	e3 e2       	ldi	r30, 0x23	; 35
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
}
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	08 95       	ret

00001724 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	0f 92       	push	r0
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    172e:	e1 e2       	ldi	r30, 0x21	; 33
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	88 7f       	andi	r24, 0xF8	; 248
    1736:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1738:	89 81       	ldd	r24, Y+1	; 0x01
}
    173a:	0f 90       	pop	r0
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <_exit>:
    1742:	f8 94       	cli

00001744 <__stop_program>:
    1744:	ff cf       	rjmp	.-2      	; 0x1744 <__stop_program>
